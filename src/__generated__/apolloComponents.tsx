import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

/** Defines the bundle products to add to the cart. */
export type AddBundleProductsToCartInput = {
  /** The ID of the cart. */
  cart_id: Scalars['String'];
  /** An array of bundle products to add. */
  cart_items: Array<InputMaybe<BundleProductCartItemInput>>;
};

/** Contains details about the cart after adding bundle products. */
export type AddBundleProductsToCartOutput = {
  __typename?: 'AddBundleProductsToCartOutput';
  /** The cart after adding products. */
  cart: Cart;
};

/** Defines the configurable products to add to the cart. */
export type AddConfigurableProductsToCartInput = {
  /** The ID of the cart. */
  cart_id: Scalars['String'];
  /** An array of configurable products to add. */
  cart_items: Array<InputMaybe<ConfigurableProductCartItemInput>>;
};

/** Contains details about the cart after adding configurable products. */
export type AddConfigurableProductsToCartOutput = {
  __typename?: 'AddConfigurableProductsToCartOutput';
  /** The cart after adding products. */
  cart: Cart;
};

export type AddDownloadableProductsToCartInput = {
  /** The ID of the cart. */
  cart_id: Scalars['String'];
  /** An array of downloadable products to add. */
  cart_items: Array<InputMaybe<DownloadableProductCartItemInput>>;
};

/** Contains details about the cart after adding downloadable products. */
export type AddDownloadableProductsToCartOutput = {
  __typename?: 'AddDownloadableProductsToCartOutput';
  /** The cart after adding products. */
  cart: Cart;
};

/** Contains details about the cart after adding products to it. */
export type AddProductsToCartOutput = {
  __typename?: 'AddProductsToCartOutput';
  /** The cart after products have been added. */
  cart: Cart;
  /** Contains errors encountered while adding an item to the cart. */
  user_errors: Array<Maybe<CartUserInputError>>;
};

/** Contains products to add to an existing compare list. */
export type AddProductsToCompareListInput = {
  /** An array of product IDs to add to the compare list. */
  products: Array<InputMaybe<Scalars['ID']>>;
  /** The unique identifier of the compare list to modify. */
  uid: Scalars['ID'];
};

/** Contains the customer's wish list and any errors encountered. */
export type AddProductsToWishlistOutput = {
  __typename?: 'AddProductsToWishlistOutput';
  /** An array of errors encountered while adding products to a wish list. */
  user_errors: Array<Maybe<WishListUserInputError>>;
  /** Contains the wish list with all items that were successfully added. */
  wishlist: Wishlist;
};

/** Defines the simple and group products to add to the cart. */
export type AddSimpleProductsToCartInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String'];
  /** An array of simple and group items to add. */
  cart_items: Array<InputMaybe<SimpleProductCartItemInput>>;
};

/** Contains details about the cart after adding simple or group products. */
export type AddSimpleProductsToCartOutput = {
  __typename?: 'AddSimpleProductsToCartOutput';
  /** The cart after adding products. */
  cart: Cart;
};

/** Defines the virtual products to add to the cart. */
export type AddVirtualProductsToCartInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String'];
  /** An array of virtual products to add. */
  cart_items: Array<InputMaybe<VirtualProductCartItemInput>>;
};

/** Contains details about the cart after adding virtual products. */
export type AddVirtualProductsToCartOutput = {
  __typename?: 'AddVirtualProductsToCartOutput';
  /** The cart after adding products. */
  cart: Cart;
};

/** Contains the resultant wish list and any error information. */
export type AddWishlistItemsToCartOutput = {
  __typename?: 'AddWishlistItemsToCartOutput';
  /** An array of errors encountered while adding products to the customer's cart. */
  add_wishlist_items_to_cart_user_errors: Array<Maybe<WishlistCartUserInputError>>;
  /** Indicates whether the attempt to add items to the customer's cart was successful. */
  status: Scalars['Boolean'];
  /** Contains the wish list with all items that were successfully added. */
  wishlist: Wishlist;
};

/** Contains information for each filterable option (such as price, category `UID`, and custom attributes). */
export type Aggregation = {
  __typename?: 'Aggregation';
  /** Attribute code of the aggregation group. */
  attribute_code: Scalars['String'];
  /** The number of options in the aggregation group. */
  count?: Maybe<Scalars['Int']>;
  /** The aggregation display name. */
  label?: Maybe<Scalars['String']>;
  /** Array of options for the aggregation. */
  options?: Maybe<Array<Maybe<AggregationOption>>>;
  /** The relative position of the attribute in a layered navigation block. */
  position?: Maybe<Scalars['Int']>;
};

/** An implementation of `AggregationOptionInterface`. */
export type AggregationOption = AggregationOptionInterface & {
  __typename?: 'AggregationOption';
  /** The number of items that match the aggregation option. */
  count?: Maybe<Scalars['Int']>;
  /** The display label for an aggregation option. */
  label?: Maybe<Scalars['String']>;
  /** The internal ID that represents the value of the option. */
  value: Scalars['String'];
};

/** Defines aggregation option fields. */
export type AggregationOptionInterface = {
  /** The number of items that match the aggregation option. */
  count?: Maybe<Scalars['Int']>;
  /** The display label for an aggregation option. */
  label?: Maybe<Scalars['String']>;
  /** The internal ID that represents the value of the option. */
  value: Scalars['String'];
};

/** Filter category aggregations in layered navigation. */
export type AggregationsCategoryFilterInput = {
  /** Indicates whether to include only direct subcategories or all children categories at all levels. */
  includeDirectChildrenOnly?: InputMaybe<Scalars['Boolean']>;
};

/** An input object that specifies the filters used in product aggregations. */
export type AggregationsFilterInput = {
  /** Filter category aggregations in layered navigation. */
  category?: InputMaybe<AggregationsCategoryFilterInput>;
};

/** Contains the applied coupon code. */
export type AppliedCoupon = {
  __typename?: 'AppliedCoupon';
  /** The coupon code the shopper applied to the card. */
  code: Scalars['String'];
};

/** Specifies the coupon code to apply to the cart. */
export type ApplyCouponToCartInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String'];
  /** A valid coupon code. */
  coupon_code: Scalars['String'];
};

/** Contains details about the cart after applying a coupon. */
export type ApplyCouponToCartOutput = {
  __typename?: 'ApplyCouponToCartOutput';
  /** The cart after applying a coupon. */
  cart: Cart;
};

/** AreaInput defines the parameters which will be used for filter by specified location. */
export type AreaInput = {
  /** The radius for the search in KM. */
  radius: Scalars['Int'];
  /** The country code where search must be performed. Required parameter together with region, city or postcode. */
  search_term: Scalars['String'];
};

/** Contains the results of the request to assign a compare list. */
export type AssignCompareListToCustomerOutput = {
  __typename?: 'AssignCompareListToCustomerOutput';
  /** The contents of the customer's compare list. */
  compare_list?: Maybe<CompareList>;
  /** Indicates whether the compare list was successfully assigned to the customer. */
  result: Scalars['Boolean'];
};

/** Contains details about the attribute, including the code and type. */
export type Attribute = {
  __typename?: 'Attribute';
  /** The unique identifier for an attribute code. This value should be in lowercase letters without spaces. */
  attribute_code?: Maybe<Scalars['String']>;
  /** Attribute options list. */
  attribute_options?: Maybe<Array<Maybe<AttributeOption>>>;
  /** The data type of the attribute. */
  attribute_type?: Maybe<Scalars['String']>;
  /** The type of entity that defines the attribute. */
  entity_type?: Maybe<Scalars['String']>;
  /** The frontend input type of the attribute. */
  input_type?: Maybe<Scalars['String']>;
  /** Details about the storefront properties configured for the attribute. */
  storefront_properties?: Maybe<StorefrontProperties>;
};

/** Defines the attribute characteristics to search for the `attribute_code` and `entity_type` to search. */
export type AttributeInput = {
  /** The unique identifier for an attribute code. This value should be in lowercase letters without spaces. */
  attribute_code?: InputMaybe<Scalars['String']>;
  /** The type of entity that defines the attribute. */
  entity_type?: InputMaybe<Scalars['String']>;
};

/** Defines an attribute option. */
export type AttributeOption = {
  __typename?: 'AttributeOption';
  /** The label assigned to the attribute option. */
  label?: Maybe<Scalars['String']>;
  /** The attribute option value. */
  value?: Maybe<Scalars['String']>;
};

/** Describes a payment method that the shopper can use to pay for the order. */
export type AvailablePaymentMethod = {
  __typename?: 'AvailablePaymentMethod';
  /** The payment method code. */
  code: Scalars['String'];
  /** The payment method title. */
  title: Scalars['String'];
};

/** Contains details about the possible shipping methods and carriers. */
export type AvailableShippingMethod = {
  __typename?: 'AvailableShippingMethod';
  /** The cost of shipping using this shipping method. */
  amount: Money;
  /** Indicates whether this shipping method can be applied to the cart. */
  available: Scalars['Boolean'];
  /** @deprecated The field should not be used on the storefront. */
  base_amount?: Maybe<Money>;
  /** A string that identifies a commercial carrier or an offline shipping method. */
  carrier_code: Scalars['String'];
  /** The label for the carrier code. */
  carrier_title: Scalars['String'];
  /** Describes an error condition. */
  error_message?: Maybe<Scalars['String']>;
  /** A shipping method code associated with a carrier. The value could be null if no method is available. */
  method_code?: Maybe<Scalars['String']>;
  /** The label for the shipping method code. The value could be null if no method is available. */
  method_title?: Maybe<Scalars['String']>;
  /** The cost of shipping using this shipping method, excluding tax. */
  price_excl_tax: Money;
  /** The cost of shipping using this shipping method, including tax. */
  price_incl_tax: Money;
};

export enum BatchMutationStatus {
  /** @deprecated  */
  Failure = 'FAILURE',
  /** @deprecated  */
  MixedResults = 'MIXED_RESULTS',
  /** @deprecated  */
  Success = 'SUCCESS'
}

/** Defines the billing address. */
export type BillingAddressInput = {
  /** Defines a billing address. */
  address?: InputMaybe<CartAddressInput>;
  /** An ID from the customer's address book that uniquely identifies the address to be used for billing. */
  customer_address_id?: InputMaybe<Scalars['Int']>;
  /** Indicates whether to set the billing address to be the same as the existing shipping address on the cart. */
  same_as_shipping?: InputMaybe<Scalars['Boolean']>;
  /** Indicates whether to set the shipping address to be the same as this billing address. */
  use_for_shipping?: InputMaybe<Scalars['Boolean']>;
};

/** Contains details about the billing address. */
export type BillingCartAddress = CartAddressInterface & {
  __typename?: 'BillingCartAddress';
  /** The city specified for the billing or shipping address. */
  city: Scalars['String'];
  /** The company specified for the billing or shipping address. */
  company?: Maybe<Scalars['String']>;
  /** An object containing the country label and code. */
  country: CartAddressCountry;
  /** @deprecated The field is used only in shipping address. */
  customer_notes?: Maybe<Scalars['String']>;
  /** The first name of the customer or guest. */
  firstname: Scalars['String'];
  /** The last name of the customer or guest. */
  lastname: Scalars['String'];
  /** The ZIP or postal code of the billing or shipping address. */
  postcode?: Maybe<Scalars['String']>;
  /** An object containing the region label and code. */
  region?: Maybe<CartAddressRegion>;
  /** An array containing the street for the billing or shipping address. */
  street: Array<Maybe<Scalars['String']>>;
  /** The telephone number for the billing or shipping address. */
  telephone?: Maybe<Scalars['String']>;
};

export type BraintreeCcVaultInput = {
  device_data?: InputMaybe<Scalars['String']>;
  public_hash: Scalars['String'];
};

export type BraintreeInput = {
  /** Contains a fingerprint provided by Braintree JS SDK and should be sent with sale transaction details to the Braintree payment gateway. Should be specified only in a case if Kount (advanced fraud protection) is enabled for Braintree payment integration. */
  device_data?: InputMaybe<Scalars['String']>;
  /** States whether an entered by a customer credit/debit card should be tokenized for later usage. Required only if Vault is enabled for Braintree payment integration. */
  is_active_payment_token_enabler: Scalars['Boolean'];
  /** The one-time payment token generated by Braintree payment gateway based on card details. Required field to make sale transaction. */
  payment_method_nonce: Scalars['String'];
};

/** Contains details about an individual category that comprises a breadcrumb. */
export type Breadcrumb = {
  __typename?: 'Breadcrumb';
  /**
   * The ID of the category.
   * @deprecated Use `category_uid` instead.
   */
  category_id?: Maybe<Scalars['Int']>;
  /** The category level. */
  category_level?: Maybe<Scalars['Int']>;
  /** The display name of the category. */
  category_name?: Maybe<Scalars['String']>;
  /** The unique ID for a `Breadcrumb` object. */
  category_uid: Scalars['ID'];
  /** The URL key of the category. */
  category_url_key?: Maybe<Scalars['String']>;
  /** The URL path of the category. */
  category_url_path?: Maybe<Scalars['String']>;
};

/** An implementation for bundle product cart items. */
export type BundleCartItem = CartItemInterface & {
  __typename?: 'BundleCartItem';
  /** An array containing the bundle options the shopper selected. */
  bundle_options: Array<Maybe<SelectedBundleOption>>;
  /** An array containing the customizable options the shopper selected. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** An array of errors encountered while loading the cart item */
  errors?: Maybe<Array<Maybe<CartItemError>>>;
  /** The entered gift message for the cart item */
  gift_message?: Maybe<GiftMessage>;
  /** @deprecated Use `uid` instead. */
  id: Scalars['String'];
  /** Contains details about the price of the item, including taxes and discounts. */
  prices?: Maybe<CartItemPrices>;
  /** Details about an item in the cart. */
  product: ProductInterface;
  /** The quantity of this item in the cart. */
  quantity: Scalars['Float'];
  /** The unique ID for a `CartItemInterface` object. */
  uid: Scalars['ID'];
};

/** Defines bundle product options for `CreditMemoItemInterface`. */
export type BundleCreditMemoItem = CreditMemoItemInterface & {
  __typename?: 'BundleCreditMemoItem';
  /** A list of bundle options that are assigned to a bundle product that is part of a credit memo. */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
  /** Details about the final discount amount for the base product, including discounts on options. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for a `CreditMemoItemInterface` object. */
  id: Scalars['ID'];
  /** The order item the credit memo is applied to. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product, including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String'];
  /** The number of refunded items. */
  quantity_refunded?: Maybe<Scalars['Float']>;
};

/** Defines bundle product options for `InvoiceItemInterface`. */
export type BundleInvoiceItem = InvoiceItemInterface & {
  __typename?: 'BundleInvoiceItem';
  /** A list of bundle options that are assigned to an invoiced bundle product. */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
  /** Information about the final discount amount for the base product, including discounts on options. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for an `InvoiceItemInterface` object. */
  id: Scalars['ID'];
  /** Details about an individual order item. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String'];
  /** The number of invoiced items. */
  quantity_invoiced?: Maybe<Scalars['Float']>;
};

/** Defines an individual item within a bundle product. */
export type BundleItem = {
  __typename?: 'BundleItem';
  /**
   * An ID assigned to each type of item in a bundle product.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** An array of additional options for this bundle item. */
  options?: Maybe<Array<Maybe<BundleItemOption>>>;
  /** A number indicating the sequence order of this item compared to the other bundle items. */
  position?: Maybe<Scalars['Int']>;
  /** Indicates whether the item must be included in the bundle. */
  required?: Maybe<Scalars['Boolean']>;
  /** The SKU of the bundle product. */
  sku?: Maybe<Scalars['String']>;
  /** The display name of the item. */
  title?: Maybe<Scalars['String']>;
  /** The input type that the customer uses to select the item. Examples include radio button and checkbox. */
  type?: Maybe<Scalars['String']>;
  /** The unique ID for a `BundleItem` object. */
  uid?: Maybe<Scalars['ID']>;
};

/** Defines the characteristics that comprise a specific bundle item and its options. */
export type BundleItemOption = {
  __typename?: 'BundleItemOption';
  /** Indicates whether the customer can change the number of items for this option. */
  can_change_quantity?: Maybe<Scalars['Boolean']>;
  /**
   * The ID assigned to the bundled item option.
   * @deprecated Use `uid` instead
   */
  id?: Maybe<Scalars['Int']>;
  /** Indicates whether this option is the default option. */
  is_default?: Maybe<Scalars['Boolean']>;
  /** The text that identifies the bundled item option. */
  label?: Maybe<Scalars['String']>;
  /** When a bundle item contains multiple options, the relative position of this option compared to the other options. */
  position?: Maybe<Scalars['Int']>;
  /** The price of the selected option. */
  price?: Maybe<Scalars['Float']>;
  /** One of FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** Contains details about this product option. */
  product?: Maybe<ProductInterface>;
  /**
   * Indicates the quantity of this specific bundle item.
   * @deprecated Use `quantity` instead.
   */
  qty?: Maybe<Scalars['Float']>;
  /** The quantity of this specific bundle item. */
  quantity?: Maybe<Scalars['Float']>;
  /** The unique ID for a `BundleItemOption` object. */
  uid: Scalars['ID'];
};

/** Defines the input for a bundle option. */
export type BundleOptionInput = {
  /** The ID of the option. */
  id: Scalars['Int'];
  /** The number of the selected item to add to the cart. */
  quantity: Scalars['Float'];
  /** An array with the chosen value of the option. */
  value: Array<InputMaybe<Scalars['String']>>;
};

/** Defines bundle product options for `OrderItemInterface`. */
export type BundleOrderItem = OrderItemInterface & {
  __typename?: 'BundleOrderItem';
  /** A list of bundle options that are assigned to the bundle product. */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
  /** The final discount information for the product. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The entered option for the base product, such as a logo or image. */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The unique ID for an `OrderItemInterface` object. */
  id: Scalars['ID'];
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price of the base product, including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String'];
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']>;
  /** URL key of the base product. */
  product_url_key?: Maybe<Scalars['String']>;
  /** The number of canceled items. */
  quantity_canceled?: Maybe<Scalars['Float']>;
  /** The number of invoiced items. */
  quantity_invoiced?: Maybe<Scalars['Float']>;
  /** The number of units ordered for this item. */
  quantity_ordered?: Maybe<Scalars['Float']>;
  /** The number of refunded items. */
  quantity_refunded?: Maybe<Scalars['Float']>;
  /** The number of returned items. */
  quantity_returned?: Maybe<Scalars['Float']>;
  /** The number of shipped items. */
  quantity_shipped?: Maybe<Scalars['Float']>;
  /** The selected options for the base product, such as color or size. */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The status of the order item. */
  status?: Maybe<Scalars['String']>;
};

/** Defines basic features of a bundle product and contains multiple BundleItems. */
export type BundleProduct = CustomizableProductInterface & PhysicalProductInterface & ProductInterface & RoutableInterface & {
  __typename?: 'BundleProduct';
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  /** The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled. */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  color?: Maybe<Scalars['Int']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  /** Indicates whether the bundle product has a dynamic price. */
  dynamic_price?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the bundle product has a dynamic SKU. */
  dynamic_sku?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the bundle product has a dynamically calculated weight. */
  dynamic_weight?: Maybe<Scalars['Boolean']>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  /** An array containing information about individual bundle items. */
  items?: Maybe<Array<Maybe<BundleItem>>>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  /** An array of media gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use `media_gallery` instead.
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  /**
   * Indicates the price of an item.
   * @deprecated Use `price_range` for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** The range of prices for the product */
  price_range: PriceRange;
  /** An array of `TierPrice` objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  /** One of PRICE_RANGE or AS_LOW_AS. */
  price_view?: Maybe<PriceViewEnum>;
  /** An array of `ProductLinks` objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int'];
  /** An array of products to be displayed in a Related Products block. */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  /** Indicates whether to ship bundle items together or individually. */
  ship_bundle_items?: Maybe<ShipBundleItemsEnum>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date for a product with a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  /** The file name of a swatch image. */
  swatch_image?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use `__typename` instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']>;
};


/** Defines basic features of a bundle product and contains multiple BundleItems. */
export type BundleProductReviewsArgs = {
  currentPage?: InputMaybe<Scalars['Int']>;
  pageSize?: InputMaybe<Scalars['Int']>;
};

/** Defines a single bundle product. */
export type BundleProductCartItemInput = {
  /** A mandatory array of options for the bundle product, including each chosen option and specified quantity. */
  bundle_options: Array<InputMaybe<BundleOptionInput>>;
  /** The ID and value of the option. */
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  /** The quantity and SKU of the bundle product. */
  data: CartItemInput;
};

/** Defines bundle product options for `ShipmentItemInterface`. */
export type BundleShipmentItem = ShipmentItemInterface & {
  __typename?: 'BundleShipmentItem';
  /** A list of bundle options that are assigned to a shipped product. */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
  /** The unique ID for a `ShipmentItemInterface` object. */
  id: Scalars['ID'];
  /** The order item associated with the shipment item. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String'];
  /** The number of shipped items. */
  quantity_shipped: Scalars['Float'];
};

/** Defines bundle product options for `WishlistItemInterface`. */
export type BundleWishlistItem = WishlistItemInterface & {
  __typename?: 'BundleWishlistItem';
  /** The date and time the item was added to the wish list. */
  added_at: Scalars['String'];
  /** An array containing information about the selected bundle items. */
  bundle_options?: Maybe<Array<Maybe<SelectedBundleOption>>>;
  /** Custom options selected for the wish list item. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item. */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object. */
  id: Scalars['ID'];
  /** Product details of the wish list item. */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item. */
  quantity: Scalars['Float'];
};

/** Contains the contents and other details about a guest or customer cart. */
export type Cart = {
  __typename?: 'Cart';
  /** @deprecated Use `applied_coupons` instead. */
  applied_coupon?: Maybe<AppliedCoupon>;
  /** An array of `AppliedCoupon` objects. Each object contains the `code` text attribute, which specifies the coupon code. */
  applied_coupons?: Maybe<Array<Maybe<AppliedCoupon>>>;
  /** An array of available payment methods. */
  available_payment_methods?: Maybe<Array<Maybe<AvailablePaymentMethod>>>;
  /** The billing address assigned to the cart. */
  billing_address?: Maybe<BillingCartAddress>;
  /** The email address of the guest or customer. */
  email?: Maybe<Scalars['String']>;
  /** The entered gift message for the cart */
  gift_message?: Maybe<GiftMessage>;
  /** The unique ID for a `Cart` object. */
  id: Scalars['ID'];
  /** Indicates whether the cart contains only virtual products. */
  is_virtual: Scalars['Boolean'];
  /** An array of products that have been added to the cart. */
  items?: Maybe<Array<Maybe<CartItemInterface>>>;
  /** Pricing details for the quote. */
  prices?: Maybe<CartPrices>;
  /** Indicates which payment method was applied to the cart. */
  selected_payment_method?: Maybe<SelectedPaymentMethod>;
  /** An array of shipping addresses assigned to the cart. */
  shipping_addresses: Array<Maybe<ShippingCartAddress>>;
  /** The total number of items in the cart. */
  total_quantity: Scalars['Float'];
};

/** Contains details the country in a billing or shipping address. */
export type CartAddressCountry = {
  __typename?: 'CartAddressCountry';
  /** The country code. */
  code: Scalars['String'];
  /** The display label for the country. */
  label: Scalars['String'];
};

/** Defines the billing or shipping address to be applied to the cart. */
export type CartAddressInput = {
  /** The city specified for the billing or shipping address. */
  city: Scalars['String'];
  /** The company specified for the billing or shipping address. */
  company?: InputMaybe<Scalars['String']>;
  /** The country code and label for the billing or shipping address. */
  country_code: Scalars['String'];
  /** The first name of the customer or guest. */
  firstname: Scalars['String'];
  /** The last name of the customer or guest. */
  lastname: Scalars['String'];
  /** The ZIP or postal code of the billing or shipping address. */
  postcode?: InputMaybe<Scalars['String']>;
  /** A string that defines the state or province of the billing or shipping address. */
  region?: InputMaybe<Scalars['String']>;
  /** An integer that defines the state or province of the billing or shipping address. */
  region_id?: InputMaybe<Scalars['Int']>;
  /** Determines whether to save the address in the customer's address book. The default value is true. */
  save_in_address_book?: InputMaybe<Scalars['Boolean']>;
  /** An array containing the street for the billing or shipping address. */
  street: Array<InputMaybe<Scalars['String']>>;
  /** The telephone number for the billing or shipping address. */
  telephone?: InputMaybe<Scalars['String']>;
};

export type CartAddressInterface = {
  /** The city specified for the billing or shipping address. */
  city: Scalars['String'];
  /** The company specified for the billing or shipping address. */
  company?: Maybe<Scalars['String']>;
  /** An object containing the country label and code. */
  country: CartAddressCountry;
  /** The first name of the customer or guest. */
  firstname: Scalars['String'];
  /** The last name of the customer or guest. */
  lastname: Scalars['String'];
  /** The ZIP or postal code of the billing or shipping address. */
  postcode?: Maybe<Scalars['String']>;
  /** An object containing the region label and code. */
  region?: Maybe<CartAddressRegion>;
  /** An array containing the street for the billing or shipping address. */
  street: Array<Maybe<Scalars['String']>>;
  /** The telephone number for the billing or shipping address. */
  telephone?: Maybe<Scalars['String']>;
};

/** Contains details about the region in a billing or shipping address. */
export type CartAddressRegion = {
  __typename?: 'CartAddressRegion';
  /** The state or province code. */
  code?: Maybe<Scalars['String']>;
  /** The display label for the region. */
  label?: Maybe<Scalars['String']>;
  /** The unique ID for a pre-defined region. */
  region_id?: Maybe<Scalars['Int']>;
};

/** Contains information about discounts applied to the cart. */
export type CartDiscount = {
  __typename?: 'CartDiscount';
  /** The amount of the discount applied to the item. */
  amount: Money;
  /** The description of the discount. */
  label: Array<Maybe<Scalars['String']>>;
};

export type CartItemError = {
  __typename?: 'CartItemError';
  /** An error code that describes the error encountered */
  code: CartItemErrorType;
  /** A localized error message */
  message: Scalars['String'];
};

export enum CartItemErrorType {
  /** @deprecated  */
  ItemIncrements = 'ITEM_INCREMENTS',
  /** @deprecated  */
  ItemQty = 'ITEM_QTY',
  /** @deprecated  */
  Undefined = 'UNDEFINED'
}

/** Defines an item to be added to the cart. */
export type CartItemInput = {
  /** An array of entered options for the base product, such as personalization text. */
  entered_options?: InputMaybe<Array<InputMaybe<EnteredOptionInput>>>;
  /** For a child product, the SKU of its parent product. */
  parent_sku?: InputMaybe<Scalars['String']>;
  /** The amount or number of an item to add. */
  quantity: Scalars['Float'];
  /** The selected options for the base product, such as color or size, using the unique ID for an object such as `CustomizableRadioOption`, `CustomizableDropDownOption`, or `ConfigurableProductOptionsValues`. */
  selected_options?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** The SKU of the product. */
  sku: Scalars['String'];
};

/** An interface for products in a cart. */
export type CartItemInterface = {
  /** An array of errors encountered while loading the cart item */
  errors?: Maybe<Array<Maybe<CartItemError>>>;
  /** @deprecated Use `uid` instead. */
  id: Scalars['String'];
  /** Contains details about the price of the item, including taxes and discounts. */
  prices?: Maybe<CartItemPrices>;
  /** Details about an item in the cart. */
  product: ProductInterface;
  /** The quantity of this item in the cart. */
  quantity: Scalars['Float'];
  /** The unique ID for a `CartItemInterface` object. */
  uid: Scalars['ID'];
};

/** Contains details about the price of the item, including taxes and discounts. */
export type CartItemPrices = {
  __typename?: 'CartItemPrices';
  /** An array of discounts to be applied to the cart item. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** An array of FPTs applied to the cart item. */
  fixed_product_taxes?: Maybe<Array<Maybe<FixedProductTax>>>;
  /** The price of the item before any discounts were applied. The price that might include tax, depending on the configured display settings for cart. */
  price: Money;
  /** The value of the price multiplied by the quantity of the item. */
  row_total: Money;
  /** The value of `row_total` plus the tax applied to the item. */
  row_total_including_tax: Money;
  /** The total of all discounts applied to the item. */
  total_item_discount?: Maybe<Money>;
};

/** Deprecated: The `ShippingCartAddress.cart_items` field now returns `CartItemInterface`. */
export type CartItemQuantity = {
  __typename?: 'CartItemQuantity';
  /** @deprecated The `ShippingCartAddress.cart_items` field now returns `CartItemInterface`. */
  cart_item_id: Scalars['Int'];
  /** @deprecated The `ShippingCartAddress.cart_items` field now returns `CartItemInterface`. */
  quantity: Scalars['Float'];
};

/** Contains details about the price of a selected customizable value. */
export type CartItemSelectedOptionValuePrice = {
  __typename?: 'CartItemSelectedOptionValuePrice';
  /** Indicates whether the price type is fixed, percent, or dynamic. */
  type: PriceTypeEnum;
  /** A string that describes the unit of the value. */
  units: Scalars['String'];
  /** A price value. */
  value: Scalars['Float'];
};

/** A single item to be updated. */
export type CartItemUpdateInput = {
  /** Deprecated. Use `cart_item_uid` instead. */
  cart_item_id?: InputMaybe<Scalars['Int']>;
  /** The unique ID for a `CartItemInterface` object. */
  cart_item_uid?: InputMaybe<Scalars['ID']>;
  /** An array that defines customizable options for the product. */
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  /** Gift message details for the cart item */
  gift_message?: InputMaybe<GiftMessageInput>;
  /** The new quantity of the item. */
  quantity?: InputMaybe<Scalars['Float']>;
};

/** Contains details about the final price of items in the cart, including discount and tax information. */
export type CartPrices = {
  __typename?: 'CartPrices';
  /** An array containing the names and amounts of taxes applied to each item in the cart. */
  applied_taxes?: Maybe<Array<Maybe<CartTaxItem>>>;
  /** @deprecated Use discounts instead. */
  discount?: Maybe<CartDiscount>;
  /** An array containing all discounts applied to the cart. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The total, including discounts, taxes, shipping, and other fees. */
  grand_total?: Maybe<Money>;
  /** The subtotal without any applied taxes. */
  subtotal_excluding_tax?: Maybe<Money>;
  /** The subtotal including any applied taxes. */
  subtotal_including_tax?: Maybe<Money>;
  /** The subtotal with any discounts applied, but not taxes. */
  subtotal_with_discount_excluding_tax?: Maybe<Money>;
};

/** Contains tax information about an item in the cart. */
export type CartTaxItem = {
  __typename?: 'CartTaxItem';
  /** The amount of tax applied to the item. */
  amount: Money;
  /** The description of the tax. */
  label: Scalars['String'];
};

/** An error encountered while adding an item to the the cart. */
export type CartUserInputError = {
  __typename?: 'CartUserInputError';
  /** A cart-specific error code. */
  code: CartUserInputErrorType;
  /** A localized error message. */
  message: Scalars['String'];
};

export enum CartUserInputErrorType {
  /** @deprecated  */
  InsufficientStock = 'INSUFFICIENT_STOCK',
  /** @deprecated  */
  NotSalable = 'NOT_SALABLE',
  /** @deprecated  */
  ProductNotFound = 'PRODUCT_NOT_FOUND',
  /** @deprecated  */
  Undefined = 'UNDEFINED'
}

/** Defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for. */
export type CategoryFilterInput = {
  /** Filter by the unique category ID for a `CategoryInterface` object. */
  category_uid?: InputMaybe<FilterEqualTypeInput>;
  /** Deprecated: use 'category_uid' to filter uniquely identifiers of categories. */
  ids?: InputMaybe<FilterEqualTypeInput>;
  /** Filter by the display name of the category. */
  name?: InputMaybe<FilterMatchTypeInput>;
  /** Filter by the unique parent category ID for a `CategoryInterface` object. */
  parent_category_uid?: InputMaybe<FilterEqualTypeInput>;
  /** Filter by the unique parent category ID for a `CategoryInterface` object. */
  parent_id?: InputMaybe<FilterEqualTypeInput>;
  /** Filter by the part of the URL that identifies the category. */
  url_key?: InputMaybe<FilterEqualTypeInput>;
  /** Filter by the URL path for the category. */
  url_path?: InputMaybe<FilterEqualTypeInput>;
};

/** Contains the full set of attributes that can be returned in a category search. */
export type CategoryInterface = {
  available_sort_by?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** An array of breadcrumb items. */
  breadcrumbs?: Maybe<Array<Maybe<Breadcrumb>>>;
  /** The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Categories' is enabled. */
  canonical_url?: Maybe<Scalars['String']>;
  children_count?: Maybe<Scalars['String']>;
  /** Contains a category CMS block. */
  cms_block?: Maybe<CmsBlock>;
  /**
   * The timestamp indicating when the category was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  custom_layout_update_file?: Maybe<Scalars['String']>;
  /** The attribute to use for sorting. */
  default_sort_by?: Maybe<Scalars['String']>;
  /** An optional description of the category. */
  description?: Maybe<Scalars['String']>;
  display_mode?: Maybe<Scalars['String']>;
  filter_price_range?: Maybe<Scalars['Float']>;
  /**
   * An ID that uniquely identifies the category.
   * @deprecated Use `uid` instead.
   */
  id?: Maybe<Scalars['Int']>;
  image?: Maybe<Scalars['String']>;
  include_in_menu?: Maybe<Scalars['Int']>;
  is_anchor?: Maybe<Scalars['Int']>;
  landing_page?: Maybe<Scalars['Int']>;
  /** The depth of the category within the tree. */
  level?: Maybe<Scalars['Int']>;
  meta_description?: Maybe<Scalars['String']>;
  meta_keywords?: Maybe<Scalars['String']>;
  meta_title?: Maybe<Scalars['String']>;
  /** The display name of the category. */
  name?: Maybe<Scalars['String']>;
  /** The full category path. */
  path?: Maybe<Scalars['String']>;
  /** The category path within the store. */
  path_in_store?: Maybe<Scalars['String']>;
  /** The position of the category relative to other categories at the same level in tree. */
  position?: Maybe<Scalars['Int']>;
  /** The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  product_count?: Maybe<Scalars['Int']>;
  /** The list of products assigned to the category. */
  products?: Maybe<CategoryProducts>;
  /** The unique ID for a `CategoryInterface` object. */
  uid: Scalars['ID'];
  /**
   * The timestamp indicating when the category was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** The URL key assigned to the category. */
  url_key?: Maybe<Scalars['String']>;
  /** The URL path assigned to the category. */
  url_path?: Maybe<Scalars['String']>;
  /** The part of the category URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
};


/** Contains the full set of attributes that can be returned in a category search. */
export type CategoryInterfaceProductsArgs = {
  currentPage?: InputMaybe<Scalars['Int']>;
  pageSize?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<ProductAttributeSortInput>;
};

/** Contains details about the products assigned to a category. */
export type CategoryProducts = {
  __typename?: 'CategoryProducts';
  /** An array of products that are assigned to the category. */
  items?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Pagination metadata. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  total_count?: Maybe<Scalars['Int']>;
};

/** Contains a collection of `CategoryTree` objects and pagination information. */
export type CategoryResult = {
  __typename?: 'CategoryResult';
  /** A list of categories that match the filter criteria. */
  items?: Maybe<Array<Maybe<CategoryTree>>>;
  /** An object that includes the `page_info` and `currentPage` values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** The total number of categories that match the criteria. */
  total_count?: Maybe<Scalars['Int']>;
};

/** Contains the hierarchy of categories. */
export type CategoryTree = CategoryInterface & RoutableInterface & {
  __typename?: 'CategoryTree';
  available_sort_by?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** An array of breadcrumb items. */
  breadcrumbs?: Maybe<Array<Maybe<Breadcrumb>>>;
  /** The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Categories' is enabled. */
  canonical_url?: Maybe<Scalars['String']>;
  /** A tree of child categories. */
  children?: Maybe<Array<Maybe<CategoryTree>>>;
  children_count?: Maybe<Scalars['String']>;
  /** Contains a category CMS block. */
  cms_block?: Maybe<CmsBlock>;
  /**
   * The timestamp indicating when the category was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  custom_layout_update_file?: Maybe<Scalars['String']>;
  /** The attribute to use for sorting. */
  default_sort_by?: Maybe<Scalars['String']>;
  /** An optional description of the category. */
  description?: Maybe<Scalars['String']>;
  display_mode?: Maybe<Scalars['String']>;
  filter_price_range?: Maybe<Scalars['Float']>;
  /**
   * An ID that uniquely identifies the category.
   * @deprecated Use `uid` instead.
   */
  id?: Maybe<Scalars['Int']>;
  image?: Maybe<Scalars['String']>;
  include_in_menu?: Maybe<Scalars['Int']>;
  is_anchor?: Maybe<Scalars['Int']>;
  landing_page?: Maybe<Scalars['Int']>;
  /** The depth of the category within the tree. */
  level?: Maybe<Scalars['Int']>;
  meta_description?: Maybe<Scalars['String']>;
  meta_keywords?: Maybe<Scalars['String']>;
  meta_title?: Maybe<Scalars['String']>;
  /** The display name of the category. */
  name?: Maybe<Scalars['String']>;
  /** The full category path. */
  path?: Maybe<Scalars['String']>;
  /** The category path within the store. */
  path_in_store?: Maybe<Scalars['String']>;
  /** The position of the category relative to other categories at the same level in tree. */
  position?: Maybe<Scalars['Int']>;
  /** The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  product_count?: Maybe<Scalars['Int']>;
  /** The list of products assigned to the category. */
  products?: Maybe<CategoryProducts>;
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int'];
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /** The unique ID for a `CategoryInterface` object. */
  uid: Scalars['ID'];
  /**
   * The timestamp indicating when the category was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** The URL key assigned to the category. */
  url_key?: Maybe<Scalars['String']>;
  /** The URL path assigned to the category. */
  url_path?: Maybe<Scalars['String']>;
  /** The part of the category URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
};


/** Contains the hierarchy of categories. */
export type CategoryTreeProductsArgs = {
  currentPage?: InputMaybe<Scalars['Int']>;
  pageSize?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<ProductAttributeSortInput>;
};

/** Defines details about an individual checkout agreement. */
export type CheckoutAgreement = {
  __typename?: 'CheckoutAgreement';
  /** The ID for a checkout agreement. */
  agreement_id: Scalars['Int'];
  /** The checkbox text for the checkout agreement. */
  checkbox_text: Scalars['String'];
  /** Required. The text of the agreement. */
  content: Scalars['String'];
  /** The height of the text box where the Terms and Conditions statement appears during checkout. */
  content_height?: Maybe<Scalars['String']>;
  /** Indicates whether the `content` text is in HTML format. */
  is_html: Scalars['Boolean'];
  /** Indicates whether agreements are accepted automatically or manually. */
  mode: CheckoutAgreementMode;
  /** The name given to the condition. */
  name: Scalars['String'];
};

/** Indicates how agreements are accepted. */
export enum CheckoutAgreementMode {
  /**
   * Conditions are automatically accepted upon checkout.
   * @deprecated
   */
  Auto = 'AUTO',
  /**
   * Shoppers must manually accept the conditions to place an order.
   * @deprecated
   */
  Manual = 'MANUAL'
}

/** An error encountered while adding an item to the cart. */
export type CheckoutUserInputError = {
  __typename?: 'CheckoutUserInputError';
  /** An error code that is specific to Checkout. */
  code: CheckoutUserInputErrorCodes;
  /** A localized error message. */
  message: Scalars['String'];
  /** The path to the input field that caused an error. See the GraphQL specification about path errors for details: http://spec.graphql.org/draft/#sec-Errors */
  path: Array<Maybe<Scalars['String']>>;
};

export enum CheckoutUserInputErrorCodes {
  /** @deprecated  */
  InsufficientStock = 'INSUFFICIENT_STOCK',
  /** @deprecated  */
  NotSalable = 'NOT_SALABLE',
  /** @deprecated  */
  ProductNotFound = 'PRODUCT_NOT_FOUND',
  /** @deprecated  */
  ReorderNotAvailable = 'REORDER_NOT_AVAILABLE',
  /** @deprecated  */
  Undefined = 'UNDEFINED'
}

/** Contains details about a specific CMS block. */
export type CmsBlock = {
  __typename?: 'CmsBlock';
  /** The content of the CMS block in raw HTML. */
  content?: Maybe<Scalars['String']>;
  /** The CMS block identifier. */
  identifier?: Maybe<Scalars['String']>;
  /** The title assigned to the CMS block. */
  title?: Maybe<Scalars['String']>;
};

/** Contains an array CMS block items. */
export type CmsBlocks = {
  __typename?: 'CmsBlocks';
  /** An array of CMS blocks. */
  items?: Maybe<Array<Maybe<CmsBlock>>>;
};

/** Contains details about a CMS page. */
export type CmsPage = RoutableInterface & {
  __typename?: 'CmsPage';
  /** The content of the CMS page in raw HTML. */
  content?: Maybe<Scalars['String']>;
  /** The heading that displays at the top of the CMS page. */
  content_heading?: Maybe<Scalars['String']>;
  /** The ID of a CMS page. */
  identifier?: Maybe<Scalars['String']>;
  /** A brief description of the page for search results listings. */
  meta_description?: Maybe<Scalars['String']>;
  /** A brief description of the page for search results listings. */
  meta_keywords?: Maybe<Scalars['String']>;
  /** A page title that is indexed by search engines and appears in search results listings. */
  meta_title?: Maybe<Scalars['String']>;
  /** The design layout of the page, indicating the number of columns and navigation features used on the page. */
  page_layout?: Maybe<Scalars['String']>;
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int'];
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']>;
  /** The name that appears in the breadcrumb trail navigation and in the browser title bar and tab. */
  title?: Maybe<Scalars['String']>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /** The URL key of the CMS page, which is often based on the `content_heading`. */
  url_key?: Maybe<Scalars['String']>;
};

export type ColorSwatchData = SwatchDataInterface & {
  __typename?: 'ColorSwatchData';
  /** The value can be represented as color (HEX code), image link, or text. */
  value?: Maybe<Scalars['String']>;
};

/** Contains an attribute code that is used for product comparisons. */
export type ComparableAttribute = {
  __typename?: 'ComparableAttribute';
  /** An attribute code that is enabled for product comparisons. */
  code: Scalars['String'];
  /** The label of the attribute code. */
  label: Scalars['String'];
};

/** Defines an object used to iterate through items for product comparisons. */
export type ComparableItem = {
  __typename?: 'ComparableItem';
  /** An array of product attributes that can be used to compare products. */
  attributes: Array<Maybe<ProductAttribute>>;
  /** Details about a product in a compare list. */
  product: ProductInterface;
  /** The unique ID of an item in a compare list. */
  uid: Scalars['ID'];
};

/** Contains iterable information such as the array of items, the count, and attributes that represent the compare list. */
export type CompareList = {
  __typename?: 'CompareList';
  /** An array of attributes that can be used for comparing products. */
  attributes?: Maybe<Array<Maybe<ComparableAttribute>>>;
  /** The number of items in the compare list. */
  item_count: Scalars['Int'];
  /** An array of products to compare. */
  items?: Maybe<Array<Maybe<ComparableItem>>>;
  /** The unique ID assigned to the compare list. */
  uid: Scalars['ID'];
};

export type ComplexTextValue = {
  __typename?: 'ComplexTextValue';
  /** Text that can contain HTML tags. */
  html: Scalars['String'];
};

/** Contains details about a configurable product attribute option. */
export type ConfigurableAttributeOption = {
  __typename?: 'ConfigurableAttributeOption';
  /** The ID assigned to the attribute. */
  code?: Maybe<Scalars['String']>;
  /** A string that describes the configurable attribute option. */
  label?: Maybe<Scalars['String']>;
  /** The unique ID for a `ConfigurableAttributeOption` object. */
  uid: Scalars['ID'];
  /** A unique index number assigned to the configurable product option. */
  value_index?: Maybe<Scalars['Int']>;
};

/** An implementation for configurable product cart items. */
export type ConfigurableCartItem = CartItemInterface & {
  __typename?: 'ConfigurableCartItem';
  /** An array containing the configuranle options the shopper selected. */
  configurable_options: Array<Maybe<SelectedConfigurableOption>>;
  /** Product details of the cart item. */
  configured_variant: ProductInterface;
  /** An array containing the customizable options the shopper selected. */
  customizable_options?: Maybe<Array<Maybe<SelectedCustomizableOption>>>;
  /** An array of errors encountered while loading the cart item */
  errors?: Maybe<Array<Maybe<CartItemError>>>;
  /** The entered gift message for the cart item */
  gift_message?: Maybe<GiftMessage>;
  /** @deprecated Use `uid` instead. */
  id: Scalars['String'];
  /** Contains details about the price of the item, including taxes and discounts. */
  prices?: Maybe<CartItemPrices>;
  /** Details about an item in the cart. */
  product: ProductInterface;
  /** The quantity of this item in the cart. */
  quantity: Scalars['Float'];
  /** The unique ID for a `CartItemInterface` object. */
  uid: Scalars['ID'];
};

/** Describes configurable options that have been selected and can be selected as a result of the previous selections. */
export type ConfigurableOptionAvailableForSelection = {
  __typename?: 'ConfigurableOptionAvailableForSelection';
  /** An attribute code that uniquely identifies a configurable option. */
  attribute_code: Scalars['String'];
  /** An array of selectable option value IDs. */
  option_value_uids: Array<Maybe<Scalars['ID']>>;
};

/** Defines basic features of a configurable product and its simple product variants. */
export type ConfigurableProduct = CustomizableProductInterface & PhysicalProductInterface & ProductInterface & RoutableInterface & {
  __typename?: 'ConfigurableProduct';
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  /** The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled. */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  color?: Maybe<Scalars['Int']>;
  /** An array of options for the configurable product. */
  configurable_options?: Maybe<Array<Maybe<ConfigurableProductOptions>>>;
  /** An array of media gallery items and other details about selected configurable product options as well as details about remaining selectable options. */
  configurable_product_options_selection?: Maybe<ConfigurableProductOptionsSelection>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  /** An array of media gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use `media_gallery` instead.
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  /**
   * Indicates the price of an item.
   * @deprecated Use `price_range` for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** The range of prices for the product */
  price_range: PriceRange;
  /** An array of `TierPrice` objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  /** An array of `ProductLinks` objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int'];
  /** An array of products to be displayed in a Related Products block. */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date for a product with a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  /** The file name of a swatch image. */
  swatch_image?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use `__typename` instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /** An array of simple product variants. */
  variants?: Maybe<Array<Maybe<ConfigurableVariant>>>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']>;
};


/** Defines basic features of a configurable product and its simple product variants. */
export type ConfigurableProductConfigurable_Product_Options_SelectionArgs = {
  configurableOptionValueUids?: InputMaybe<Array<Scalars['ID']>>;
};


/** Defines basic features of a configurable product and its simple product variants. */
export type ConfigurableProductReviewsArgs = {
  currentPage?: InputMaybe<Scalars['Int']>;
  pageSize?: InputMaybe<Scalars['Int']>;
};

export type ConfigurableProductCartItemInput = {
  /** The ID and value of the option. */
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  /** The quantity and SKU of the configurable product. */
  data: CartItemInput;
  /** The SKU of the parent configurable product. */
  parent_sku?: InputMaybe<Scalars['String']>;
  /** Deprecated. Use `CartItemInput.sku` instead. */
  variant_sku?: InputMaybe<Scalars['String']>;
};

/** Contains details about configurable product options. */
export type ConfigurableProductOption = {
  __typename?: 'ConfigurableProductOption';
  /** An attribute code that uniquely identifies a configurable option. */
  attribute_code: Scalars['String'];
  /** The display name of the option. */
  label: Scalars['String'];
  /** The unique ID of the configurable option. */
  uid: Scalars['ID'];
  /** An array of values that are applicable for this option. */
  values?: Maybe<Array<Maybe<ConfigurableProductOptionValue>>>;
};

/** Defines a value for a configurable product option. */
export type ConfigurableProductOptionValue = {
  __typename?: 'ConfigurableProductOptionValue';
  /** Indicates whether the product is available with this selected option. */
  is_available: Scalars['Boolean'];
  /** Indicates whether the value is the default. */
  is_use_default: Scalars['Boolean'];
  /** The display name of the value. */
  label: Scalars['String'];
  /** The URL assigned to the thumbnail of the swatch image. */
  swatch?: Maybe<SwatchDataInterface>;
  /** The unique ID of the value. */
  uid: Scalars['ID'];
};

/** Defines configurable attributes for the specified product. */
export type ConfigurableProductOptions = {
  __typename?: 'ConfigurableProductOptions';
  /** A string that identifies the attribute. */
  attribute_code?: Maybe<Scalars['String']>;
  /**
   * The ID assigned to the attribute.
   * @deprecated Use `attribute_uid` instead.
   */
  attribute_id?: Maybe<Scalars['String']>;
  /**
   * The ID assigned to the attribute.
   * @deprecated Use `attribute_uid` instead.
   */
  attribute_id_v2?: Maybe<Scalars['Int']>;
  /** The unique ID for an `Attribute` object. */
  attribute_uid: Scalars['ID'];
  /**
   * The configurable option ID number assigned by the system.
   * @deprecated Use `uid` instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** A displayed string that describes the configurable product option. */
  label?: Maybe<Scalars['String']>;
  /** A number that indicates the order in which the attribute is displayed. */
  position?: Maybe<Scalars['Int']>;
  /**
   * This is the same as a product's `id` field.
   * @deprecated `product_id` is not needed and can be obtained from its parent.
   */
  product_id?: Maybe<Scalars['Int']>;
  /** The unique ID for a `ConfigurableProductOptions` object. */
  uid: Scalars['ID'];
  /** Indicates whether the option is the default. */
  use_default?: Maybe<Scalars['Boolean']>;
  /** An array that defines the `value_index` codes assigned to the configurable product. */
  values?: Maybe<Array<Maybe<ConfigurableProductOptionsValues>>>;
};

/** Contains metadata corresponding to the selected configurable options. */
export type ConfigurableProductOptionsSelection = {
  __typename?: 'ConfigurableProductOptionsSelection';
  /** An array of all possible configurable options. */
  configurable_options?: Maybe<Array<Maybe<ConfigurableProductOption>>>;
  /** Product images and videos corresponding to the specified configurable options selection. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /** The configurable options available for further selection based on the current selection. */
  options_available_for_selection?: Maybe<Array<Maybe<ConfigurableOptionAvailableForSelection>>>;
  /** A variant represented by the specified configurable options selection. The value is expected to be null until selections are made for each configurable option. */
  variant?: Maybe<SimpleProduct>;
};

/** Contains the index number assigned to a configurable product option. */
export type ConfigurableProductOptionsValues = {
  __typename?: 'ConfigurableProductOptionsValues';
  /** The label of the product on the default store. */
  default_label?: Maybe<Scalars['String']>;
  /** The label of the product. */
  label?: Maybe<Scalars['String']>;
  /** The label of the product on the current store. */
  store_label?: Maybe<Scalars['String']>;
  /** Swatch data for a configurable product option. */
  swatch_data?: Maybe<SwatchDataInterface>;
  /** The unique ID for a `ConfigurableProductOptionsValues` object. */
  uid?: Maybe<Scalars['ID']>;
  /** Indicates whether to use the default_label. */
  use_default_value?: Maybe<Scalars['Boolean']>;
  /**
   * A unique index number assigned to the configurable product option.
   * @deprecated Use `uid` instead.
   */
  value_index?: Maybe<Scalars['Int']>;
};

/** Contains all the simple product variants of a configurable product. */
export type ConfigurableVariant = {
  __typename?: 'ConfigurableVariant';
  /** An array of configurable attribute options. */
  attributes?: Maybe<Array<Maybe<ConfigurableAttributeOption>>>;
  /** An array of linked simple products. */
  product?: Maybe<SimpleProduct>;
};

/** A configurable product wish list item. */
export type ConfigurableWishlistItem = WishlistItemInterface & {
  __typename?: 'ConfigurableWishlistItem';
  /** The date and time the item was added to the wish list. */
  added_at: Scalars['String'];
  /** The SKU of the simple product corresponding to a set of selected configurable options. */
  child_sku: Scalars['String'];
  /** An array of selected configurable options. */
  configurable_options?: Maybe<Array<Maybe<SelectedConfigurableOption>>>;
  /** Custom options selected for the wish list item. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item. */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object. */
  id: Scalars['ID'];
  /** Product details of the wish list item. */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item. */
  quantity: Scalars['Float'];
};

export type ContactUsInput = {
  /** The shopper's comment to the merchant. */
  comment: Scalars['String'];
  /** The email address of the shopper. */
  email: Scalars['String'];
  /** The full name of the shopper. */
  name: Scalars['String'];
  /** The shopper's telephone number. */
  telephone?: InputMaybe<Scalars['String']>;
};

/** Contains the status of the request. */
export type ContactUsOutput = {
  __typename?: 'ContactUsOutput';
  /** Indicates whether the request was successful. */
  status: Scalars['Boolean'];
};

export type Country = {
  __typename?: 'Country';
  /** An array of regions within a particular country. */
  available_regions?: Maybe<Array<Maybe<Region>>>;
  /** The name of the country in English. */
  full_name_english?: Maybe<Scalars['String']>;
  /** The name of the country in the current locale. */
  full_name_locale?: Maybe<Scalars['String']>;
  /** The unique ID for a `Country` object. */
  id?: Maybe<Scalars['String']>;
  /** The three-letter abbreviation of the country, such as USA. */
  three_letter_abbreviation?: Maybe<Scalars['String']>;
  /** The two-letter abbreviation of the country, such as US. */
  two_letter_abbreviation?: Maybe<Scalars['String']>;
};

/** The list of country codes. */
export enum CountryCodeEnum {
  /**
   * Andorra
   * @deprecated
   */
  Ad = 'AD',
  /**
   * United Arab Emirates
   * @deprecated
   */
  Ae = 'AE',
  /**
   * Afghanistan
   * @deprecated
   */
  Af = 'AF',
  /**
   * Antigua & Barbuda
   * @deprecated
   */
  Ag = 'AG',
  /**
   * Anguilla
   * @deprecated
   */
  Ai = 'AI',
  /**
   * Albania
   * @deprecated
   */
  Al = 'AL',
  /**
   * Armenia
   * @deprecated
   */
  Am = 'AM',
  /**
   * Netherlands Antilles
   * @deprecated
   */
  An = 'AN',
  /**
   * Angola
   * @deprecated
   */
  Ao = 'AO',
  /**
   * Antarctica
   * @deprecated
   */
  Aq = 'AQ',
  /**
   * Argentina
   * @deprecated
   */
  Ar = 'AR',
  /**
   * American Samoa
   * @deprecated
   */
  As = 'AS',
  /**
   * Austria
   * @deprecated
   */
  At = 'AT',
  /**
   * Australia
   * @deprecated
   */
  Au = 'AU',
  /**
   * Aruba
   * @deprecated
   */
  Aw = 'AW',
  /**
   * Åland Islands
   * @deprecated
   */
  Ax = 'AX',
  /**
   * Azerbaijan
   * @deprecated
   */
  Az = 'AZ',
  /**
   * Bosnia & Herzegovina
   * @deprecated
   */
  Ba = 'BA',
  /**
   * Barbados
   * @deprecated
   */
  Bb = 'BB',
  /**
   * Bangladesh
   * @deprecated
   */
  Bd = 'BD',
  /**
   * Belgium
   * @deprecated
   */
  Be = 'BE',
  /**
   * Burkina Faso
   * @deprecated
   */
  Bf = 'BF',
  /**
   * Bulgaria
   * @deprecated
   */
  Bg = 'BG',
  /**
   * Bahrain
   * @deprecated
   */
  Bh = 'BH',
  /**
   * Burundi
   * @deprecated
   */
  Bi = 'BI',
  /**
   * Benin
   * @deprecated
   */
  Bj = 'BJ',
  /**
   * St. Barthélemy
   * @deprecated
   */
  Bl = 'BL',
  /**
   * Bermuda
   * @deprecated
   */
  Bm = 'BM',
  /**
   * Brunei
   * @deprecated
   */
  Bn = 'BN',
  /**
   * Bolivia
   * @deprecated
   */
  Bo = 'BO',
  /**
   * Brazil
   * @deprecated
   */
  Br = 'BR',
  /**
   * Bahamas
   * @deprecated
   */
  Bs = 'BS',
  /**
   * Bhutan
   * @deprecated
   */
  Bt = 'BT',
  /**
   * Bouvet Island
   * @deprecated
   */
  Bv = 'BV',
  /**
   * Botswana
   * @deprecated
   */
  Bw = 'BW',
  /**
   * Belarus
   * @deprecated
   */
  By = 'BY',
  /**
   * Belize
   * @deprecated
   */
  Bz = 'BZ',
  /**
   * Canada
   * @deprecated
   */
  Ca = 'CA',
  /**
   * Cocos (Keeling) Islands
   * @deprecated
   */
  Cc = 'CC',
  /**
   * Congo-Kinshasa
   * @deprecated
   */
  Cd = 'CD',
  /**
   * Central African Republic
   * @deprecated
   */
  Cf = 'CF',
  /**
   * Congo-Brazzaville
   * @deprecated
   */
  Cg = 'CG',
  /**
   * Switzerland
   * @deprecated
   */
  Ch = 'CH',
  /**
   * Côte d’Ivoire
   * @deprecated
   */
  Ci = 'CI',
  /**
   * Cook Islands
   * @deprecated
   */
  Ck = 'CK',
  /**
   * Chile
   * @deprecated
   */
  Cl = 'CL',
  /**
   * Cameroon
   * @deprecated
   */
  Cm = 'CM',
  /**
   * China
   * @deprecated
   */
  Cn = 'CN',
  /**
   * Colombia
   * @deprecated
   */
  Co = 'CO',
  /**
   * Costa Rica
   * @deprecated
   */
  Cr = 'CR',
  /**
   * Cuba
   * @deprecated
   */
  Cu = 'CU',
  /**
   * Cape Verde
   * @deprecated
   */
  Cv = 'CV',
  /**
   * Christmas Island
   * @deprecated
   */
  Cx = 'CX',
  /**
   * Cyprus
   * @deprecated
   */
  Cy = 'CY',
  /**
   * Czech Republic
   * @deprecated
   */
  Cz = 'CZ',
  /**
   * Germany
   * @deprecated
   */
  De = 'DE',
  /**
   * Djibouti
   * @deprecated
   */
  Dj = 'DJ',
  /**
   * Denmark
   * @deprecated
   */
  Dk = 'DK',
  /**
   * Dominica
   * @deprecated
   */
  Dm = 'DM',
  /**
   * Dominican Republic
   * @deprecated
   */
  Do = 'DO',
  /**
   * Algeria
   * @deprecated
   */
  Dz = 'DZ',
  /**
   * Ecuador
   * @deprecated
   */
  Ec = 'EC',
  /**
   * Estonia
   * @deprecated
   */
  Ee = 'EE',
  /**
   * Egypt
   * @deprecated
   */
  Eg = 'EG',
  /**
   * Western Sahara
   * @deprecated
   */
  Eh = 'EH',
  /**
   * Eritrea
   * @deprecated
   */
  Er = 'ER',
  /**
   * Spain
   * @deprecated
   */
  Es = 'ES',
  /**
   * Ethiopia
   * @deprecated
   */
  Et = 'ET',
  /**
   * Finland
   * @deprecated
   */
  Fi = 'FI',
  /**
   * Fiji
   * @deprecated
   */
  Fj = 'FJ',
  /**
   * Falkland Islands
   * @deprecated
   */
  Fk = 'FK',
  /**
   * Micronesia
   * @deprecated
   */
  Fm = 'FM',
  /**
   * Faroe Islands
   * @deprecated
   */
  Fo = 'FO',
  /**
   * France
   * @deprecated
   */
  Fr = 'FR',
  /**
   * Gabon
   * @deprecated
   */
  Ga = 'GA',
  /**
   * United Kingdom
   * @deprecated
   */
  Gb = 'GB',
  /**
   * Grenada
   * @deprecated
   */
  Gd = 'GD',
  /**
   * Georgia
   * @deprecated
   */
  Ge = 'GE',
  /**
   * French Guiana
   * @deprecated
   */
  Gf = 'GF',
  /**
   * Guernsey
   * @deprecated
   */
  Gg = 'GG',
  /**
   * Ghana
   * @deprecated
   */
  Gh = 'GH',
  /**
   * Gibraltar
   * @deprecated
   */
  Gi = 'GI',
  /**
   * Greenland
   * @deprecated
   */
  Gl = 'GL',
  /**
   * Gambia
   * @deprecated
   */
  Gm = 'GM',
  /**
   * Guinea
   * @deprecated
   */
  Gn = 'GN',
  /**
   * Guadeloupe
   * @deprecated
   */
  Gp = 'GP',
  /**
   * Equatorial Guinea
   * @deprecated
   */
  Gq = 'GQ',
  /**
   * Greece
   * @deprecated
   */
  Gr = 'GR',
  /**
   * South Georgia & South Sandwich Islands
   * @deprecated
   */
  Gs = 'GS',
  /**
   * Guatemala
   * @deprecated
   */
  Gt = 'GT',
  /**
   * Guam
   * @deprecated
   */
  Gu = 'GU',
  /**
   * Guinea-Bissau
   * @deprecated
   */
  Gw = 'GW',
  /**
   * Guyana
   * @deprecated
   */
  Gy = 'GY',
  /**
   * Hong Kong SAR China
   * @deprecated
   */
  Hk = 'HK',
  /**
   * Heard &amp; McDonald Islands
   * @deprecated
   */
  Hm = 'HM',
  /**
   * Honduras
   * @deprecated
   */
  Hn = 'HN',
  /**
   * Croatia
   * @deprecated
   */
  Hr = 'HR',
  /**
   * Haiti
   * @deprecated
   */
  Ht = 'HT',
  /**
   * Hungary
   * @deprecated
   */
  Hu = 'HU',
  /**
   * Indonesia
   * @deprecated
   */
  Id = 'ID',
  /**
   * Ireland
   * @deprecated
   */
  Ie = 'IE',
  /**
   * Israel
   * @deprecated
   */
  Il = 'IL',
  /**
   * Isle of Man
   * @deprecated
   */
  Im = 'IM',
  /**
   * India
   * @deprecated
   */
  In = 'IN',
  /**
   * British Indian Ocean Territory
   * @deprecated
   */
  Io = 'IO',
  /**
   * Iraq
   * @deprecated
   */
  Iq = 'IQ',
  /**
   * Iran
   * @deprecated
   */
  Ir = 'IR',
  /**
   * Iceland
   * @deprecated
   */
  Is = 'IS',
  /**
   * Italy
   * @deprecated
   */
  It = 'IT',
  /**
   * Jersey
   * @deprecated
   */
  Je = 'JE',
  /**
   * Jamaica
   * @deprecated
   */
  Jm = 'JM',
  /**
   * Jordan
   * @deprecated
   */
  Jo = 'JO',
  /**
   * Japan
   * @deprecated
   */
  Jp = 'JP',
  /**
   * Kenya
   * @deprecated
   */
  Ke = 'KE',
  /**
   * Kyrgyzstan
   * @deprecated
   */
  Kg = 'KG',
  /**
   * Cambodia
   * @deprecated
   */
  Kh = 'KH',
  /**
   * Kiribati
   * @deprecated
   */
  Ki = 'KI',
  /**
   * Comoros
   * @deprecated
   */
  Km = 'KM',
  /**
   * St. Kitts & Nevis
   * @deprecated
   */
  Kn = 'KN',
  /**
   * North Korea
   * @deprecated
   */
  Kp = 'KP',
  /**
   * South Korea
   * @deprecated
   */
  Kr = 'KR',
  /**
   * Kuwait
   * @deprecated
   */
  Kw = 'KW',
  /**
   * Cayman Islands
   * @deprecated
   */
  Ky = 'KY',
  /**
   * Kazakhstan
   * @deprecated
   */
  Kz = 'KZ',
  /**
   * Laos
   * @deprecated
   */
  La = 'LA',
  /**
   * Lebanon
   * @deprecated
   */
  Lb = 'LB',
  /**
   * St. Lucia
   * @deprecated
   */
  Lc = 'LC',
  /**
   * Liechtenstein
   * @deprecated
   */
  Li = 'LI',
  /**
   * Sri Lanka
   * @deprecated
   */
  Lk = 'LK',
  /**
   * Liberia
   * @deprecated
   */
  Lr = 'LR',
  /**
   * Lesotho
   * @deprecated
   */
  Ls = 'LS',
  /**
   * Lithuania
   * @deprecated
   */
  Lt = 'LT',
  /**
   * Luxembourg
   * @deprecated
   */
  Lu = 'LU',
  /**
   * Latvia
   * @deprecated
   */
  Lv = 'LV',
  /**
   * Libya
   * @deprecated
   */
  Ly = 'LY',
  /**
   * Morocco
   * @deprecated
   */
  Ma = 'MA',
  /**
   * Monaco
   * @deprecated
   */
  Mc = 'MC',
  /**
   * Moldova
   * @deprecated
   */
  Md = 'MD',
  /**
   * Montenegro
   * @deprecated
   */
  Me = 'ME',
  /**
   * St. Martin
   * @deprecated
   */
  Mf = 'MF',
  /**
   * Madagascar
   * @deprecated
   */
  Mg = 'MG',
  /**
   * Marshall Islands
   * @deprecated
   */
  Mh = 'MH',
  /**
   * Macedonia
   * @deprecated
   */
  Mk = 'MK',
  /**
   * Mali
   * @deprecated
   */
  Ml = 'ML',
  /**
   * Myanmar (Burma)
   * @deprecated
   */
  Mm = 'MM',
  /**
   * Mongolia
   * @deprecated
   */
  Mn = 'MN',
  /**
   * Macau SAR China
   * @deprecated
   */
  Mo = 'MO',
  /**
   * Northern Mariana Islands
   * @deprecated
   */
  Mp = 'MP',
  /**
   * Martinique
   * @deprecated
   */
  Mq = 'MQ',
  /**
   * Mauritania
   * @deprecated
   */
  Mr = 'MR',
  /**
   * Montserrat
   * @deprecated
   */
  Ms = 'MS',
  /**
   * Malta
   * @deprecated
   */
  Mt = 'MT',
  /**
   * Mauritius
   * @deprecated
   */
  Mu = 'MU',
  /**
   * Maldives
   * @deprecated
   */
  Mv = 'MV',
  /**
   * Malawi
   * @deprecated
   */
  Mw = 'MW',
  /**
   * Mexico
   * @deprecated
   */
  Mx = 'MX',
  /**
   * Malaysia
   * @deprecated
   */
  My = 'MY',
  /**
   * Mozambique
   * @deprecated
   */
  Mz = 'MZ',
  /**
   * Namibia
   * @deprecated
   */
  Na = 'NA',
  /**
   * New Caledonia
   * @deprecated
   */
  Nc = 'NC',
  /**
   * Niger
   * @deprecated
   */
  Ne = 'NE',
  /**
   * Norfolk Island
   * @deprecated
   */
  Nf = 'NF',
  /**
   * Nigeria
   * @deprecated
   */
  Ng = 'NG',
  /**
   * Nicaragua
   * @deprecated
   */
  Ni = 'NI',
  /**
   * Netherlands
   * @deprecated
   */
  Nl = 'NL',
  /**
   * Norway
   * @deprecated
   */
  No = 'NO',
  /**
   * Nepal
   * @deprecated
   */
  Np = 'NP',
  /**
   * Nauru
   * @deprecated
   */
  Nr = 'NR',
  /**
   * Niue
   * @deprecated
   */
  Nu = 'NU',
  /**
   * New Zealand
   * @deprecated
   */
  Nz = 'NZ',
  /**
   * Oman
   * @deprecated
   */
  Om = 'OM',
  /**
   * Panama
   * @deprecated
   */
  Pa = 'PA',
  /**
   * Peru
   * @deprecated
   */
  Pe = 'PE',
  /**
   * French Polynesia
   * @deprecated
   */
  Pf = 'PF',
  /**
   * Papua New Guinea
   * @deprecated
   */
  Pg = 'PG',
  /**
   * Philippines
   * @deprecated
   */
  Ph = 'PH',
  /**
   * Pakistan
   * @deprecated
   */
  Pk = 'PK',
  /**
   * Poland
   * @deprecated
   */
  Pl = 'PL',
  /**
   * St. Pierre & Miquelon
   * @deprecated
   */
  Pm = 'PM',
  /**
   * Pitcairn Islands
   * @deprecated
   */
  Pn = 'PN',
  /**
   * Palestinian Territories
   * @deprecated
   */
  Ps = 'PS',
  /**
   * Portugal
   * @deprecated
   */
  Pt = 'PT',
  /**
   * Palau
   * @deprecated
   */
  Pw = 'PW',
  /**
   * Paraguay
   * @deprecated
   */
  Py = 'PY',
  /**
   * Qatar
   * @deprecated
   */
  Qa = 'QA',
  /**
   * Réunion
   * @deprecated
   */
  Re = 'RE',
  /**
   * Romania
   * @deprecated
   */
  Ro = 'RO',
  /**
   * Serbia
   * @deprecated
   */
  Rs = 'RS',
  /**
   * Russia
   * @deprecated
   */
  Ru = 'RU',
  /**
   * Rwanda
   * @deprecated
   */
  Rw = 'RW',
  /**
   * Saudi Arabia
   * @deprecated
   */
  Sa = 'SA',
  /**
   * Solomon Islands
   * @deprecated
   */
  Sb = 'SB',
  /**
   * Seychelles
   * @deprecated
   */
  Sc = 'SC',
  /**
   * Sudan
   * @deprecated
   */
  Sd = 'SD',
  /**
   * Sweden
   * @deprecated
   */
  Se = 'SE',
  /**
   * Singapore
   * @deprecated
   */
  Sg = 'SG',
  /**
   * St. Helena
   * @deprecated
   */
  Sh = 'SH',
  /**
   * Slovenia
   * @deprecated
   */
  Si = 'SI',
  /**
   * Svalbard & Jan Mayen
   * @deprecated
   */
  Sj = 'SJ',
  /**
   * Slovakia
   * @deprecated
   */
  Sk = 'SK',
  /**
   * Sierra Leone
   * @deprecated
   */
  Sl = 'SL',
  /**
   * San Marino
   * @deprecated
   */
  Sm = 'SM',
  /**
   * Senegal
   * @deprecated
   */
  Sn = 'SN',
  /**
   * Somalia
   * @deprecated
   */
  So = 'SO',
  /**
   * Suriname
   * @deprecated
   */
  Sr = 'SR',
  /**
   * São Tomé & Príncipe
   * @deprecated
   */
  St = 'ST',
  /**
   * El Salvador
   * @deprecated
   */
  Sv = 'SV',
  /**
   * Syria
   * @deprecated
   */
  Sy = 'SY',
  /**
   * Swaziland
   * @deprecated
   */
  Sz = 'SZ',
  /**
   * Turks & Caicos Islands
   * @deprecated
   */
  Tc = 'TC',
  /**
   * Chad
   * @deprecated
   */
  Td = 'TD',
  /**
   * French Southern Territories
   * @deprecated
   */
  Tf = 'TF',
  /**
   * Togo
   * @deprecated
   */
  Tg = 'TG',
  /**
   * Thailand
   * @deprecated
   */
  Th = 'TH',
  /**
   * Tajikistan
   * @deprecated
   */
  Tj = 'TJ',
  /**
   * Tokelau
   * @deprecated
   */
  Tk = 'TK',
  /**
   * Timor-Leste
   * @deprecated
   */
  Tl = 'TL',
  /**
   * Turkmenistan
   * @deprecated
   */
  Tm = 'TM',
  /**
   * Tunisia
   * @deprecated
   */
  Tn = 'TN',
  /**
   * Tonga
   * @deprecated
   */
  To = 'TO',
  /**
   * Turkey
   * @deprecated
   */
  Tr = 'TR',
  /**
   * Trinidad & Tobago
   * @deprecated
   */
  Tt = 'TT',
  /**
   * Tuvalu
   * @deprecated
   */
  Tv = 'TV',
  /**
   * Taiwan
   * @deprecated
   */
  Tw = 'TW',
  /**
   * Tanzania
   * @deprecated
   */
  Tz = 'TZ',
  /**
   * Ukraine
   * @deprecated
   */
  Ua = 'UA',
  /**
   * Uganda
   * @deprecated
   */
  Ug = 'UG',
  /**
   * U.S. Outlying Islands
   * @deprecated
   */
  Um = 'UM',
  /**
   * United States
   * @deprecated
   */
  Us = 'US',
  /**
   * Uruguay
   * @deprecated
   */
  Uy = 'UY',
  /**
   * Uzbekistan
   * @deprecated
   */
  Uz = 'UZ',
  /**
   * Vatican City
   * @deprecated
   */
  Va = 'VA',
  /**
   * St. Vincent & Grenadines
   * @deprecated
   */
  Vc = 'VC',
  /**
   * Venezuela
   * @deprecated
   */
  Ve = 'VE',
  /**
   * British Virgin Islands
   * @deprecated
   */
  Vg = 'VG',
  /**
   * U.S. Virgin Islands
   * @deprecated
   */
  Vi = 'VI',
  /**
   * Vietnam
   * @deprecated
   */
  Vn = 'VN',
  /**
   * Vanuatu
   * @deprecated
   */
  Vu = 'VU',
  /**
   * Wallis & Futuna
   * @deprecated
   */
  Wf = 'WF',
  /**
   * Samoa
   * @deprecated
   */
  Ws = 'WS',
  /**
   * Yemen
   * @deprecated
   */
  Ye = 'YE',
  /**
   * Mayotte
   * @deprecated
   */
  Yt = 'YT',
  /**
   * South Africa
   * @deprecated
   */
  Za = 'ZA',
  /**
   * Zambia
   * @deprecated
   */
  Zm = 'ZM',
  /**
   * Zimbabwe
   * @deprecated
   */
  Zw = 'ZW'
}

/** Contains an array of product IDs to use for creating a compare list. */
export type CreateCompareListInput = {
  /** An array of product IDs to add to the compare list. */
  products?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};

/** Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods. */
export type CreatePayflowProTokenOutput = {
  __typename?: 'CreatePayflowProTokenOutput';
  /** The RESPMSG returned by PayPal. If the `result` is `0`, then `response_message` is `Approved`. */
  response_message: Scalars['String'];
  /** A non-zero value if any errors occurred. */
  result: Scalars['Int'];
  /** The RESULT returned by PayPal. A value of `0` indicates the transaction was approved. */
  result_code: Scalars['Int'];
  /** A secure token generated by PayPal. */
  secure_token: Scalars['String'];
  /** A secure token ID generated by PayPal. */
  secure_token_id: Scalars['String'];
};

/** Defines a new product review. */
export type CreateProductReviewInput = {
  /** The customer's nickname. Defaults to the customer name, if logged in. */
  nickname: Scalars['String'];
  /** The ratings details by category. For example, Price: 5 stars, Quality: 4 stars, etc. */
  ratings: Array<InputMaybe<ProductReviewRatingInput>>;
  /** The SKU of the reviewed product. */
  sku: Scalars['String'];
  /** The summary (title) of the review. */
  summary: Scalars['String'];
  /** The review text. */
  text: Scalars['String'];
};

/** Contains the completed product review. */
export type CreateProductReviewOutput = {
  __typename?: 'CreateProductReviewOutput';
  /** Product review details. */
  review: ProductReview;
};

/** Required fields for Payflow Pro and Payments Pro credit card payments. */
export type CreditCardDetailsInput = {
  /** The credit card expiration month. */
  cc_exp_month: Scalars['Int'];
  /** The credit card expiration year. */
  cc_exp_year: Scalars['Int'];
  /** The last 4 digits of the credit card. */
  cc_last_4: Scalars['Int'];
  /** The credit card type. */
  cc_type: Scalars['String'];
};

/** Contains credit memo details. */
export type CreditMemo = {
  __typename?: 'CreditMemo';
  /** Comments on the credit memo. */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
  /** The unique ID for a `CreditMemo` object. */
  id: Scalars['ID'];
  /** An array containing details about refunded items. */
  items?: Maybe<Array<Maybe<CreditMemoItemInterface>>>;
  /** The sequential credit memo number. */
  number: Scalars['String'];
  /** Details about the total refunded amount. */
  total?: Maybe<CreditMemoTotal>;
};

export type CreditMemoItem = CreditMemoItemInterface & {
  __typename?: 'CreditMemoItem';
  /** Details about the final discount amount for the base product, including discounts on options. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for a `CreditMemoItemInterface` object. */
  id: Scalars['ID'];
  /** The order item the credit memo is applied to. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product, including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String'];
  /** The number of refunded items. */
  quantity_refunded?: Maybe<Scalars['Float']>;
};

/** Credit memo item details. */
export type CreditMemoItemInterface = {
  /** Details about the final discount amount for the base product, including discounts on options. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for a `CreditMemoItemInterface` object. */
  id: Scalars['ID'];
  /** The order item the credit memo is applied to. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product, including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String'];
  /** The number of refunded items. */
  quantity_refunded?: Maybe<Scalars['Float']>;
};

/** Contains credit memo price details. */
export type CreditMemoTotal = {
  __typename?: 'CreditMemoTotal';
  /** An adjustment manually applied to the order. */
  adjustment: Money;
  /** The final base grand total amount in the base currency. */
  base_grand_total: Money;
  /** The applied discounts to the credit memo. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The final total amount, including shipping, discounts, and taxes. */
  grand_total: Money;
  /** Details about the shipping and handling costs for the credit memo. */
  shipping_handling?: Maybe<ShippingHandling>;
  /** The subtotal of the invoice, excluding shipping, discounts, and taxes. */
  subtotal: Money;
  /** The credit memo tax details. */
  taxes?: Maybe<Array<Maybe<TaxItem>>>;
  /** The shipping amount for the credit memo. */
  total_shipping: Money;
  /** The amount of tax applied to the credit memo. */
  total_tax: Money;
};

export type Currency = {
  __typename?: 'Currency';
  /** An array of three-letter currency codes accepted by the store, such as USD and EUR. */
  available_currency_codes?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The base currency set for the store, such as USD. */
  base_currency_code?: Maybe<Scalars['String']>;
  /** The symbol for the specified base currency, such as $. */
  base_currency_symbol?: Maybe<Scalars['String']>;
  /** @deprecated Symbol was missed. Use `default_display_currency_code`. */
  default_display_currecy_code?: Maybe<Scalars['String']>;
  /** @deprecated Symbol was missed. Use `default_display_currency_code`. */
  default_display_currecy_symbol?: Maybe<Scalars['String']>;
  /** The currency that is displayed by default, such as USD. */
  default_display_currency_code?: Maybe<Scalars['String']>;
  /** The currency symbol that is displayed by default, such as $. */
  default_display_currency_symbol?: Maybe<Scalars['String']>;
  /** An array of exchange rates for currencies defined in the store. */
  exchange_rates?: Maybe<Array<Maybe<ExchangeRate>>>;
};

/** The list of available currency codes. */
export enum CurrencyEnum {
  /** @deprecated  */
  Aed = 'AED',
  /** @deprecated  */
  Afn = 'AFN',
  /** @deprecated  */
  All = 'ALL',
  /** @deprecated  */
  Amd = 'AMD',
  /** @deprecated  */
  Ang = 'ANG',
  /** @deprecated  */
  Aoa = 'AOA',
  /** @deprecated  */
  Ars = 'ARS',
  /** @deprecated  */
  Aud = 'AUD',
  /** @deprecated  */
  Awg = 'AWG',
  /** @deprecated  */
  Azm = 'AZM',
  /** @deprecated  */
  Azn = 'AZN',
  /** @deprecated  */
  Bam = 'BAM',
  /** @deprecated  */
  Bbd = 'BBD',
  /** @deprecated  */
  Bdt = 'BDT',
  /** @deprecated  */
  Bgn = 'BGN',
  /** @deprecated  */
  Bhd = 'BHD',
  /** @deprecated  */
  Bif = 'BIF',
  /** @deprecated  */
  Bmd = 'BMD',
  /** @deprecated  */
  Bnd = 'BND',
  /** @deprecated  */
  Bob = 'BOB',
  /** @deprecated  */
  Brl = 'BRL',
  /** @deprecated  */
  Bsd = 'BSD',
  /** @deprecated  */
  Btn = 'BTN',
  /** @deprecated  */
  Buk = 'BUK',
  /** @deprecated  */
  Bwp = 'BWP',
  /** @deprecated  */
  Byn = 'BYN',
  /** @deprecated  */
  Bzd = 'BZD',
  /** @deprecated  */
  Cad = 'CAD',
  /** @deprecated  */
  Cdf = 'CDF',
  /** @deprecated  */
  Che = 'CHE',
  /** @deprecated  */
  Chf = 'CHF',
  /** @deprecated  */
  Chw = 'CHW',
  /** @deprecated  */
  Clp = 'CLP',
  /** @deprecated  */
  Cny = 'CNY',
  /** @deprecated  */
  Cop = 'COP',
  /** @deprecated  */
  Crc = 'CRC',
  /** @deprecated  */
  Cup = 'CUP',
  /** @deprecated  */
  Cve = 'CVE',
  /** @deprecated  */
  Czk = 'CZK',
  /** @deprecated  */
  Djf = 'DJF',
  /** @deprecated  */
  Dkk = 'DKK',
  /** @deprecated  */
  Dop = 'DOP',
  /** @deprecated  */
  Dzd = 'DZD',
  /** @deprecated  */
  Eek = 'EEK',
  /** @deprecated  */
  Egp = 'EGP',
  /** @deprecated  */
  Ern = 'ERN',
  /** @deprecated  */
  Etb = 'ETB',
  /** @deprecated  */
  Eur = 'EUR',
  /** @deprecated  */
  Fjd = 'FJD',
  /** @deprecated  */
  Fkp = 'FKP',
  /** @deprecated  */
  Gbp = 'GBP',
  /** @deprecated  */
  Gek = 'GEK',
  /** @deprecated  */
  Gel = 'GEL',
  /** @deprecated  */
  Ghs = 'GHS',
  /** @deprecated  */
  Gip = 'GIP',
  /** @deprecated  */
  Gmd = 'GMD',
  /** @deprecated  */
  Gnf = 'GNF',
  /** @deprecated  */
  Gqe = 'GQE',
  /** @deprecated  */
  Gtq = 'GTQ',
  /** @deprecated  */
  Gyd = 'GYD',
  /** @deprecated  */
  Hkd = 'HKD',
  /** @deprecated  */
  Hnl = 'HNL',
  /** @deprecated  */
  Hrk = 'HRK',
  /** @deprecated  */
  Htg = 'HTG',
  /** @deprecated  */
  Huf = 'HUF',
  /** @deprecated  */
  Idr = 'IDR',
  /** @deprecated  */
  Ils = 'ILS',
  /** @deprecated  */
  Inr = 'INR',
  /** @deprecated  */
  Iqd = 'IQD',
  /** @deprecated  */
  Irr = 'IRR',
  /** @deprecated  */
  Isk = 'ISK',
  /** @deprecated  */
  Jmd = 'JMD',
  /** @deprecated  */
  Jod = 'JOD',
  /** @deprecated  */
  Jpy = 'JPY',
  /** @deprecated  */
  Kes = 'KES',
  /** @deprecated  */
  Kgs = 'KGS',
  /** @deprecated  */
  Khr = 'KHR',
  /** @deprecated  */
  Kmf = 'KMF',
  /** @deprecated  */
  Kpw = 'KPW',
  /** @deprecated  */
  Krw = 'KRW',
  /** @deprecated  */
  Kwd = 'KWD',
  /** @deprecated  */
  Kyd = 'KYD',
  /** @deprecated  */
  Kzt = 'KZT',
  /** @deprecated  */
  Lak = 'LAK',
  /** @deprecated  */
  Lbp = 'LBP',
  /** @deprecated  */
  Lkr = 'LKR',
  /** @deprecated  */
  Lrd = 'LRD',
  /** @deprecated  */
  Lsl = 'LSL',
  /** @deprecated  */
  Lsm = 'LSM',
  /** @deprecated  */
  Ltl = 'LTL',
  /** @deprecated  */
  Lvl = 'LVL',
  /** @deprecated  */
  Lyd = 'LYD',
  /** @deprecated  */
  Mad = 'MAD',
  /** @deprecated  */
  Mdl = 'MDL',
  /** @deprecated  */
  Mga = 'MGA',
  /** @deprecated  */
  Mkd = 'MKD',
  /** @deprecated  */
  Mmk = 'MMK',
  /** @deprecated  */
  Mnt = 'MNT',
  /** @deprecated  */
  Mop = 'MOP',
  /** @deprecated  */
  Mro = 'MRO',
  /** @deprecated  */
  Mur = 'MUR',
  /** @deprecated  */
  Mvr = 'MVR',
  /** @deprecated  */
  Mwk = 'MWK',
  /** @deprecated  */
  Mxn = 'MXN',
  /** @deprecated  */
  Myr = 'MYR',
  /** @deprecated  */
  Mzn = 'MZN',
  /** @deprecated  */
  Nad = 'NAD',
  /** @deprecated  */
  Ngn = 'NGN',
  /** @deprecated  */
  Nic = 'NIC',
  /** @deprecated  */
  Nok = 'NOK',
  /** @deprecated  */
  Npr = 'NPR',
  /** @deprecated  */
  Nzd = 'NZD',
  /** @deprecated  */
  Omr = 'OMR',
  /** @deprecated  */
  Pab = 'PAB',
  /** @deprecated  */
  Pen = 'PEN',
  /** @deprecated  */
  Pgk = 'PGK',
  /** @deprecated  */
  Php = 'PHP',
  /** @deprecated  */
  Pkr = 'PKR',
  /** @deprecated  */
  Pln = 'PLN',
  /** @deprecated  */
  Pyg = 'PYG',
  /** @deprecated  */
  Qar = 'QAR',
  /** @deprecated  */
  Rhd = 'RHD',
  /** @deprecated  */
  Rol = 'ROL',
  /** @deprecated  */
  Ron = 'RON',
  /** @deprecated  */
  Rsd = 'RSD',
  /** @deprecated  */
  Rub = 'RUB',
  /** @deprecated  */
  Rwf = 'RWF',
  /** @deprecated  */
  Sar = 'SAR',
  /** @deprecated  */
  Sbd = 'SBD',
  /** @deprecated  */
  Scr = 'SCR',
  /** @deprecated  */
  Sdg = 'SDG',
  /** @deprecated  */
  Sek = 'SEK',
  /** @deprecated  */
  Sgd = 'SGD',
  /** @deprecated  */
  Shp = 'SHP',
  /** @deprecated  */
  Skk = 'SKK',
  /** @deprecated  */
  Sll = 'SLL',
  /** @deprecated  */
  Sos = 'SOS',
  /** @deprecated  */
  Srd = 'SRD',
  /** @deprecated  */
  Std = 'STD',
  /** @deprecated  */
  Svc = 'SVC',
  /** @deprecated  */
  Syp = 'SYP',
  /** @deprecated  */
  Szl = 'SZL',
  /** @deprecated  */
  Thb = 'THB',
  /** @deprecated  */
  Tjs = 'TJS',
  /** @deprecated  */
  Tmm = 'TMM',
  /** @deprecated  */
  Tnd = 'TND',
  /** @deprecated  */
  Top = 'TOP',
  /** @deprecated  */
  Trl = 'TRL',
  /** @deprecated  */
  Try = 'TRY',
  /** @deprecated  */
  Ttd = 'TTD',
  /** @deprecated  */
  Twd = 'TWD',
  /** @deprecated  */
  Tzs = 'TZS',
  /** @deprecated  */
  Uah = 'UAH',
  /** @deprecated  */
  Ugx = 'UGX',
  /** @deprecated  */
  Usd = 'USD',
  /** @deprecated  */
  Uyu = 'UYU',
  /** @deprecated  */
  Uzs = 'UZS',
  /** @deprecated  */
  Veb = 'VEB',
  /** @deprecated  */
  Vef = 'VEF',
  /** @deprecated  */
  Vnd = 'VND',
  /** @deprecated  */
  Vuv = 'VUV',
  /** @deprecated  */
  Wst = 'WST',
  /** @deprecated  */
  Xcd = 'XCD',
  /** @deprecated  */
  Xof = 'XOF',
  /** @deprecated  */
  Xpf = 'XPF',
  /** @deprecated  */
  Yer = 'YER',
  /** @deprecated  */
  Ytl = 'YTL',
  /** @deprecated  */
  Zar = 'ZAR',
  /** @deprecated  */
  Zmk = 'ZMK',
  /** @deprecated  */
  Zwd = 'ZWD'
}

/** Defines an array of custom attributes. */
export type CustomAttributeMetadata = {
  __typename?: 'CustomAttributeMetadata';
  /** An array of attributes. */
  items?: Maybe<Array<Maybe<Attribute>>>;
};

/** Defines the customer name, addresses, and other details. */
export type Customer = {
  __typename?: 'Customer';
  /** An array containing the customer's shipping and billing addresses. */
  addresses?: Maybe<Array<Maybe<CustomerAddress>>>;
  /** Indicates whether the customer has enabled remote shopping assistance. */
  allow_remote_shopping_assistance: Scalars['Boolean'];
  /** The contents of the customer's compare list. */
  compare_list?: Maybe<CompareList>;
  /** Timestamp indicating when the account was created. */
  created_at?: Maybe<Scalars['String']>;
  /** The customer's date of birth. */
  date_of_birth?: Maybe<Scalars['String']>;
  /** The ID assigned to the billing address. */
  default_billing?: Maybe<Scalars['String']>;
  /** The ID assigned to the shipping address. */
  default_shipping?: Maybe<Scalars['String']>;
  /**
   * The customer's date of birth.
   * @deprecated Use `date_of_birth` instead.
   */
  dob?: Maybe<Scalars['String']>;
  /** The customer's email address. Required. */
  email?: Maybe<Scalars['String']>;
  /** The customer's first name. */
  firstname?: Maybe<Scalars['String']>;
  /** The customer's gender (Male - 1, Female - 2). */
  gender?: Maybe<Scalars['Int']>;
  /** @deprecated Customer group should not be exposed in the storefront scenarios. */
  group_id?: Maybe<Scalars['Int']>;
  /**
   * The ID assigned to the customer.
   * @deprecated `id` is not needed as part of `Customer`, because on the server side, it can be identified based on the customer token used for authentication. There is no need to know customer ID on the client side.
   */
  id?: Maybe<Scalars['Int']>;
  /** Indicates whether the customer is subscribed to the company's newsletter. */
  is_subscribed?: Maybe<Scalars['Boolean']>;
  /** The customer's family name. */
  lastname?: Maybe<Scalars['String']>;
  /** The customer's middle name. */
  middlename?: Maybe<Scalars['String']>;
  orders?: Maybe<CustomerOrders>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>;
  /** Contains the customer's product reviews. */
  reviews: ProductReviews;
  /** A value such as Sr., Jr., or III. */
  suffix?: Maybe<Scalars['String']>;
  /** The customer's Value-added tax (VAT) number (for corporate customers). */
  taxvat?: Maybe<Scalars['String']>;
  /**
   * Return a customer's wish lists.
   * @deprecated Use `Customer.wishlists` or `Customer.wishlist_v2` instead.
   */
  wishlist: Wishlist;
  /** Retrieve the wish list identified by the unique ID for a `Wishlist` object. */
  wishlist_v2?: Maybe<Wishlist>;
  /** An array of wishlists. In Magento Open Source, customers are limited to one wish list. The number of wish lists is configurable for Adobe Commerce. */
  wishlists: Array<Maybe<Wishlist>>;
};


/** Defines the customer name, addresses, and other details. */
export type CustomerOrdersArgs = {
  currentPage?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<CustomerOrdersFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']>;
};


/** Defines the customer name, addresses, and other details. */
export type CustomerReviewsArgs = {
  currentPage?: InputMaybe<Scalars['Int']>;
  pageSize?: InputMaybe<Scalars['Int']>;
};


/** Defines the customer name, addresses, and other details. */
export type CustomerWishlist_V2Args = {
  id: Scalars['ID'];
};


/** Defines the customer name, addresses, and other details. */
export type CustomerWishlistsArgs = {
  currentPage?: InputMaybe<Scalars['Int']>;
  pageSize?: InputMaybe<Scalars['Int']>;
};

/** Contains detailed information about a customer's billing or shipping address. */
export type CustomerAddress = {
  __typename?: 'CustomerAddress';
  /** The customer's city or town. */
  city?: Maybe<Scalars['String']>;
  /** The customer's company. */
  company?: Maybe<Scalars['String']>;
  /** The customer's country. */
  country_code?: Maybe<CountryCodeEnum>;
  /**
   * The customer's country.
   * @deprecated Use `country_code` instead.
   */
  country_id?: Maybe<Scalars['String']>;
  /** @deprecated Custom attributes should not be put into a container. */
  custom_attributes?: Maybe<Array<Maybe<CustomerAddressAttribute>>>;
  /**
   * The customer ID
   * @deprecated `customer_id` is not needed as part of `CustomerAddress`. The `id` is a unique identifier for the addresses.
   */
  customer_id?: Maybe<Scalars['Int']>;
  /** Indicates whether the address is the customer's default billing address. */
  default_billing?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the address is the customer's default shipping address. */
  default_shipping?: Maybe<Scalars['Boolean']>;
  /** Contains any extension attributes for the address. */
  extension_attributes?: Maybe<Array<Maybe<CustomerAddressAttribute>>>;
  /** The customer's fax number. */
  fax?: Maybe<Scalars['String']>;
  /** The first name of the person associated with the shipping/billing address. */
  firstname?: Maybe<Scalars['String']>;
  /** The ID of a `CustomerAddress` object. */
  id?: Maybe<Scalars['Int']>;
  /** The family name of the person associated with the shipping/billing address. */
  lastname?: Maybe<Scalars['String']>;
  /** The middle name of the person associated with the shipping/billing address. */
  middlename?: Maybe<Scalars['String']>;
  /** The customer's ZIP or postal code. */
  postcode?: Maybe<Scalars['String']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>;
  /** An object containing the region name, region code, and region ID. */
  region?: Maybe<CustomerAddressRegion>;
  /** The unique ID for a pre-defined region. */
  region_id?: Maybe<Scalars['Int']>;
  /** An array of strings that define the street number and name. */
  street?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A value such as Sr., Jr., or III. */
  suffix?: Maybe<Scalars['String']>;
  /** The customer's telephone number. */
  telephone?: Maybe<Scalars['String']>;
  /** The customer's Value-added tax (VAT) number (for corporate customers). */
  vat_id?: Maybe<Scalars['String']>;
};

/** Specifies the attribute code and value of a customer address attribute. */
export type CustomerAddressAttribute = {
  __typename?: 'CustomerAddressAttribute';
  /** The name assigned to the customer address attribute. */
  attribute_code?: Maybe<Scalars['String']>;
  /** The valuue assigned to the customer address attribute. */
  value?: Maybe<Scalars['String']>;
};

/** Specifies the attribute code and value of a customer attribute. */
export type CustomerAddressAttributeInput = {
  /** The name assigned to the attribute. */
  attribute_code: Scalars['String'];
  /** The value assigned to the attribute. */
  value: Scalars['String'];
};

/** Contains details about a billing or shipping address. */
export type CustomerAddressInput = {
  /** The customer's city or town. */
  city?: InputMaybe<Scalars['String']>;
  /** The customer's company. */
  company?: InputMaybe<Scalars['String']>;
  /** The two-letter code representing the customer's country. */
  country_code?: InputMaybe<CountryCodeEnum>;
  /** Deprecated: use `country_code` instead. */
  country_id?: InputMaybe<CountryCodeEnum>;
  /** Deprecated: Custom attributes should not be put into container. */
  custom_attributes?: InputMaybe<Array<InputMaybe<CustomerAddressAttributeInput>>>;
  /** Indicates whether the address is the default billing address. */
  default_billing?: InputMaybe<Scalars['Boolean']>;
  /** Indicates whether the address is the default shipping address. */
  default_shipping?: InputMaybe<Scalars['Boolean']>;
  /** The customer's fax number. */
  fax?: InputMaybe<Scalars['String']>;
  /** The first name of the person associated with the billing/shipping address. */
  firstname?: InputMaybe<Scalars['String']>;
  /** The family name of the person associated with the billing/shipping address. */
  lastname?: InputMaybe<Scalars['String']>;
  /** The middle name of the person associated with the billing/shipping address. */
  middlename?: InputMaybe<Scalars['String']>;
  /** The customer's ZIP or postal code. */
  postcode?: InputMaybe<Scalars['String']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: InputMaybe<Scalars['String']>;
  /** An object containing the region name, region code, and region ID. */
  region?: InputMaybe<CustomerAddressRegionInput>;
  /** An array of strings that define the street number and name. */
  street?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** A value such as Sr., Jr., or III. */
  suffix?: InputMaybe<Scalars['String']>;
  /** The customer's telephone number. */
  telephone?: InputMaybe<Scalars['String']>;
  /** The customer's Tax/VAT number (for corporate customers). */
  vat_id?: InputMaybe<Scalars['String']>;
};

/** Defines the customer's state or province. */
export type CustomerAddressRegion = {
  __typename?: 'CustomerAddressRegion';
  /** The state or province name. */
  region?: Maybe<Scalars['String']>;
  /** The address region code. */
  region_code?: Maybe<Scalars['String']>;
  /** The unique ID for a pre-defined region. */
  region_id?: Maybe<Scalars['Int']>;
};

/** Defines the customer's state or province. */
export type CustomerAddressRegionInput = {
  /** The state or province name. */
  region?: InputMaybe<Scalars['String']>;
  /** The address region code. */
  region_code?: InputMaybe<Scalars['String']>;
  /** The unique ID for a pre-defined region. */
  region_id?: InputMaybe<Scalars['Int']>;
};

/** An input object for creating a customer. */
export type CustomerCreateInput = {
  /** Indicates whether the customer has enabled remote shopping assistance. */
  allow_remote_shopping_assistance?: InputMaybe<Scalars['Boolean']>;
  /** The customer's date of birth. */
  date_of_birth?: InputMaybe<Scalars['String']>;
  /** Deprecated: Use `date_of_birth` instead. */
  dob?: InputMaybe<Scalars['String']>;
  /** The customer's email address. */
  email: Scalars['String'];
  /** The customer's first name. */
  firstname: Scalars['String'];
  /** The customer's gender (Male - 1, Female - 2). */
  gender?: InputMaybe<Scalars['Int']>;
  /** Indicates whether the customer is subscribed to the company's newsletter. */
  is_subscribed?: InputMaybe<Scalars['Boolean']>;
  /** The customer's family name. */
  lastname: Scalars['String'];
  /** The customer's middle name. */
  middlename?: InputMaybe<Scalars['String']>;
  /** The customer's password. */
  password?: InputMaybe<Scalars['String']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: InputMaybe<Scalars['String']>;
  /** A value such as Sr., Jr., or III. */
  suffix?: InputMaybe<Scalars['String']>;
  /** The customer's Tax/VAT number (for corporate customers). */
  taxvat?: InputMaybe<Scalars['String']>;
};

/** Contains details about a single downloadable product. */
export type CustomerDownloadableProduct = {
  __typename?: 'CustomerDownloadableProduct';
  /** The date and time the purchase was made. */
  date?: Maybe<Scalars['String']>;
  /** The fully qualified URL to the download file. */
  download_url?: Maybe<Scalars['String']>;
  /** The unique ID assigned to the item. */
  order_increment_id?: Maybe<Scalars['String']>;
  /** The remaining number of times the customer can download the product. */
  remaining_downloads?: Maybe<Scalars['String']>;
  /** Indicates when the product becomes available for download. Options are `Pending` and `Invoiced`. */
  status?: Maybe<Scalars['String']>;
};

/** Contains a list of downloadable products. */
export type CustomerDownloadableProducts = {
  __typename?: 'CustomerDownloadableProducts';
  /** An array of purchased downloadable items. */
  items?: Maybe<Array<Maybe<CustomerDownloadableProduct>>>;
};

/** An input object that assigns or updates customer attributes. */
export type CustomerInput = {
  /** The customer's date of birth. */
  date_of_birth?: InputMaybe<Scalars['String']>;
  /** Deprecated: Use `date_of_birth` instead. */
  dob?: InputMaybe<Scalars['String']>;
  /** The customer's email address. Required when creating a customer. */
  email?: InputMaybe<Scalars['String']>;
  /** The customer's first name. */
  firstname?: InputMaybe<Scalars['String']>;
  /** The customer's gender (Male - 1, Female - 2). */
  gender?: InputMaybe<Scalars['Int']>;
  /** Indicates whether the customer is subscribed to the company's newsletter. */
  is_subscribed?: InputMaybe<Scalars['Boolean']>;
  /** The customer's family name. */
  lastname?: InputMaybe<Scalars['String']>;
  /** The customer's middle name. */
  middlename?: InputMaybe<Scalars['String']>;
  /** The customer's password. */
  password?: InputMaybe<Scalars['String']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: InputMaybe<Scalars['String']>;
  /** A value such as Sr., Jr., or III. */
  suffix?: InputMaybe<Scalars['String']>;
  /** The customer's Tax/VAT number (for corporate customers). */
  taxvat?: InputMaybe<Scalars['String']>;
};

/** Contains details about each of the customer's orders. */
export type CustomerOrder = {
  __typename?: 'CustomerOrder';
  /** The billing address for the order. */
  billing_address?: Maybe<OrderAddress>;
  /** The shipping carrier for the order delivery. */
  carrier?: Maybe<Scalars['String']>;
  /** Comments about the order. */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
  /** @deprecated Use the `order_date` field instead. */
  created_at?: Maybe<Scalars['String']>;
  /** A list of credit memos. */
  credit_memos?: Maybe<Array<Maybe<CreditMemo>>>;
  /** The entered gift message for the order */
  gift_message?: Maybe<GiftMessage>;
  /** @deprecated Use the `totals.grand_total` field instead. */
  grand_total?: Maybe<Scalars['Float']>;
  /** The unique ID for a `CustomerOrder` object. */
  id: Scalars['ID'];
  /** @deprecated Use the `id` field instead. */
  increment_id?: Maybe<Scalars['String']>;
  /** A list of invoices for the order. */
  invoices: Array<Maybe<Invoice>>;
  /** An array containing the items purchased in this order. */
  items?: Maybe<Array<Maybe<OrderItemInterface>>>;
  /** The order number. */
  number: Scalars['String'];
  /** The date the order was placed. */
  order_date: Scalars['String'];
  /** @deprecated Use the `number` field instead. */
  order_number: Scalars['String'];
  /** Payment details for the order. */
  payment_methods?: Maybe<Array<Maybe<OrderPaymentMethod>>>;
  /** A list of shipments for the order. */
  shipments?: Maybe<Array<Maybe<OrderShipment>>>;
  /** The shipping address for the order. */
  shipping_address?: Maybe<OrderAddress>;
  /** The delivery method for the order. */
  shipping_method?: Maybe<Scalars['String']>;
  /** The current status of the order. */
  status: Scalars['String'];
  /** Details about the calculated totals for this order. */
  total?: Maybe<OrderTotal>;
};

/** The collection of orders that match the conditions defined in the filter. */
export type CustomerOrders = {
  __typename?: 'CustomerOrders';
  /** An array of customer orders. */
  items: Array<Maybe<CustomerOrder>>;
  /** Contains pagination metadata. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** The total count of customer orders. */
  total_count?: Maybe<Scalars['Int']>;
};

/** Identifies the filter to use for filtering orders. */
export type CustomerOrdersFilterInput = {
  /** Filters by order number. */
  number?: InputMaybe<FilterStringTypeInput>;
};

/** Contains details about a newly-created or updated customer. */
export type CustomerOutput = {
  __typename?: 'CustomerOutput';
  /** Customer details after creating or updating a customer. */
  customer: Customer;
};

/** Contains payment tokens stored in the customer's vault. */
export type CustomerPaymentTokens = {
  __typename?: 'CustomerPaymentTokens';
  /** An array of payment tokens. */
  items: Array<Maybe<PaymentToken>>;
};

/** Contains a customer authorization token. */
export type CustomerToken = {
  __typename?: 'CustomerToken';
  /** The customer authorization token. */
  token?: Maybe<Scalars['String']>;
};

/** An input object for updating a customer. */
export type CustomerUpdateInput = {
  /** Indicates whether the customer has enabled remote shopping assistance. */
  allow_remote_shopping_assistance?: InputMaybe<Scalars['Boolean']>;
  /** The customer's date of birth. */
  date_of_birth?: InputMaybe<Scalars['String']>;
  /** Deprecated: Use `date_of_birth` instead. */
  dob?: InputMaybe<Scalars['String']>;
  /** The customer's first name. */
  firstname?: InputMaybe<Scalars['String']>;
  /** The customer's gender (Male - 1, Female - 2). */
  gender?: InputMaybe<Scalars['Int']>;
  /** Indicates whether the customer is subscribed to the company's newsletter. */
  is_subscribed?: InputMaybe<Scalars['Boolean']>;
  /** The customer's family name. */
  lastname?: InputMaybe<Scalars['String']>;
  /** The customer's middle name. */
  middlename?: InputMaybe<Scalars['String']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: InputMaybe<Scalars['String']>;
  /** A value such as Sr., Jr., or III. */
  suffix?: InputMaybe<Scalars['String']>;
  /** The customer's Tax/VAT number (for corporate customers). */
  taxvat?: InputMaybe<Scalars['String']>;
};

/** Contains information about a text area that is defined as part of a customizable option. */
export type CustomizableAreaOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableAreaOption';
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An object that defines a text area. */
  value?: Maybe<CustomizableAreaValue>;
};

/** Defines the price and sku of a product whose page contains a customized text area. */
export type CustomizableAreaValue = {
  __typename?: 'CustomizableAreaValue';
  /** The maximum number of characters that can be entered for this customizable option. */
  max_characters?: Maybe<Scalars['Int']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableAreaValue` object. */
  uid: Scalars['ID'];
};

/** Contains information about a set of checkbox values that are defined as part of a customizable option. */
export type CustomizableCheckboxOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableCheckboxOption';
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An array that defines a set of checkbox values. */
  value?: Maybe<Array<Maybe<CustomizableCheckboxValue>>>;
};

/** Defines the price and sku of a product whose page contains a customized set of checkbox values. */
export type CustomizableCheckboxValue = {
  __typename?: 'CustomizableCheckboxValue';
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The order in which the checkbox value is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableCheckboxValue` object. */
  uid: Scalars['ID'];
};

/** Contains information about a date picker that is defined as part of a customizable option. */
export type CustomizableDateOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableDateOption';
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An object that defines a date field in a customizable option. */
  value?: Maybe<CustomizableDateValue>;
};

/** Defines the customizable date type. */
export enum CustomizableDateTypeEnum {
  /** @deprecated  */
  Date = 'DATE',
  /** @deprecated  */
  DateTime = 'DATE_TIME',
  /** @deprecated  */
  Time = 'TIME'
}

/** Defines the price and sku of a product whose page contains a customized date picker. */
export type CustomizableDateValue = {
  __typename?: 'CustomizableDateValue';
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** DATE, DATE_TIME or TIME */
  type?: Maybe<CustomizableDateTypeEnum>;
  /** The unique ID for a `CustomizableDateValue` object. */
  uid: Scalars['ID'];
};

/** Contains information about a drop down menu that is defined as part of a customizable option. */
export type CustomizableDropDownOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableDropDownOption';
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An array that defines the set of options for a drop down menu. */
  value?: Maybe<Array<Maybe<CustomizableDropDownValue>>>;
};

/** Defines the price and sku of a product whose page contains a customized drop down menu. */
export type CustomizableDropDownValue = {
  __typename?: 'CustomizableDropDownValue';
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableDropDownValue` object. */
  uid: Scalars['ID'];
};

/** Contains information about a text field that is defined as part of a customizable option. */
export type CustomizableFieldOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableFieldOption';
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An object that defines a text field. */
  value?: Maybe<CustomizableFieldValue>;
};

/** Defines the price and sku of a product whose page contains a customized text field. */
export type CustomizableFieldValue = {
  __typename?: 'CustomizableFieldValue';
  /** The maximum number of characters that can be entered for this customizable option. */
  max_characters?: Maybe<Scalars['Int']>;
  /** The price of the custom value. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableFieldValue` object. */
  uid: Scalars['ID'];
};

/** Contains information about a file picker that is defined as part of a customizable option. */
export type CustomizableFileOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableFileOption';
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An object that defines a file value. */
  value?: Maybe<CustomizableFileValue>;
};

/** Defines the price and sku of a product whose page contains a customized file picker. */
export type CustomizableFileValue = {
  __typename?: 'CustomizableFileValue';
  /** The file extension to accept. */
  file_extension?: Maybe<Scalars['String']>;
  /** The maximum width of an image. */
  image_size_x?: Maybe<Scalars['Int']>;
  /** The maximum height of an image. */
  image_size_y?: Maybe<Scalars['Int']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableFileValue` object. */
  uid: Scalars['ID'];
};

/** Contains information about a multiselect that is defined as part of a customizable option. */
export type CustomizableMultipleOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableMultipleOption';
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An array that defines the set of options for a multiselect. */
  value?: Maybe<Array<Maybe<CustomizableMultipleValue>>>;
};

/** Defines the price and sku of a product whose page contains a customized multiselect. */
export type CustomizableMultipleValue = {
  __typename?: 'CustomizableMultipleValue';
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableMultipleValue` object. */
  uid: Scalars['ID'];
};

/** Defines a customizable option. */
export type CustomizableOptionInput = {
  /** The customizable option ID of the product. */
  id?: InputMaybe<Scalars['Int']>;
  /** The string value of the option. */
  value_string: Scalars['String'];
};

/** Contains basic information about a customizable option. It can be implemented by several types of configurable options. */
export type CustomizableOptionInterface = {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
};

/** Contains information about customizable product options. */
export type CustomizableProductInterface = {
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
};

/** Contains information about a set of radio buttons that are defined as part of a customizable option. */
export type CustomizableRadioOption = CustomizableOptionInterface & {
  __typename?: 'CustomizableRadioOption';
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An array that defines a set of radio buttons. */
  value?: Maybe<Array<Maybe<CustomizableRadioValue>>>;
};

/** Defines the price and sku of a product whose page contains a customized set of radio buttons. */
export type CustomizableRadioValue = {
  __typename?: 'CustomizableRadioValue';
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The order in which the radio button is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableRadioValue` object. */
  uid: Scalars['ID'];
};

/** Contains the results of the request to delete a compare list. */
export type DeleteCompareListOutput = {
  __typename?: 'DeleteCompareListOutput';
  /** Indicates whether the compare list was successfully deleted. */
  result: Scalars['Boolean'];
};

/** Indicates whether the request succeeded and returns the remaining customer payment tokens. */
export type DeletePaymentTokenOutput = {
  __typename?: 'DeletePaymentTokenOutput';
  /** A container for the customer's remaining payment tokens. */
  customerPaymentTokens?: Maybe<CustomerPaymentTokens>;
  /** Indicates whether the request succeeded. */
  result: Scalars['Boolean'];
};

/** Defines an individual discount. A discount can be applied to the cart as a whole or to an item. */
export type Discount = {
  __typename?: 'Discount';
  /** The amount of the discount. */
  amount: Money;
  /** A description of the discount. */
  label: Scalars['String'];
};

/** An implementation for downloadable product cart items. */
export type DownloadableCartItem = CartItemInterface & {
  __typename?: 'DownloadableCartItem';
  /** An array containing the customizable options the shopper selected. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** An array of errors encountered while loading the cart item */
  errors?: Maybe<Array<Maybe<CartItemError>>>;
  /** @deprecated Use `uid` instead. */
  id: Scalars['String'];
  /** An array containing information about the links for the downloadable product added to the cart. */
  links?: Maybe<Array<Maybe<DownloadableProductLinks>>>;
  /** Contains details about the price of the item, including taxes and discounts. */
  prices?: Maybe<CartItemPrices>;
  /** Details about an item in the cart. */
  product: ProductInterface;
  /** The quantity of this item in the cart. */
  quantity: Scalars['Float'];
  /** An array containing information about samples of the selected downloadable product. */
  samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>;
  /** The unique ID for a `CartItemInterface` object. */
  uid: Scalars['ID'];
};

/** Defines downloadable product options for `CreditMemoItemInterface`. */
export type DownloadableCreditMemoItem = CreditMemoItemInterface & {
  __typename?: 'DownloadableCreditMemoItem';
  /** Details about the final discount amount for the base product, including discounts on options. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** A list of downloadable links that are refunded from the downloadable product. */
  downloadable_links?: Maybe<Array<Maybe<DownloadableItemsLinks>>>;
  /** The unique ID for a `CreditMemoItemInterface` object. */
  id: Scalars['ID'];
  /** The order item the credit memo is applied to. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product, including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String'];
  /** The number of refunded items. */
  quantity_refunded?: Maybe<Scalars['Float']>;
};

export enum DownloadableFileTypeEnum {
  /** @deprecated `sample_url` serves to get the downloadable sample */
  File = 'FILE',
  /** @deprecated `sample_url` serves to get the downloadable sample */
  Url = 'URL'
}

/** Defines downloadable product options for `InvoiceItemInterface`. */
export type DownloadableInvoiceItem = InvoiceItemInterface & {
  __typename?: 'DownloadableInvoiceItem';
  /** Information about the final discount amount for the base product, including discounts on options. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** A list of downloadable links that are invoiced from the downloadable product. */
  downloadable_links?: Maybe<Array<Maybe<DownloadableItemsLinks>>>;
  /** The unique ID for an `InvoiceItemInterface` object. */
  id: Scalars['ID'];
  /** Details about an individual order item. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String'];
  /** The number of invoiced items. */
  quantity_invoiced?: Maybe<Scalars['Float']>;
};

/** Defines characteristics of the links for downloadable product. */
export type DownloadableItemsLinks = {
  __typename?: 'DownloadableItemsLinks';
  /** A number indicating the sort order. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name of the link. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `DownloadableItemsLinks` object. */
  uid: Scalars['ID'];
};

/** Defines downloadable product options for `OrderItemInterface`. */
export type DownloadableOrderItem = OrderItemInterface & {
  __typename?: 'DownloadableOrderItem';
  /** The final discount information for the product. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** A list of downloadable links that are ordered from the downloadable product. */
  downloadable_links?: Maybe<Array<Maybe<DownloadableItemsLinks>>>;
  /** The entered option for the base product, such as a logo or image. */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The unique ID for an `OrderItemInterface` object. */
  id: Scalars['ID'];
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price of the base product, including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String'];
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']>;
  /** URL key of the base product. */
  product_url_key?: Maybe<Scalars['String']>;
  /** The number of canceled items. */
  quantity_canceled?: Maybe<Scalars['Float']>;
  /** The number of invoiced items. */
  quantity_invoiced?: Maybe<Scalars['Float']>;
  /** The number of units ordered for this item. */
  quantity_ordered?: Maybe<Scalars['Float']>;
  /** The number of refunded items. */
  quantity_refunded?: Maybe<Scalars['Float']>;
  /** The number of returned items. */
  quantity_returned?: Maybe<Scalars['Float']>;
  /** The number of shipped items. */
  quantity_shipped?: Maybe<Scalars['Float']>;
  /** The selected options for the base product, such as color or size. */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The status of the order item. */
  status?: Maybe<Scalars['String']>;
};

/** Defines a product that the shopper downloads. */
export type DownloadableProduct = CustomizableProductInterface & ProductInterface & RoutableInterface & {
  __typename?: 'DownloadableProduct';
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  /** The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled. */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  color?: Maybe<Scalars['Int']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  /** An array containing information about the links for this downloadable product. */
  downloadable_product_links?: Maybe<Array<Maybe<DownloadableProductLinks>>>;
  /** An array containing information about samples of this downloadable product. */
  downloadable_product_samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  /** A value of 1 indicates that each link in the array must be purchased separately. */
  links_purchased_separately?: Maybe<Scalars['Int']>;
  /** The heading above the list of downloadable products. */
  links_title?: Maybe<Scalars['String']>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  /** An array of media gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use `media_gallery` instead.
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  /**
   * Indicates the price of an item.
   * @deprecated Use `price_range` for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** The range of prices for the product */
  price_range: PriceRange;
  /** An array of `TierPrice` objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  /** An array of `ProductLinks` objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int'];
  /** An array of products to be displayed in a Related Products block. */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date for a product with a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  /** The file name of a swatch image. */
  swatch_image?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use `__typename` instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
};


/** Defines a product that the shopper downloads. */
export type DownloadableProductReviewsArgs = {
  currentPage?: InputMaybe<Scalars['Int']>;
  pageSize?: InputMaybe<Scalars['Int']>;
};

/** Defines a single downloadable product. */
export type DownloadableProductCartItemInput = {
  /** The ID and value of the option. */
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  /** The quantity and SKU of the downloadable product. */
  data: CartItemInput;
  /** An array of objects containing the link_id of the downloadable product link. */
  downloadable_product_links?: InputMaybe<Array<InputMaybe<DownloadableProductLinksInput>>>;
};

/** Defines characteristics of a downloadable product. */
export type DownloadableProductLinks = {
  __typename?: 'DownloadableProductLinks';
  /** @deprecated This information should not be exposed on frontend. */
  id?: Maybe<Scalars['Int']>;
  /** @deprecated This information should not be exposed on frontend. */
  is_shareable?: Maybe<Scalars['Boolean']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  link_type?: Maybe<DownloadableFileTypeEnum>;
  /** @deprecated This information should not be exposed on frontend. */
  number_of_downloads?: Maybe<Scalars['Int']>;
  /** The price of the downloadable product. */
  price?: Maybe<Scalars['Float']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_file?: Maybe<Scalars['String']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_type?: Maybe<DownloadableFileTypeEnum>;
  /** The full URL to the downloadable sample. */
  sample_url?: Maybe<Scalars['String']>;
  /** A number indicating the sort order. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name of the link. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `DownloadableProductLinks` object. */
  uid: Scalars['ID'];
};

/** Contains the link ID for the downloadable product. */
export type DownloadableProductLinksInput = {
  /** The unique ID of the downloadable product link. */
  link_id: Scalars['Int'];
};

/** Defines characteristics of a downloadable product. */
export type DownloadableProductSamples = {
  __typename?: 'DownloadableProductSamples';
  /** @deprecated This information should not be exposed on frontend. */
  id?: Maybe<Scalars['Int']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_file?: Maybe<Scalars['String']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_type?: Maybe<DownloadableFileTypeEnum>;
  /** The full URL to the downloadable sample. */
  sample_url?: Maybe<Scalars['String']>;
  /** A number indicating the sort order. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name of the sample. */
  title?: Maybe<Scalars['String']>;
};

/** A downloadable product wish list item. */
export type DownloadableWishlistItem = WishlistItemInterface & {
  __typename?: 'DownloadableWishlistItem';
  /** The date and time the item was added to the wish list. */
  added_at: Scalars['String'];
  /** Custom options selected for the wish list item. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item. */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object. */
  id: Scalars['ID'];
  /** An array containing information about the selected links. */
  links_v2?: Maybe<Array<Maybe<DownloadableProductLinks>>>;
  /** Product details of the wish list item. */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item. */
  quantity: Scalars['Float'];
  /** An array containing information about the selected samples. */
  samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>;
};

/** Defines a customer-entered option. */
export type EnteredOptionInput = {
  /** The unique ID for a `CustomizableOptionInterface` object, such as a `CustomizableFieldOption`, `CustomizableFileOption`, or `CustomizableAreaOption` object. */
  uid: Scalars['ID'];
  /** Text the customer entered. */
  value: Scalars['String'];
};

/** Contains the `uid`, `relative_url`, and `type` attributes. */
export type EntityUrl = {
  __typename?: 'EntityUrl';
  /** @deprecated Use `relative_url` instead. */
  canonical_url?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface`, `CategoryInterface`, `CmsPage`, or similar object associated with the specified URL. This could be a product, category, or CMS page UID. */
  entity_uid?: Maybe<Scalars['ID']>;
  /**
   * The ID assigned to the object associated with the specified url. This could be a product ID, category ID, or page ID.
   * @deprecated Use `entity_uid` instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirectCode?: Maybe<Scalars['Int']>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
};

export type ErrorInterface = {
  /** The returned error message. */
  message: Scalars['String'];
};

/** Lists the exchange rate. */
export type ExchangeRate = {
  __typename?: 'ExchangeRate';
  /** Specifies the store’s default currency to exchange to. */
  currency_to?: Maybe<Scalars['String']>;
  /** The exchange rate for the store’s default currency. */
  rate?: Maybe<Scalars['Float']>;
};

/** Defines a filter that matches the input exactly. */
export type FilterEqualTypeInput = {
  /** Use this attribute to exactly match the specified string. For example, to filter on a specific category ID, specify a value such as `5`. */
  eq?: InputMaybe<Scalars['String']>;
  /** Use this attribute to filter on an array of values. For example, to filter on category IDs 4, 5, and 6, specify a value of `["4", "5", "6"]`. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

/** Defines a filter that performs a fuzzy search. */
export type FilterMatchTypeInput = {
  /** Use this attribute to exactly match the specified string. For example, to filter on a specific SKU, specify a value such as `24-MB01`. */
  match?: InputMaybe<Scalars['String']>;
};

/** Defines a filter that matches a range of values, such as prices or dates. */
export type FilterRangeTypeInput = {
  /** Use this attribute to specify the lowest possible value in the range. */
  from?: InputMaybe<Scalars['String']>;
  /** Use this attribute to specify the highest possible value in the range. */
  to?: InputMaybe<Scalars['String']>;
};

/** Defines a filter for an input string. */
export type FilterStringTypeInput = {
  /** Filters items that are exactly the same as the specified string. */
  eq?: InputMaybe<Scalars['String']>;
  /** Filters items that are exactly the same as entries specified in an array of strings. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Defines a filter that performs a fuzzy search using the specified string. */
  match?: InputMaybe<Scalars['String']>;
};

/** Defines the comparison operators that can be used in a filter. */
export type FilterTypeInput = {
  /** Equals. */
  eq?: InputMaybe<Scalars['String']>;
  finset?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** From. Must be used with the `to` field. */
  from?: InputMaybe<Scalars['String']>;
  /** Greater than. */
  gt?: InputMaybe<Scalars['String']>;
  /** Greater than or equal to. */
  gteq?: InputMaybe<Scalars['String']>;
  /** In. The value can contain a set of comma-separated values. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Like. The specified value can contain % (percent signs) to allow matching of 0 or more characters. */
  like?: InputMaybe<Scalars['String']>;
  /** Less than. */
  lt?: InputMaybe<Scalars['String']>;
  /** Less than or equal to. */
  lteq?: InputMaybe<Scalars['String']>;
  /** More than or equal to. */
  moreq?: InputMaybe<Scalars['String']>;
  /** Not equal to. */
  neq?: InputMaybe<Scalars['String']>;
  /** Not in. The value can contain a set of comma-separated values. */
  nin?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Not null. */
  notnull?: InputMaybe<Scalars['String']>;
  /** Is null. */
  null?: InputMaybe<Scalars['String']>;
  /** To. Must be used with the `from` field. */
  to?: InputMaybe<Scalars['String']>;
};

/** A single FPT that can be applied to a product price. */
export type FixedProductTax = {
  __typename?: 'FixedProductTax';
  /** The amount of the Fixed Product Tax. */
  amount?: Maybe<Money>;
  /** The display label assigned to the Fixed Product Tax. */
  label?: Maybe<Scalars['String']>;
};

/** Lists display settings for the Fixed Product Tax. */
export enum FixedProductTaxDisplaySettings {
  /**
   * The displayed price does not include the FPT amount. The values of `ProductPrice.fixed_product_taxes` and the price including the FPT are displayed separately. This value corresponds to 'Excluding FPT, Including FPT description and final price.'
   * @deprecated
   */
  ExcludeFptAndIncludeWithDetails = 'EXCLUDE_FPT_AND_INCLUDE_WITH_DETAILS',
  /**
   * The displayed price does not include the FPT amount. The values from `ProductPrice.fixed_product_taxes` are not displayed. This value corresponds to 'Excluding FPT'.
   * @deprecated
   */
  ExcludeFptWithoutDetails = 'EXCLUDE_FPT_WITHOUT_DETAILS',
  /**
   * The FPT feature is not enabled. You can omit `ProductPrice.fixed_product_taxes` from your query.
   * @deprecated
   */
  FptDisabled = 'FPT_DISABLED',
  /**
   * The displayed price includes the FPT amount without displaying the `ProductPrice.fixed_product_taxes` values. This value corresponds to 'Including FPT only'.
   * @deprecated
   */
  IncludeFptWithoutDetails = 'INCLUDE_FPT_WITHOUT_DETAILS',
  /**
   * The displayed price includes the FPT amount while displaying the values of `ProductPrice.fixed_product_taxes` separately. This value corresponds to 'Including FPT and FPT description'.
   * @deprecated
   */
  IncludeFptWithDetails = 'INCLUDE_FPT_WITH_DETAILS'
}

/** Identifies which customer requires remote shopping assistance. */
export type GenerateCustomerTokenAsAdminInput = {
  /** The email address of the customer requesting remote shopping assistance. */
  customer_email: Scalars['String'];
};

/** Contains the generated customer token. */
export type GenerateCustomerTokenAsAdminOutput = {
  __typename?: 'GenerateCustomerTokenAsAdminOutput';
  /** The generated customer token. */
  customer_token: Scalars['String'];
};

/** Contains the text of a gift message, its sender, and recipient */
export type GiftMessage = {
  __typename?: 'GiftMessage';
  /** Sender name */
  from: Scalars['String'];
  /** Gift message text */
  message: Scalars['String'];
  /** Recipient name */
  to: Scalars['String'];
};

/** Contains the text of a gift message, its sender, and recipient */
export type GiftMessageInput = {
  /** Sender name */
  from: Scalars['String'];
  /** Gift message text */
  message: Scalars['String'];
  /** Recipient name */
  to: Scalars['String'];
};

/** Defines a grouped product, which consists of simple standalone products that are presented as a group. */
export type GroupedProduct = PhysicalProductInterface & ProductInterface & RoutableInterface & {
  __typename?: 'GroupedProduct';
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  /** The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled. */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  color?: Maybe<Scalars['Int']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  /** An array containing grouped product items. */
  items?: Maybe<Array<Maybe<GroupedProductItem>>>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  /** An array of media gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use `media_gallery` instead.
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  /**
   * Indicates the price of an item.
   * @deprecated Use `price_range` for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** The range of prices for the product */
  price_range: PriceRange;
  /** An array of `TierPrice` objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  /** An array of `ProductLinks` objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int'];
  /** An array of products to be displayed in a Related Products block. */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date for a product with a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  /** The file name of a swatch image. */
  swatch_image?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use `__typename` instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']>;
};


/** Defines a grouped product, which consists of simple standalone products that are presented as a group. */
export type GroupedProductReviewsArgs = {
  currentPage?: InputMaybe<Scalars['Int']>;
  pageSize?: InputMaybe<Scalars['Int']>;
};

/** Contains information about an individual grouped product item. */
export type GroupedProductItem = {
  __typename?: 'GroupedProductItem';
  /** The relative position of this item compared to the other group items. */
  position?: Maybe<Scalars['Int']>;
  /** Details about this product option. */
  product?: Maybe<ProductInterface>;
  /** The quantity of this grouped product item. */
  qty?: Maybe<Scalars['Float']>;
};

/** A grouped product wish list item. */
export type GroupedProductWishlistItem = WishlistItemInterface & {
  __typename?: 'GroupedProductWishlistItem';
  /** The date and time the item was added to the wish list. */
  added_at: Scalars['String'];
  /** Custom options selected for the wish list item. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item. */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object. */
  id: Scalars['ID'];
  /** Product details of the wish list item. */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item. */
  quantity: Scalars['Float'];
};

/** Contains a set of relative URLs that PayPal uses in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payments Pro Hosted Solution payment method. */
export type HostedProInput = {
  /** The relative URL of the page that PayPal redirects to when the buyer cancels the transaction in order to choose a different payment method. For example, if the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String'];
  /** The relative URL of the final confirmation page that PayPal redirects to upon payment success. For example, if the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String'];
};

/** Contains the secure URL used for the Payments Pro Hosted Solution payment method. */
export type HostedProUrl = {
  __typename?: 'HostedProUrl';
  /** The secure URL generated by PayPal. */
  secure_form_url?: Maybe<Scalars['String']>;
};

/** Contains the required input to request the secure URL for Payments Pro Hosted Solution payment. */
export type HostedProUrlInput = {
  /** The unique ID that identifies the shopper's cart. */
  cart_id: Scalars['String'];
};

/** Contains target path parameters. */
export type HttpQueryParameter = {
  __typename?: 'HttpQueryParameter';
  /** A parameter name. */
  name?: Maybe<Scalars['String']>;
  /** A parameter value. */
  value?: Maybe<Scalars['String']>;
};

export type ImageSwatchData = SwatchDataInterface & {
  __typename?: 'ImageSwatchData';
  /** The URL assigned to the thumbnail of the swatch image. */
  thumbnail?: Maybe<Scalars['String']>;
  /** The value can be represented as color (HEX code), image link, or text. */
  value?: Maybe<Scalars['String']>;
};

/** Contains an error message when an internal error occurred. */
export type InternalError = ErrorInterface & {
  __typename?: 'InternalError';
  /** The returned error message. */
  message: Scalars['String'];
};

/** Contains invoice details. */
export type Invoice = {
  __typename?: 'Invoice';
  /** Comments on the invoice. */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
  /** The unique ID for a `Invoice` object. */
  id: Scalars['ID'];
  /** Invoiced product details. */
  items?: Maybe<Array<Maybe<InvoiceItemInterface>>>;
  /** Sequential invoice number. */
  number: Scalars['String'];
  /** Invoice total amount details. */
  total?: Maybe<InvoiceTotal>;
};

export type InvoiceItem = InvoiceItemInterface & {
  __typename?: 'InvoiceItem';
  /** Information about the final discount amount for the base product, including discounts on options. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for an `InvoiceItemInterface` object. */
  id: Scalars['ID'];
  /** Details about an individual order item. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String'];
  /** The number of invoiced items. */
  quantity_invoiced?: Maybe<Scalars['Float']>;
};

/** Contains detailes about invoiced items. */
export type InvoiceItemInterface = {
  /** Information about the final discount amount for the base product, including discounts on options. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for an `InvoiceItemInterface` object. */
  id: Scalars['ID'];
  /** Details about an individual order item. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String'];
  /** The number of invoiced items. */
  quantity_invoiced?: Maybe<Scalars['Float']>;
};

/** Contains price details from an invoice. */
export type InvoiceTotal = {
  __typename?: 'InvoiceTotal';
  /** The final base grand total amount in the base currency. */
  base_grand_total: Money;
  /** The applied discounts to the invoice. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The final total amount, including shipping, discounts, and taxes. */
  grand_total: Money;
  /** Details about the shipping and handling costs for the invoice. */
  shipping_handling?: Maybe<ShippingHandling>;
  /** The subtotal of the invoice, excluding shipping, discounts, and taxes. */
  subtotal: Money;
  /** The invoice tax details. */
  taxes?: Maybe<Array<Maybe<TaxItem>>>;
  /** The shipping amount for the invoice. */
  total_shipping: Money;
  /** The amount of tax applied to the invoice. */
  total_tax: Money;
};

/** Contains the result of the `isEmailAvailable` query. */
export type IsEmailAvailableOutput = {
  __typename?: 'IsEmailAvailableOutput';
  /** Indicates whether the specified email address can be used to create a customer. */
  is_email_available?: Maybe<Scalars['Boolean']>;
};

/** A list of options of the selected bundle product. */
export type ItemSelectedBundleOption = {
  __typename?: 'ItemSelectedBundleOption';
  /**
   * The unique ID for a `ItemSelectedBundleOption` object.
   * @deprecated Use `uid` instead.
   */
  id: Scalars['ID'];
  /** The label of the option. */
  label: Scalars['String'];
  /** The unique ID for a `ItemSelectedBundleOption` object. */
  uid: Scalars['ID'];
  /** A list of products that represent the values of the parent option. */
  values?: Maybe<Array<Maybe<ItemSelectedBundleOptionValue>>>;
};

/** A list of values for the selected bundle product. */
export type ItemSelectedBundleOptionValue = {
  __typename?: 'ItemSelectedBundleOptionValue';
  /**
   * The unique ID for a `ItemSelectedBundleOptionValue` object.
   * @deprecated Use `uid` instead.
   */
  id: Scalars['ID'];
  /** The price of the child bundle product. */
  price: Money;
  /** The name of the child bundle product. */
  product_name: Scalars['String'];
  /** The SKU of the child bundle product. */
  product_sku: Scalars['String'];
  /** The number of this bundle product that were ordered. */
  quantity: Scalars['Float'];
  /** The unique ID for a `ItemSelectedBundleOptionValue` object. */
  uid: Scalars['ID'];
};

/** Contains a key-value pair. */
export type KeyValue = {
  __typename?: 'KeyValue';
  /** The name part of the key/value pair. */
  name?: Maybe<Scalars['String']>;
  /** The value part of the key/value pair. */
  value?: Maybe<Scalars['String']>;
};

/** Contains information for rendering layered navigation. */
export type LayerFilter = {
  __typename?: 'LayerFilter';
  /**
   * An array of filter items.
   * @deprecated Use `Aggregation.options` instead.
   */
  filter_items?: Maybe<Array<Maybe<LayerFilterItemInterface>>>;
  /**
   * The count of filter items in filter group.
   * @deprecated Use `Aggregation.count` instead.
   */
  filter_items_count?: Maybe<Scalars['Int']>;
  /**
   * The name of a layered navigation filter.
   * @deprecated Use `Aggregation.label` instead.
   */
  name?: Maybe<Scalars['String']>;
  /**
   * The request variable name for a filter query.
   * @deprecated Use `Aggregation.attribute_code` instead.
   */
  request_var?: Maybe<Scalars['String']>;
};

export type LayerFilterItem = LayerFilterItemInterface & {
  __typename?: 'LayerFilterItem';
  /**
   * The count of items per filter.
   * @deprecated Use `AggregationOption.count` instead.
   */
  items_count?: Maybe<Scalars['Int']>;
  /**
   * The label for a filter.
   * @deprecated Use `AggregationOption.label` instead.
   */
  label?: Maybe<Scalars['String']>;
  /**
   * The value of a filter request variable to be used in query.
   * @deprecated Use `AggregationOption.value` instead.
   */
  value_string?: Maybe<Scalars['String']>;
};

export type LayerFilterItemInterface = {
  /**
   * The count of items per filter.
   * @deprecated Use `AggregationOption.count` instead.
   */
  items_count?: Maybe<Scalars['Int']>;
  /**
   * The label for a filter.
   * @deprecated Use `AggregationOption.label` instead.
   */
  label?: Maybe<Scalars['String']>;
  /**
   * The value of a filter request variable to be used in query.
   * @deprecated Use `AggregationOption.value` instead.
   */
  value_string?: Maybe<Scalars['String']>;
};

/** Defines characteristics about images and videos associated with a specific product. */
export type MediaGalleryEntry = {
  __typename?: 'MediaGalleryEntry';
  /** Details about the content of the media gallery item. */
  content?: Maybe<ProductMediaGalleryEntriesContent>;
  /** Indicates whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>;
  /** The path of the image on the server. */
  file?: Maybe<Scalars['String']>;
  /**
   * The identifier assigned to the object.
   * @deprecated Use `uid` instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The alt text displayed on the storefront when the user points to the image. */
  label?: Maybe<Scalars['String']>;
  /** Either `image` or `video`. */
  media_type?: Maybe<Scalars['String']>;
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>;
  /** Array of image types. It can have the following values: image, small_image, thumbnail. */
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The unique ID for a `MediaGalleryEntry` object. */
  uid: Scalars['ID'];
  /** Details about the content of a video item. */
  video_content?: Maybe<ProductMediaGalleryEntriesVideoContent>;
};

/** Contains basic information about a product image or video. */
export type MediaGalleryInterface = {
  /** Indicates whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>;
  /** The label of the product image or video. */
  label?: Maybe<Scalars['String']>;
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>;
  /** The URL of the product image or video. */
  url?: Maybe<Scalars['String']>;
};

/** Defines a monetary value, including a numeric value and a currency code. */
export type Money = {
  __typename?: 'Money';
  /** A three-letter currency code, such as USD or EUR. */
  currency?: Maybe<CurrencyEnum>;
  /** A number expressing a monetary value. */
  value?: Maybe<Scalars['Float']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Add one or more bundle products to the specified cart. We recommend using `addProductsToCart` instead. */
  addBundleProductsToCart?: Maybe<AddBundleProductsToCartOutput>;
  /** Add one or more configurable products to the specified cart. We recommend using `addProductsToCart` instead. */
  addConfigurableProductsToCart?: Maybe<AddConfigurableProductsToCartOutput>;
  /** Add one or more downloadable products to the specified cart. We recommend using `addProductsToCart` instead. */
  addDownloadableProductsToCart?: Maybe<AddDownloadableProductsToCartOutput>;
  /** Add any type of product to the cart. */
  addProductsToCart?: Maybe<AddProductsToCartOutput>;
  /** Add products to the specified compare list. */
  addProductsToCompareList?: Maybe<CompareList>;
  /** Add one or more products to the specified wish list. This mutation supports all product types. */
  addProductsToWishlist?: Maybe<AddProductsToWishlistOutput>;
  /** Add one or more simple products to the specified cart. We recommend using `addProductsToCart` instead. */
  addSimpleProductsToCart?: Maybe<AddSimpleProductsToCartOutput>;
  /** Add one or more virtual products to the specified cart. We recommend using `addProductsToCart` instead. */
  addVirtualProductsToCart?: Maybe<AddVirtualProductsToCartOutput>;
  /** Add items in the specified wishlist to the customer's cart. */
  addWishlistItemsToCart?: Maybe<AddWishlistItemsToCartOutput>;
  /** Apply a pre-defined coupon code to the specified cart. */
  applyCouponToCart?: Maybe<ApplyCouponToCartOutput>;
  /** Assign the specified compare list to the logged in customer. */
  assignCompareListToCustomer?: Maybe<AssignCompareListToCustomerOutput>;
  /** Assign a logged-in customer to the specified guest shopping cart. */
  assignCustomerToGuestCart: Cart;
  /** Change the password for the logged-in customer. */
  changeCustomerPassword?: Maybe<Customer>;
  /** Send a 'Contact Us' email to the merchant. */
  contactUs?: Maybe<ContactUsOutput>;
  /** Creates Client Token for Braintree Javascript SDK initialization. */
  createBraintreeClientToken: Scalars['String'];
  /** Create a new compare list. The compare list is saved for logged in customers. */
  createCompareList?: Maybe<CompareList>;
  /** Use `createCustomerV2` instead. */
  createCustomer?: Maybe<CustomerOutput>;
  /** Create a billing or shipping address for a customer or guest. */
  createCustomerAddress?: Maybe<CustomerAddress>;
  /** Create a customer account. */
  createCustomerV2?: Maybe<CustomerOutput>;
  /** Create an empty shopping cart for a guest or logged in user */
  createEmptyCart?: Maybe<Scalars['String']>;
  /** Initiate a transaction and receive a token. Use this mutation for Payflow Pro and Payments Pro payment methods */
  createPayflowProToken?: Maybe<CreatePayflowProTokenOutput>;
  /** Initiate an Express Checkout transaction and receive a token. Use this mutation for Express Checkout and Payments Standard payment methods. */
  createPaypalExpressToken?: Maybe<PaypalExpressTokenOutput>;
  /** Create a product review for the specified product. */
  createProductReview: CreateProductReviewOutput;
  /** Delete the specified compare list. */
  deleteCompareList?: Maybe<DeleteCompareListOutput>;
  /** Delete the billing or shipping address of a customer. */
  deleteCustomerAddress?: Maybe<Scalars['Boolean']>;
  /** Delete a customer's payment token. */
  deletePaymentToken?: Maybe<DeletePaymentTokenOutput>;
  /** Generate a token for specified customer. */
  generateCustomerToken?: Maybe<CustomerToken>;
  /** Request a customer token so that an administrator can perform remote shopping assistance. */
  generateCustomerTokenAsAdmin?: Maybe<GenerateCustomerTokenAsAdminOutput>;
  /** Handle a payment response and save the payment in Quote. Use this mutation for Payflow Pro and Payments Pro payment methods. */
  handlePayflowProResponse?: Maybe<PayflowProResponseOutput>;
  /** Transfer the contents of a guest cart into the cart of a logged-in customer. */
  mergeCarts: Cart;
  /** Convert the quote into an order. */
  placeOrder?: Maybe<PlaceOrderOutput>;
  /** Place Razorpay Order with cart amount and currency to generate RZP order ID. */
  placeRazorpayOrder?: Maybe<RazorpayOrder>;
  /** Remove a previously-applied coupon from the cart. The cart must contain at least one item in order to remove the coupon. */
  removeCouponFromCart?: Maybe<RemoveCouponFromCartOutput>;
  /** Delete the entire quantity of a specified item from the cart. If you remove all items from the cart, the cart continues to exist. */
  removeItemFromCart?: Maybe<RemoveItemFromCartOutput>;
  /** Remove products from the specified compare list. */
  removeProductsFromCompareList?: Maybe<CompareList>;
  /** Remove one or more products from the specified wish list. */
  removeProductsFromWishlist?: Maybe<RemoveProductsFromWishlistOutput>;
  /** Add all products from a customer's previous order to the cart. */
  reorderItems?: Maybe<ReorderItemsOutput>;
  /** Request an email with a reset password token for the registered customer identified by the specified email. */
  requestPasswordResetEmail?: Maybe<Scalars['Boolean']>;
  /** Reset a customer's password using the reset password token that the customer received in an email after requesting it using `requestPasswordResetEmail`. */
  resetPassword?: Maybe<Scalars['Boolean']>;
  /** Revoke the customer token. */
  revokeCustomerToken?: Maybe<RevokeCustomerTokenOutput>;
  /** Send a message on behalf of a customer to the specified email addresses. */
  sendEmailToFriend?: Maybe<SendEmailToFriendOutput>;
  /** Set the billing address on a specific cart. */
  setBillingAddressOnCart?: Maybe<SetBillingAddressOnCartOutput>;
  /** Assign the email address of a guest to the cart. */
  setGuestEmailOnCart?: Maybe<SetGuestEmailOnCartOutput>;
  /**
   * Set the cart payment method and convert the cart into an order.
   * @deprecated Should use setPaymentMethodOnCart and placeOrder mutations in single request.
   */
  setPaymentMethodAndPlaceOrder?: Maybe<PlaceOrderOutput>;
  /** Apply a payment method to the cart. */
  setPaymentMethodOnCart?: Maybe<SetPaymentMethodOnCartOutput>;
  setRzpPaymentDetailsOnCart?: Maybe<SetRzpPaymentDetailsOnCartOutput>;
  /** Set one or more shipping addresses on a specific cart. */
  setShippingAddressesOnCart?: Maybe<SetShippingAddressesOnCartOutput>;
  /** Set one or more delivery methods on a cart. */
  setShippingMethodsOnCart?: Maybe<SetShippingMethodsOnCartOutput>;
  /** Subscribe the specified email to the store's newsletter. */
  subscribeEmailToNewsletter?: Maybe<SubscribeEmailToNewsletterOutput>;
  /** Modify items in the cart. */
  updateCartItems?: Maybe<UpdateCartItemsOutput>;
  /** Use `updateCustomerV2` instead. */
  updateCustomer?: Maybe<CustomerOutput>;
  /** Update the billing or shipping address of a customer or guest. */
  updateCustomerAddress?: Maybe<CustomerAddress>;
  /** Change the email address for the logged-in customer. */
  updateCustomerEmail?: Maybe<CustomerOutput>;
  /** Update the customer's personal information. */
  updateCustomerV2?: Maybe<CustomerOutput>;
  /** Update one or more products in the specified wish list. */
  updateProductsInWishlist?: Maybe<UpdateProductsInWishlistOutput>;
  /** The payload for the createCategory mutation */
  wpCreateCategory?: Maybe<WpCreateCategoryPayload>;
  /** The payload for the createComment mutation */
  wpCreateComment?: Maybe<WpCreateCommentPayload>;
  /** The payload for the createMediaItem mutation */
  wpCreateMediaItem?: Maybe<WpCreateMediaItemPayload>;
  /** The payload for the createPage mutation */
  wpCreatePage?: Maybe<WpCreatePagePayload>;
  /** The payload for the createPost mutation */
  wpCreatePost?: Maybe<WpCreatePostPayload>;
  /** The payload for the createPostFormat mutation */
  wpCreatePostFormat?: Maybe<WpCreatePostFormatPayload>;
  /** The payload for the createTag mutation */
  wpCreateTag?: Maybe<WpCreateTagPayload>;
  /** The payload for the createUser mutation */
  wpCreateUser?: Maybe<WpCreateUserPayload>;
  /** The payload for the deleteCategory mutation */
  wpDeleteCategory?: Maybe<WpDeleteCategoryPayload>;
  /** The payload for the deleteComment mutation */
  wpDeleteComment?: Maybe<WpDeleteCommentPayload>;
  /** The payload for the deleteMediaItem mutation */
  wpDeleteMediaItem?: Maybe<WpDeleteMediaItemPayload>;
  /** The payload for the deletePage mutation */
  wpDeletePage?: Maybe<WpDeletePagePayload>;
  /** The payload for the deletePost mutation */
  wpDeletePost?: Maybe<WpDeletePostPayload>;
  /** The payload for the deletePostFormat mutation */
  wpDeletePostFormat?: Maybe<WpDeletePostFormatPayload>;
  /** The payload for the deleteTag mutation */
  wpDeleteTag?: Maybe<WpDeleteTagPayload>;
  /** The payload for the deleteUser mutation */
  wpDeleteUser?: Maybe<WpDeleteUserPayload>;
  /** Increase the count. */
  wpIncreaseCount?: Maybe<Scalars['Int']>;
  /** The payload for the registerUser mutation */
  wpRegisterUser?: Maybe<WpRegisterUserPayload>;
  /** The payload for the resetUserPassword mutation */
  wpResetUserPassword?: Maybe<WpResetUserPasswordPayload>;
  /** The payload for the restoreComment mutation */
  wpRestoreComment?: Maybe<WpRestoreCommentPayload>;
  /** The payload for the sendPasswordResetEmail mutation */
  wpSendPasswordResetEmail?: Maybe<WpSendPasswordResetEmailPayload>;
  /** The payload for the UpdateCategory mutation */
  wpUpdateCategory?: Maybe<WpUpdateCategoryPayload>;
  /** The payload for the updateComment mutation */
  wpUpdateComment?: Maybe<WpUpdateCommentPayload>;
  /** The payload for the updateMediaItem mutation */
  wpUpdateMediaItem?: Maybe<WpUpdateMediaItemPayload>;
  /** The payload for the updatePage mutation */
  wpUpdatePage?: Maybe<WpUpdatePagePayload>;
  /** The payload for the updatePost mutation */
  wpUpdatePost?: Maybe<WpUpdatePostPayload>;
  /** The payload for the UpdatePostFormat mutation */
  wpUpdatePostFormat?: Maybe<WpUpdatePostFormatPayload>;
  /** The payload for the updateSettings mutation */
  wpUpdateSettings?: Maybe<WpUpdateSettingsPayload>;
  /** The payload for the UpdateTag mutation */
  wpUpdateTag?: Maybe<WpUpdateTagPayload>;
  /** The payload for the updateUser mutation */
  wpUpdateUser?: Maybe<WpUpdateUserPayload>;
};


export type MutationAddBundleProductsToCartArgs = {
  input?: InputMaybe<AddBundleProductsToCartInput>;
};


export type MutationAddConfigurableProductsToCartArgs = {
  input?: InputMaybe<AddConfigurableProductsToCartInput>;
};


export type MutationAddDownloadableProductsToCartArgs = {
  input?: InputMaybe<AddDownloadableProductsToCartInput>;
};


export type MutationAddProductsToCartArgs = {
  cartId: Scalars['String'];
  cartItems: Array<CartItemInput>;
};


export type MutationAddProductsToCompareListArgs = {
  input?: InputMaybe<AddProductsToCompareListInput>;
};


export type MutationAddProductsToWishlistArgs = {
  wishlistId: Scalars['ID'];
  wishlistItems: Array<WishlistItemInput>;
};


export type MutationAddSimpleProductsToCartArgs = {
  input?: InputMaybe<AddSimpleProductsToCartInput>;
};


export type MutationAddVirtualProductsToCartArgs = {
  input?: InputMaybe<AddVirtualProductsToCartInput>;
};


export type MutationAddWishlistItemsToCartArgs = {
  wishlistId: Scalars['ID'];
  wishlistItemIds?: InputMaybe<Array<Scalars['ID']>>;
};


export type MutationApplyCouponToCartArgs = {
  input?: InputMaybe<ApplyCouponToCartInput>;
};


export type MutationAssignCompareListToCustomerArgs = {
  uid: Scalars['ID'];
};


export type MutationAssignCustomerToGuestCartArgs = {
  cart_id: Scalars['String'];
};


export type MutationChangeCustomerPasswordArgs = {
  currentPassword: Scalars['String'];
  newPassword: Scalars['String'];
};


export type MutationContactUsArgs = {
  input: ContactUsInput;
};


export type MutationCreateCompareListArgs = {
  input?: InputMaybe<CreateCompareListInput>;
};


export type MutationCreateCustomerArgs = {
  input: CustomerInput;
};


export type MutationCreateCustomerAddressArgs = {
  input: CustomerAddressInput;
};


export type MutationCreateCustomerV2Args = {
  input: CustomerCreateInput;
};


export type MutationCreateEmptyCartArgs = {
  input?: InputMaybe<CreateEmptyCartInput>;
};


export type MutationCreatePayflowProTokenArgs = {
  input: PayflowProTokenInput;
};


export type MutationCreatePaypalExpressTokenArgs = {
  input: PaypalExpressTokenInput;
};


export type MutationCreateProductReviewArgs = {
  input: CreateProductReviewInput;
};


export type MutationDeleteCompareListArgs = {
  uid: Scalars['ID'];
};


export type MutationDeleteCustomerAddressArgs = {
  id: Scalars['Int'];
};


export type MutationDeletePaymentTokenArgs = {
  public_hash: Scalars['String'];
};


export type MutationGenerateCustomerTokenArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationGenerateCustomerTokenAsAdminArgs = {
  input: GenerateCustomerTokenAsAdminInput;
};


export type MutationHandlePayflowProResponseArgs = {
  input: PayflowProResponseInput;
};


export type MutationMergeCartsArgs = {
  destination_cart_id?: InputMaybe<Scalars['String']>;
  source_cart_id: Scalars['String'];
};


export type MutationPlaceOrderArgs = {
  input?: InputMaybe<PlaceOrderInput>;
};


export type MutationPlaceRazorpayOrderArgs = {
  cart_id?: InputMaybe<Scalars['String']>;
};


export type MutationRemoveCouponFromCartArgs = {
  input?: InputMaybe<RemoveCouponFromCartInput>;
};


export type MutationRemoveItemFromCartArgs = {
  input?: InputMaybe<RemoveItemFromCartInput>;
};


export type MutationRemoveProductsFromCompareListArgs = {
  input?: InputMaybe<RemoveProductsFromCompareListInput>;
};


export type MutationRemoveProductsFromWishlistArgs = {
  wishlistId: Scalars['ID'];
  wishlistItemsIds: Array<Scalars['ID']>;
};


export type MutationReorderItemsArgs = {
  orderNumber: Scalars['String'];
};


export type MutationRequestPasswordResetEmailArgs = {
  email: Scalars['String'];
};


export type MutationResetPasswordArgs = {
  email: Scalars['String'];
  newPassword: Scalars['String'];
  resetPasswordToken: Scalars['String'];
};


export type MutationSendEmailToFriendArgs = {
  input?: InputMaybe<SendEmailToFriendInput>;
};


export type MutationSetBillingAddressOnCartArgs = {
  input?: InputMaybe<SetBillingAddressOnCartInput>;
};


export type MutationSetGuestEmailOnCartArgs = {
  input?: InputMaybe<SetGuestEmailOnCartInput>;
};


export type MutationSetPaymentMethodAndPlaceOrderArgs = {
  input?: InputMaybe<SetPaymentMethodAndPlaceOrderInput>;
};


export type MutationSetPaymentMethodOnCartArgs = {
  input?: InputMaybe<SetPaymentMethodOnCartInput>;
};


export type MutationSetRzpPaymentDetailsOnCartArgs = {
  input?: InputMaybe<SetRzpPaymentDetailsOnCartInput>;
};


export type MutationSetShippingAddressesOnCartArgs = {
  input?: InputMaybe<SetShippingAddressesOnCartInput>;
};


export type MutationSetShippingMethodsOnCartArgs = {
  input?: InputMaybe<SetShippingMethodsOnCartInput>;
};


export type MutationSubscribeEmailToNewsletterArgs = {
  email: Scalars['String'];
};


export type MutationUpdateCartItemsArgs = {
  input?: InputMaybe<UpdateCartItemsInput>;
};


export type MutationUpdateCustomerArgs = {
  input: CustomerInput;
};


export type MutationUpdateCustomerAddressArgs = {
  id: Scalars['Int'];
  input?: InputMaybe<CustomerAddressInput>;
};


export type MutationUpdateCustomerEmailArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationUpdateCustomerV2Args = {
  input: CustomerUpdateInput;
};


export type MutationUpdateProductsInWishlistArgs = {
  wishlistId: Scalars['ID'];
  wishlistItems: Array<WishlistItemUpdateInput>;
};


export type MutationWpCreateCategoryArgs = {
  input: WpCreateCategoryInput;
};


export type MutationWpCreateCommentArgs = {
  input: WpCreateCommentInput;
};


export type MutationWpCreateMediaItemArgs = {
  input: WpCreateMediaItemInput;
};


export type MutationWpCreatePageArgs = {
  input: WpCreatePageInput;
};


export type MutationWpCreatePostArgs = {
  input: WpCreatePostInput;
};


export type MutationWpCreatePostFormatArgs = {
  input: WpCreatePostFormatInput;
};


export type MutationWpCreateTagArgs = {
  input: WpCreateTagInput;
};


export type MutationWpCreateUserArgs = {
  input: WpCreateUserInput;
};


export type MutationWpDeleteCategoryArgs = {
  input: WpDeleteCategoryInput;
};


export type MutationWpDeleteCommentArgs = {
  input: WpDeleteCommentInput;
};


export type MutationWpDeleteMediaItemArgs = {
  input: WpDeleteMediaItemInput;
};


export type MutationWpDeletePageArgs = {
  input: WpDeletePageInput;
};


export type MutationWpDeletePostArgs = {
  input: WpDeletePostInput;
};


export type MutationWpDeletePostFormatArgs = {
  input: WpDeletePostFormatInput;
};


export type MutationWpDeleteTagArgs = {
  input: WpDeleteTagInput;
};


export type MutationWpDeleteUserArgs = {
  input: WpDeleteUserInput;
};


export type MutationWpIncreaseCountArgs = {
  count?: InputMaybe<Scalars['Int']>;
};


export type MutationWpRegisterUserArgs = {
  input: WpRegisterUserInput;
};


export type MutationWpResetUserPasswordArgs = {
  input: WpResetUserPasswordInput;
};


export type MutationWpRestoreCommentArgs = {
  input: WpRestoreCommentInput;
};


export type MutationWpSendPasswordResetEmailArgs = {
  input: WpSendPasswordResetEmailInput;
};


export type MutationWpUpdateCategoryArgs = {
  input: WpUpdateCategoryInput;
};


export type MutationWpUpdateCommentArgs = {
  input: WpUpdateCommentInput;
};


export type MutationWpUpdateMediaItemArgs = {
  input: WpUpdateMediaItemInput;
};


export type MutationWpUpdatePageArgs = {
  input: WpUpdatePageInput;
};


export type MutationWpUpdatePostArgs = {
  input: WpUpdatePostInput;
};


export type MutationWpUpdatePostFormatArgs = {
  input: WpUpdatePostFormatInput;
};


export type MutationWpUpdateSettingsArgs = {
  input: WpUpdateSettingsInput;
};


export type MutationWpUpdateTagArgs = {
  input: WpUpdateTagInput;
};


export type MutationWpUpdateUserArgs = {
  input: WpUpdateUserInput;
};

/** Contains an error message when an invalid UID was specified. */
export type NoSuchEntityUidError = ErrorInterface & {
  __typename?: 'NoSuchEntityUidError';
  /** The returned error message. */
  message: Scalars['String'];
  /** The specified invalid unique ID of an object. */
  uid: Scalars['ID'];
};

/** Contains the order ID. */
export type Order = {
  __typename?: 'Order';
  /** @deprecated Use `order_number` instead. */
  order_id?: Maybe<Scalars['String']>;
  /** The unique ID for an `Order` object. */
  order_number: Scalars['String'];
};

/** Contains detailed information about an order's billing and shipping addresses. */
export type OrderAddress = {
  __typename?: 'OrderAddress';
  /** The city or town. */
  city: Scalars['String'];
  /** The customer's company. */
  company?: Maybe<Scalars['String']>;
  /** The customer's country. */
  country_code?: Maybe<CountryCodeEnum>;
  /** The fax number. */
  fax?: Maybe<Scalars['String']>;
  /** The first name of the person associated with the shipping/billing address. */
  firstname: Scalars['String'];
  /** The family name of the person associated with the shipping/billing address. */
  lastname: Scalars['String'];
  /** The middle name of the person associated with the shipping/billing address. */
  middlename?: Maybe<Scalars['String']>;
  /** The customer's ZIP or postal code. */
  postcode?: Maybe<Scalars['String']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>;
  /** The state or province name. */
  region?: Maybe<Scalars['String']>;
  /** The unique ID for a `Region` object of a pre-defined region. */
  region_id?: Maybe<Scalars['ID']>;
  /** An array of strings that define the street number and name. */
  street: Array<Maybe<Scalars['String']>>;
  /** A value such as Sr., Jr., or III. */
  suffix?: Maybe<Scalars['String']>;
  /** The telephone number. */
  telephone?: Maybe<Scalars['String']>;
  /** The customer's Value-added tax (VAT) number (for corporate customers). */
  vat_id?: Maybe<Scalars['String']>;
};

export type OrderItem = OrderItemInterface & {
  __typename?: 'OrderItem';
  /** The final discount information for the product. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The entered option for the base product, such as a logo or image. */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The unique ID for an `OrderItemInterface` object. */
  id: Scalars['ID'];
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price of the base product, including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String'];
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']>;
  /** URL key of the base product. */
  product_url_key?: Maybe<Scalars['String']>;
  /** The number of canceled items. */
  quantity_canceled?: Maybe<Scalars['Float']>;
  /** The number of invoiced items. */
  quantity_invoiced?: Maybe<Scalars['Float']>;
  /** The number of units ordered for this item. */
  quantity_ordered?: Maybe<Scalars['Float']>;
  /** The number of refunded items. */
  quantity_refunded?: Maybe<Scalars['Float']>;
  /** The number of returned items. */
  quantity_returned?: Maybe<Scalars['Float']>;
  /** The number of shipped items. */
  quantity_shipped?: Maybe<Scalars['Float']>;
  /** The selected options for the base product, such as color or size. */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The status of the order item. */
  status?: Maybe<Scalars['String']>;
};

/** Order item details. */
export type OrderItemInterface = {
  /** The final discount information for the product. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The entered option for the base product, such as a logo or image. */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The unique ID for an `OrderItemInterface` object. */
  id: Scalars['ID'];
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price of the base product, including selected options. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String'];
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']>;
  /** URL key of the base product. */
  product_url_key?: Maybe<Scalars['String']>;
  /** The number of canceled items. */
  quantity_canceled?: Maybe<Scalars['Float']>;
  /** The number of invoiced items. */
  quantity_invoiced?: Maybe<Scalars['Float']>;
  /** The number of units ordered for this item. */
  quantity_ordered?: Maybe<Scalars['Float']>;
  /** The number of refunded items. */
  quantity_refunded?: Maybe<Scalars['Float']>;
  /** The number of returned items. */
  quantity_returned?: Maybe<Scalars['Float']>;
  /** The number of shipped items. */
  quantity_shipped?: Maybe<Scalars['Float']>;
  /** The selected options for the base product, such as color or size. */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The status of the order item. */
  status?: Maybe<Scalars['String']>;
};

/** Represents order item options like selected or entered. */
export type OrderItemOption = {
  __typename?: 'OrderItemOption';
  /** The name of the option. */
  label: Scalars['String'];
  /** The value of the option. */
  value: Scalars['String'];
};

/** Contains details about the payment method used to pay for the order. */
export type OrderPaymentMethod = {
  __typename?: 'OrderPaymentMethod';
  /** Additional data per payment method type. */
  additional_data?: Maybe<Array<Maybe<KeyValue>>>;
  /** The label that describes the payment method. */
  name: Scalars['String'];
  /** The payment method code that indicates how the order was paid for. */
  type: Scalars['String'];
};

/** Contains order shipment details. */
export type OrderShipment = {
  __typename?: 'OrderShipment';
  /** Comments added to the shipment. */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
  /** The unique ID for a `OrderShipment` object. */
  id: Scalars['ID'];
  /** An array of items included in the shipment. */
  items?: Maybe<Array<Maybe<ShipmentItemInterface>>>;
  /** The sequential credit shipment number. */
  number: Scalars['String'];
  /** An array of shipment tracking details. */
  tracking?: Maybe<Array<Maybe<ShipmentTracking>>>;
};

/** Contains details about the sales total amounts used to calculate the final price. */
export type OrderTotal = {
  __typename?: 'OrderTotal';
  /** The final base grand total amount in the base currency. */
  base_grand_total: Money;
  /** The applied discounts to the order. */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The final total amount, including shipping, discounts, and taxes. */
  grand_total: Money;
  /** Details about the shipping and handling costs for the order. */
  shipping_handling?: Maybe<ShippingHandling>;
  /** The subtotal of the order, excluding shipping, discounts, and taxes. */
  subtotal: Money;
  /** The order tax details. */
  taxes?: Maybe<Array<Maybe<TaxItem>>>;
  /** The shipping amount for the order. */
  total_shipping: Money;
  /** The amount of tax applied to the order. */
  total_tax: Money;
};

/** Contains required input for Payflow Express Checkout payments. */
export type PayflowExpressInput = {
  /** The unique ID of the PayPal user. */
  payer_id: Scalars['String'];
  /** The token returned by the createPaypalExpressToken mutation. */
  token: Scalars['String'];
};

/** A set of relative URLs that PayPal uses in response to various actions during the authorization process. Adobe Commerce prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkInput = {
  /** The relative URL of the page that PayPal redirects to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String'];
  /** The relative URL of the transaction error page that PayPal redirects to upon payment error. If the full URL to this page is https://www.example.com/paypal/action/error.html, the relative URL is paypal/action/error.html. */
  error_url: Scalars['String'];
  /** The relative URL of the order confirmation page that PayPal redirects to when the payment is successful and additional confirmation is not needed. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String'];
};

/** Indicates the mode for payment. Applies to the Payflow Link and Payments Advanced payment methods. */
export enum PayflowLinkMode {
  /** @deprecated  */
  Live = 'LIVE',
  /** @deprecated  */
  Test = 'TEST'
}

/** Contains information used to generate PayPal iframe for transaction. Applies to Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkToken = {
  __typename?: 'PayflowLinkToken';
  /** The mode for the Payflow transaction. */
  mode?: Maybe<PayflowLinkMode>;
  /** The PayPal URL used for requesting a Payflow form. */
  paypal_url?: Maybe<Scalars['String']>;
  /** The secure token generated by PayPal. */
  secure_token?: Maybe<Scalars['String']>;
  /** The secure token ID generated by PayPal. */
  secure_token_id?: Maybe<Scalars['String']>;
};

/** Contains information required to fetch payment token information for the Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkTokenInput = {
  /** The unique ID that identifies the customer's cart. */
  cart_id: Scalars['String'];
};

/** Contains input for the Payflow Pro and Payments Pro payment methods. */
export type PayflowProInput = {
  /** Required input for credit card related information. */
  cc_details: CreditCardDetailsInput;
  /** Indicates whether details about the shopper's credit/debit card should be tokenized for later usage. Required only if Vault is enabled for the PayPal Payflow Pro payment integration. */
  is_active_payment_token_enabler?: InputMaybe<Scalars['Boolean']>;
};

/** Input required to complete payment. Applies to Payflow Pro and Payments Pro payment methods. */
export type PayflowProResponseInput = {
  /** The unique ID that identifies the shopper's cart. */
  cart_id: Scalars['String'];
  /** The payload returned from PayPal. */
  paypal_payload: Scalars['String'];
};

export type PayflowProResponseOutput = {
  __typename?: 'PayflowProResponseOutput';
  /** The cart with the updated selected payment method. */
  cart: Cart;
};

/** Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods. */
export type PayflowProToken = {
  __typename?: 'PayflowProToken';
  /** The RESPMSG returned by PayPal. If the `result` is `0`, then `response_message` is `Approved`. */
  response_message: Scalars['String'];
  /** A non-zero value if any errors occurred. */
  result: Scalars['Int'];
  /** The RESULT returned by PayPal. A value of `0` indicates the transaction was approved. */
  result_code: Scalars['Int'];
  /** A secure token generated by PayPal. */
  secure_token: Scalars['String'];
  /** A secure token ID generated by PayPal. */
  secure_token_id: Scalars['String'];
};

/** Contains input required to fetch payment token information for the Payflow Pro and Payments Pro payment methods. */
export type PayflowProTokenInput = {
  /** The unique ID that identifies the shopper's cart. */
  cart_id: Scalars['String'];
  /** A set of relative URLs that PayPal uses for callback. */
  urls: PayflowProUrlInput;
};

/** Contains a set of relative URLs that PayPal uses in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for the Payflow Pro and Payment Pro payment methods. */
export type PayflowProUrlInput = {
  /** The relative URL of the page that PayPal redirects to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String'];
  /** The relative URL of the transaction error page that PayPal redirects to upon payment error. If the full URL to this page is https://www.example.com/paypal/action/error.html, the relative URL is paypal/action/error.html. */
  error_url: Scalars['String'];
  /** The relative URL of the final confirmation page that PayPal redirects to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String'];
};

/** Defines the payment method. */
export type PaymentMethodInput = {
  braintree?: InputMaybe<BraintreeInput>;
  braintree_cc_vault?: InputMaybe<BraintreeCcVaultInput>;
  /** The internal name for the payment method. */
  code: Scalars['String'];
  /** Required input for PayPal Hosted pro payments. */
  hosted_pro?: InputMaybe<HostedProInput>;
  /** Required input for Payflow Express Checkout payments. */
  payflow_express?: InputMaybe<PayflowExpressInput>;
  /** Required input for PayPal Payflow Link and Payments Advanced payments. */
  payflow_link?: InputMaybe<PayflowLinkInput>;
  /** Required input for PayPal Payflow Pro and Payment Pro payments. */
  payflowpro?: InputMaybe<PayflowProInput>;
  /** Required input for PayPal Payflow Pro vault payments. */
  payflowpro_cc_vault?: InputMaybe<VaultTokenInput>;
  /** Required input for Express Checkout and Payments Standard payments. */
  paypal_express?: InputMaybe<PaypalExpressInput>;
  /** The purchase order number. Optional for most payment methods. */
  purchase_order_number?: InputMaybe<Scalars['String']>;
};

/** The stored payment method available to the customer. */
export type PaymentToken = {
  __typename?: 'PaymentToken';
  /** A description of the stored account details. */
  details?: Maybe<Scalars['String']>;
  /** The payment method code associated with the token. */
  payment_method_code: Scalars['String'];
  /** The public hash of the token. */
  public_hash: Scalars['String'];
  /** Specifies the payment token type. */
  type: PaymentTokenTypeEnum;
};

/** The list of available payment token types. */
export enum PaymentTokenTypeEnum {
  /**
   * phpcs:ignore Magento2.GraphQL.ValidArgumentName
   * @deprecated
   */
  Account = 'account',
  /**
   * phpcs:ignore Magento2.GraphQL.ValidArgumentName
   * @deprecated
   */
  Card = 'card'
}

/** Contains required input for Express Checkout and Payments Standard payments. */
export type PaypalExpressInput = {
  /** The unique ID of the PayPal user. */
  payer_id: Scalars['String'];
  /** The token returned by the `createPaypalExpressToken` mutation. */
  token: Scalars['String'];
};

/** Deprecated. Use `PaypalExpressTokenOutput` instead. */
export type PaypalExpressToken = {
  __typename?: 'PaypalExpressToken';
  /**
   * A set of URLs that allow the buyer to authorize payment and adjust checkout details.
   * @deprecated Use `PaypalExpressTokenOutput.paypal_urls` instead.
   */
  paypal_urls?: Maybe<PaypalExpressUrlList>;
  /**
   * The token returned by PayPal.
   * @deprecated Use `PaypalExpressTokenOutput.token` instead.
   */
  token?: Maybe<Scalars['String']>;
};

/** Defines the attributes required to receive a payment token for Express Checkout and Payments Standard payment methods. */
export type PaypalExpressTokenInput = {
  /** The unique ID that identifies the customer's cart. */
  cart_id: Scalars['String'];
  /** The payment method code. */
  code: Scalars['String'];
  /** Indicates whether the buyer selected the quick checkout button. The default value is false. */
  express_button?: InputMaybe<Scalars['Boolean']>;
  /** A set of relative URLs that PayPal uses in response to various actions during the authorization process. */
  urls: PaypalExpressUrlsInput;
  /** Indicates whether the buyer clicked the PayPal credit button. The default value is false. */
  use_paypal_credit?: InputMaybe<Scalars['Boolean']>;
};

/** Contains the token returned by PayPal and a set of URLs that allow the buyer to authorize payment and adjust checkout details. Applies to Express Checkout and Payments Standard payment methods. */
export type PaypalExpressTokenOutput = {
  __typename?: 'PaypalExpressTokenOutput';
  /** A set of URLs that allow the buyer to authorize payment and adjust checkout details. */
  paypal_urls?: Maybe<PaypalExpressUrlList>;
  /** The token returned by PayPal. */
  token?: Maybe<Scalars['String']>;
};

/** Contains a set of URLs that allow the buyer to authorize payment and adjust checkout details for Express Checkout and Payments Standard transactions. */
export type PaypalExpressUrlList = {
  __typename?: 'PaypalExpressUrlList';
  /** The PayPal URL that allows the buyer to edit their checkout details. */
  edit?: Maybe<Scalars['String']>;
  /** The URL to the PayPal login page. */
  start?: Maybe<Scalars['String']>;
};

/** Contains a set of relative URLs that PayPal uses in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Express Checkout and Payments Standard payment methods. */
export type PaypalExpressUrlsInput = {
  /** The relative URL of the page that PayPal redirects to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String'];
  /** The relative URL of the page that PayPal redirects to when the payment has been put on hold for additional review. This condition mostly applies to ACH transactions, and is not applicable to most PayPal solutions. If the full URL to this page is https://www.example.com/paypal/action/success_pending.html, the relative URL is paypal/action/success_pending.html. */
  pending_url?: InputMaybe<Scalars['String']>;
  /** The relative URL of the final confirmation page that PayPal redirects to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String'];
  /** The relative URL of the order confirmation page that PayPal redirects to when the payment is successful and additional confirmation is not needed. Not applicable to most PayPal solutions. If the full URL to this page is https://www.example.com/paypal/action/success.html, the relative URL is paypal/action/success.html. */
  success_url?: InputMaybe<Scalars['String']>;
};

/** Contains attributes specific to tangible products. */
export type PhysicalProductInterface = {
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']>;
};

/** Defines Pickup Location information. */
export type PickupLocation = {
  __typename?: 'PickupLocation';
  city?: Maybe<Scalars['String']>;
  contact_name?: Maybe<Scalars['String']>;
  country_id?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  pickup_location_code?: Maybe<Scalars['String']>;
  postcode?: Maybe<Scalars['String']>;
  region?: Maybe<Scalars['String']>;
  region_id?: Maybe<Scalars['Int']>;
  street?: Maybe<Scalars['String']>;
};

/** PickupLocationFilterInput defines the list of attributes and filters for the search. */
export type PickupLocationFilterInput = {
  /** Filter by city. */
  city?: InputMaybe<FilterTypeInput>;
  /** Filter by country. */
  country_id?: InputMaybe<FilterTypeInput>;
  /** Filter by pickup location name. */
  name?: InputMaybe<FilterTypeInput>;
  /** Filter by pickup location code. */
  pickup_location_code?: InputMaybe<FilterTypeInput>;
  /** Filter by postcode. */
  postcode?: InputMaybe<FilterTypeInput>;
  /** Filter by region. */
  region?: InputMaybe<FilterTypeInput>;
  /** Filter by region id. */
  region_id?: InputMaybe<FilterTypeInput>;
  /** Filter by street. */
  street?: InputMaybe<FilterTypeInput>;
};

/** PickupLocationSortInput specifies attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. */
export type PickupLocationSortInput = {
  /** City where pickup location is placed. */
  city?: InputMaybe<SortEnum>;
  /** Name of the contact person. */
  contact_name?: InputMaybe<SortEnum>;
  /** Id of the country in two letters. */
  country_id?: InputMaybe<SortEnum>;
  /** Description of the pickup location. */
  description?: InputMaybe<SortEnum>;
  /** Distance to the address, requested by distance filter. Applicable only with distance filter. If distance sort order is present, all other sort orders will be ignored. */
  distance?: InputMaybe<SortEnum>;
  /** Contact email of the pickup location. */
  email?: InputMaybe<SortEnum>;
  /** Contact fax of the pickup location. */
  fax?: InputMaybe<SortEnum>;
  /** Geographic latitude where pickup location is placed. */
  latitude?: InputMaybe<SortEnum>;
  /** Geographic longitude where pickup location is placed. */
  longitude?: InputMaybe<SortEnum>;
  /** The pickup location name. Customer use this to identify the pickup location. */
  name?: InputMaybe<SortEnum>;
  /** Contact phone number of the pickup location. */
  phone?: InputMaybe<SortEnum>;
  /** A code assigned to pickup location to identify the source. */
  pickup_location_code?: InputMaybe<SortEnum>;
  /** Postcode where pickup location is placed. */
  postcode?: InputMaybe<SortEnum>;
  /** Name of the region. */
  region?: InputMaybe<SortEnum>;
  /** Id of the region. */
  region_id?: InputMaybe<SortEnum>;
  /** Street where pickup location is placed. */
  street?: InputMaybe<SortEnum>;
};

/** Top level object returned in a pickup locations search. */
export type PickupLocations = {
  __typename?: 'PickupLocations';
  /** An array of pickup locations that match the specific search request. */
  items?: Maybe<Array<Maybe<PickupLocation>>>;
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** The number of products returned. */
  total_count?: Maybe<Scalars['Int']>;
};

/** Specifies the quote to be converted to an order. */
export type PlaceOrderInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String'];
};

/** Contains the results of the request to place an order. */
export type PlaceOrderOutput = {
  __typename?: 'PlaceOrderOutput';
  /** The ID of the order. */
  order: Order;
};

/** Deprecated. Use `ProductPrice` instead. Defines the price of a product as well as any tax-related adjustments. */
export type Price = {
  __typename?: 'Price';
  /**
   * An array that provides information about tax, weee, or weee_tax adjustments.
   * @deprecated Use `ProductPrice` instead.
   */
  adjustments?: Maybe<Array<Maybe<PriceAdjustment>>>;
  /**
   * The price of a product plus a three-letter currency code.
   * @deprecated Use `ProductPrice` instead.
   */
  amount?: Maybe<Money>;
};

/** Deprecated. Taxes will be included or excluded in the price. Defines the amount of money to apply as an adjustment, the type of adjustment to apply, and whether the item is included or excluded from the adjustment. */
export type PriceAdjustment = {
  __typename?: 'PriceAdjustment';
  /** The amount of the price adjustment and its currency code. */
  amount?: Maybe<Money>;
  /**
   * Indicates whether the adjustment involves tax, weee, or weee_tax.
   * @deprecated `PriceAdjustment` is deprecated.
   */
  code?: Maybe<PriceAdjustmentCodesEnum>;
  /**
   * Indicates whether the entity described by the code attribute is included or excluded from the adjustment.
   * @deprecated `PriceAdjustment` is deprecated.
   */
  description?: Maybe<PriceAdjustmentDescriptionEnum>;
};

/** `PriceAdjustment.code` is deprecated. */
export enum PriceAdjustmentCodesEnum {
  /** @deprecated `PriceAdjustmentCodesEnum` is deprecated. Tax is included or excluded in the price. Tax is not shown separately in Catalog. */
  Tax = 'TAX',
  /** @deprecated WEEE code is deprecated. Use `fixed_product_taxes.label` instead. */
  Weee = 'WEEE',
  /** @deprecated Use `fixed_product_taxes` instead.  Tax is included or excluded in price. The tax is not shown separtely in Catalog. */
  WeeeTax = 'WEEE_TAX'
}

/** `PriceAdjustmentDescriptionEnum` is deprecated. States whether a price adjustment is included or excluded. */
export enum PriceAdjustmentDescriptionEnum {
  /** @deprecated  */
  Excluded = 'EXCLUDED',
  /** @deprecated  */
  Included = 'INCLUDED'
}

/** Contains the price range for a product. If the product has a single price, the minimum and maximum price will be the same. */
export type PriceRange = {
  __typename?: 'PriceRange';
  /** The highest possible price for the product. */
  maximum_price?: Maybe<ProductPrice>;
  /** The lowest possible price for the product. */
  minimum_price: ProductPrice;
};

/** Defines the price type. */
export enum PriceTypeEnum {
  /** @deprecated  */
  Dynamic = 'DYNAMIC',
  /** @deprecated  */
  Fixed = 'FIXED',
  /** @deprecated  */
  Percent = 'PERCENT'
}

/** Defines whether a bundle product's price is displayed as the lowest possible value or as a range. */
export enum PriceViewEnum {
  /** @deprecated  */
  AsLowAs = 'AS_LOW_AS',
  /** @deprecated  */
  PriceRange = 'PRICE_RANGE'
}

/** Contains a product attribute code and value. */
export type ProductAttribute = {
  __typename?: 'ProductAttribute';
  /** The unique identifier for a product attribute code. */
  code: Scalars['String'];
  /** The display value of the attribute. */
  value: Scalars['String'];
};

/** Defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for. */
export type ProductAttributeFilterInput = {
  /** Deprecated: use `category_uid` to filter product by category ID. */
  category_id?: InputMaybe<FilterEqualTypeInput>;
  /** Filter product by the unique ID for a `CategoryInterface` object. */
  category_uid?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Description */
  description?: InputMaybe<FilterMatchTypeInput>;
  /** Attribute label: Product Name */
  name?: InputMaybe<FilterMatchTypeInput>;
  /** Attribute label: Price */
  price?: InputMaybe<FilterRangeTypeInput>;
  /** Attribute label: Short Description */
  short_description?: InputMaybe<FilterMatchTypeInput>;
  /** Attribute label: SKU */
  sku?: InputMaybe<FilterEqualTypeInput>;
  /** The part of the URL that identifies the product */
  url_key?: InputMaybe<FilterEqualTypeInput>;
};

/** Specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. It's possible to sort products using searchable attributes with enabled 'Use in Filter Options' option */
export type ProductAttributeSortInput = {
  /** Attribute label: Product Name */
  name?: InputMaybe<SortEnum>;
  /** Sort by the position assigned to each product. */
  position?: InputMaybe<SortEnum>;
  /** Attribute label: Price */
  price?: InputMaybe<SortEnum>;
  /** Sort by the search relevance score (default). */
  relevance?: InputMaybe<SortEnum>;
};

/** Contains the discount applied to a product price. */
export type ProductDiscount = {
  __typename?: 'ProductDiscount';
  /** The actual value of the discount. */
  amount_off?: Maybe<Scalars['Float']>;
  /** The discount expressed a percentage. */
  percent_off?: Maybe<Scalars['Float']>;
};

/** ProductFilterInput is deprecated, use @ProductAttributeFilterInput instead. ProductFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for. */
export type ProductFilterInput = {
  /** The category ID the product belongs to. */
  category_id?: InputMaybe<FilterTypeInput>;
  /** The product's country of origin. */
  country_of_manufacture?: InputMaybe<FilterTypeInput>;
  /** The timestamp indicating when the product was created. */
  created_at?: InputMaybe<FilterTypeInput>;
  /** The name of a custom layout. */
  custom_layout?: InputMaybe<FilterTypeInput>;
  /** XML code that is applied as a layout update to the product page. */
  custom_layout_update?: InputMaybe<FilterTypeInput>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: InputMaybe<FilterTypeInput>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: InputMaybe<FilterTypeInput>;
  /** Indicates whether additional attributes have been created for the product. */
  has_options?: InputMaybe<FilterTypeInput>;
  /** The relative path to the main image on the product page. */
  image?: InputMaybe<FilterTypeInput>;
  /** The label assigned to a product image. */
  image_label?: InputMaybe<FilterTypeInput>;
  /** A number representing the product's manufacturer. */
  manufacturer?: InputMaybe<FilterTypeInput>;
  /** The numeric maximal price of the product. Do not include the currency code. */
  max_price?: InputMaybe<FilterTypeInput>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: InputMaybe<FilterTypeInput>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: InputMaybe<FilterTypeInput>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: InputMaybe<FilterTypeInput>;
  /** The numeric minimal price of the product. Do not include the currency code. */
  min_price?: InputMaybe<FilterTypeInput>;
  /** The product name. Customers use this name to identify the product. */
  name?: InputMaybe<FilterTypeInput>;
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  news_from_date?: InputMaybe<FilterTypeInput>;
  /** The end date for new product listings. */
  news_to_date?: InputMaybe<FilterTypeInput>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: InputMaybe<FilterTypeInput>;
  /** The keyword required to perform a logical OR comparison. */
  or?: InputMaybe<ProductFilterInput>;
  /** The price of an item. */
  price?: InputMaybe<FilterTypeInput>;
  /** Indicates whether the product has required options. */
  required_options?: InputMaybe<FilterTypeInput>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: InputMaybe<FilterTypeInput>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: InputMaybe<FilterTypeInput>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: InputMaybe<FilterTypeInput>;
  /** The label assigned to a product's small image. */
  small_image_label?: InputMaybe<FilterTypeInput>;
  /** The beginning date that a product has a special price. */
  special_from_date?: InputMaybe<FilterTypeInput>;
  /** The discounted price of the product. Do not include the currency code. */
  special_price?: InputMaybe<FilterTypeInput>;
  /** The end date that a product has a special price. */
  special_to_date?: InputMaybe<FilterTypeInput>;
  /** The file name of a swatch image. */
  swatch_image?: InputMaybe<FilterTypeInput>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: InputMaybe<FilterTypeInput>;
  /** The label assigned to a product's thumbnail image. */
  thumbnail_label?: InputMaybe<FilterTypeInput>;
  /** The price when tier pricing is in effect and the items purchased threshold has been reached. */
  tier_price?: InputMaybe<FilterTypeInput>;
  /** The timestamp indicating when the product was updated. */
  updated_at?: InputMaybe<FilterTypeInput>;
  /** The part of the URL that identifies the product */
  url_key?: InputMaybe<FilterTypeInput>;
  url_path?: InputMaybe<FilterTypeInput>;
  /** The weight of the item, in units defined by the store. */
  weight?: InputMaybe<FilterTypeInput>;
};

/** Contains product image information, including the image URL and label. */
export type ProductImage = MediaGalleryInterface & {
  __typename?: 'ProductImage';
  /** Indicates whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>;
  /** The label of the product image or video. */
  label?: Maybe<Scalars['String']>;
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>;
  /** The URL of the product image or video. */
  url?: Maybe<Scalars['String']>;
};

/** Product Information used for Pickup Locations search. */
export type ProductInfoInput = {
  /** Product SKU. */
  sku: Scalars['String'];
};

/** Contains fields that are common to all types of products. */
export type ProductInterface = {
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  /** The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled. */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  color?: Maybe<Scalars['Int']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  /** An array of media gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use `media_gallery` instead.
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  /**
   * Indicates the price of an item.
   * @deprecated Use `price_range` for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** The range of prices for the product */
  price_range: PriceRange;
  /** An array of `TierPrice` objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  /** An array of `ProductLinks` objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** An array of products to be displayed in a Related Products block. */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date for a product with a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  /** The file name of a swatch image. */
  swatch_image?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use `__typename` instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
};


/** Contains fields that are common to all types of products. */
export type ProductInterfaceReviewsArgs = {
  currentPage?: InputMaybe<Scalars['Int']>;
  pageSize?: InputMaybe<Scalars['Int']>;
};

/** An implementation of `ProductLinksInterface`. */
export type ProductLinks = ProductLinksInterface & {
  __typename?: 'ProductLinks';
  /** One of related, associated, upsell, or crosssell. */
  link_type?: Maybe<Scalars['String']>;
  /** The SKU of the linked product. */
  linked_product_sku?: Maybe<Scalars['String']>;
  /** The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable). */
  linked_product_type?: Maybe<Scalars['String']>;
  /** The position within the list of product links. */
  position?: Maybe<Scalars['Int']>;
  /** The identifier of the linked product. */
  sku?: Maybe<Scalars['String']>;
};

/** Contains information about linked products, including the link type and product type of each item. */
export type ProductLinksInterface = {
  /** One of related, associated, upsell, or crosssell. */
  link_type?: Maybe<Scalars['String']>;
  /** The SKU of the linked product. */
  linked_product_sku?: Maybe<Scalars['String']>;
  /** The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable). */
  linked_product_type?: Maybe<Scalars['String']>;
  /** The position within the list of product links. */
  position?: Maybe<Scalars['Int']>;
  /** The identifier of the linked product. */
  sku?: Maybe<Scalars['String']>;
};

/** Contains an image in base64 format and basic information about the image. */
export type ProductMediaGalleryEntriesContent = {
  __typename?: 'ProductMediaGalleryEntriesContent';
  /** The image in base64 format. */
  base64_encoded_data?: Maybe<Scalars['String']>;
  /** The file name of the image. */
  name?: Maybe<Scalars['String']>;
  /** The MIME type of the file, such as image/png. */
  type?: Maybe<Scalars['String']>;
};

/** Contains a link to a video file and basic information about the video. */
export type ProductMediaGalleryEntriesVideoContent = {
  __typename?: 'ProductMediaGalleryEntriesVideoContent';
  /** Must be external-video. */
  media_type?: Maybe<Scalars['String']>;
  /** A description of the video. */
  video_description?: Maybe<Scalars['String']>;
  /** Optional data about the video. */
  video_metadata?: Maybe<Scalars['String']>;
  /** Describes the video source. */
  video_provider?: Maybe<Scalars['String']>;
  /** The title of the video. */
  video_title?: Maybe<Scalars['String']>;
  /** The URL to the video. */
  video_url?: Maybe<Scalars['String']>;
};

/** Represents a product price. */
export type ProductPrice = {
  __typename?: 'ProductPrice';
  /** The price discount. Represents the difference between the regular and final price. */
  discount?: Maybe<ProductDiscount>;
  /** The final price of the product after applying discounts. */
  final_price: Money;
  /** An array of the multiple Fixed Product Taxes that can be applied to a product price. */
  fixed_product_taxes?: Maybe<Array<Maybe<FixedProductTax>>>;
  /** The regular price of the product. */
  regular_price: Money;
};

/** Deprecated. Use `PriceRange` instead. Contains the regular price of an item, as well as its minimum and maximum prices. Only composite products, which include bundle, configurable, and grouped products, can contain a minimum and maximum price. */
export type ProductPrices = {
  __typename?: 'ProductPrices';
  /**
   * The highest possible final price for all the options defined within a composite product. If you are specifying a price range, this would be the `to` value.
   * @deprecated Use `PriceRange.maximum_price` instead.
   */
  maximalPrice?: Maybe<Price>;
  /**
   * The lowest possible final price for all the options defined within a composite product. If you are specifying a price range, this would be the `from` value.
   * @deprecated Use `PriceRange.minimum_price` instead.
   */
  minimalPrice?: Maybe<Price>;
  /**
   * The base price of a product.
   * @deprecated Use `regular_price` from `PriceRange.minimum_price` or `PriceRange.maximum_price` instead.
   */
  regularPrice?: Maybe<Price>;
};

/** Contains details of a product review. */
export type ProductReview = {
  __typename?: 'ProductReview';
  /** The average of all ratings for this product. */
  average_rating: Scalars['Float'];
  /** The date the review was created. */
  created_at: Scalars['String'];
  /** The customer's nickname. Defaults to the customer name, if logged in. */
  nickname: Scalars['String'];
  /** The reviewed product. */
  product: ProductInterface;
  /** An array of ratings by rating category, such as quality, price, and value. */
  ratings_breakdown: Array<Maybe<ProductReviewRating>>;
  /** The summary (title) of the review. */
  summary: Scalars['String'];
  /** The review text. */
  text: Scalars['String'];
};

/** Contains data about a single aspect of a product review. */
export type ProductReviewRating = {
  __typename?: 'ProductReviewRating';
  /** The label assigned to an aspect of a product that is being rated, such as quality or price. */
  name: Scalars['String'];
  /** The rating value given by customer. By default, possible values range from 1 to 5. */
  value: Scalars['String'];
};

/** Contains the reviewer's rating for a single aspect of a review. */
export type ProductReviewRatingInput = {
  /** An encoded rating ID. */
  id: Scalars['String'];
  /** An encoded rating value ID. */
  value_id: Scalars['String'];
};

/** Contains details about a single aspect of a product review. */
export type ProductReviewRatingMetadata = {
  __typename?: 'ProductReviewRatingMetadata';
  /** An encoded rating ID. */
  id: Scalars['String'];
  /** The label assigned to an aspect of a product that is being rated, such as quality or price. */
  name: Scalars['String'];
  /** List of product review ratings sorted by position. */
  values: Array<Maybe<ProductReviewRatingValueMetadata>>;
};

/** Contains details about a single value in a product review. */
export type ProductReviewRatingValueMetadata = {
  __typename?: 'ProductReviewRatingValueMetadata';
  /** A ratings scale, such as the number of stars awarded. */
  value: Scalars['String'];
  /** An encoded rating value ID. */
  value_id: Scalars['String'];
};

/** Contains an array of metadata about each aspect of a product review. */
export type ProductReviewRatingsMetadata = {
  __typename?: 'ProductReviewRatingsMetadata';
  /** An array of product reviews sorted by position. */
  items: Array<Maybe<ProductReviewRatingMetadata>>;
};

/** Contains an array of product reviews. */
export type ProductReviews = {
  __typename?: 'ProductReviews';
  /** An array of product reviews. */
  items: Array<Maybe<ProductReview>>;
  /** Metadata for pagination rendering. */
  page_info: SearchResultPageInfo;
};

/** Deprecated. Use `ProductAttributeSortInput` instead. Specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. */
export type ProductSortInput = {
  /** The product's country of origin. */
  country_of_manufacture?: InputMaybe<SortEnum>;
  /** The timestamp indicating when the product was created. */
  created_at?: InputMaybe<SortEnum>;
  /** The name of a custom layout. */
  custom_layout?: InputMaybe<SortEnum>;
  /** XML code that is applied as a layout update to the product page. */
  custom_layout_update?: InputMaybe<SortEnum>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: InputMaybe<SortEnum>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: InputMaybe<SortEnum>;
  /** Indicates whether additional attributes have been created for the product. */
  has_options?: InputMaybe<SortEnum>;
  /** The relative path to the main image on the product page. */
  image?: InputMaybe<SortEnum>;
  /** The label assigned to a product image. */
  image_label?: InputMaybe<SortEnum>;
  /** A number representing the product's manufacturer. */
  manufacturer?: InputMaybe<SortEnum>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: InputMaybe<SortEnum>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: InputMaybe<SortEnum>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: InputMaybe<SortEnum>;
  /** The product name. Customers use this name to identify the product. */
  name?: InputMaybe<SortEnum>;
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  news_from_date?: InputMaybe<SortEnum>;
  /** The end date for new product listings. */
  news_to_date?: InputMaybe<SortEnum>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: InputMaybe<SortEnum>;
  /** The price of the item. */
  price?: InputMaybe<SortEnum>;
  /** Indicates whether the product has required options. */
  required_options?: InputMaybe<SortEnum>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: InputMaybe<SortEnum>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: InputMaybe<SortEnum>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: InputMaybe<SortEnum>;
  /** The label assigned to a product's small image. */
  small_image_label?: InputMaybe<SortEnum>;
  /** The beginning date that a product has a special price. */
  special_from_date?: InputMaybe<SortEnum>;
  /** The discounted price of the product. */
  special_price?: InputMaybe<SortEnum>;
  /** The end date that a product has a special price. */
  special_to_date?: InputMaybe<SortEnum>;
  /** Indicates the criteria to sort swatches. */
  swatch_image?: InputMaybe<SortEnum>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: InputMaybe<SortEnum>;
  /** The label assigned to a product's thumbnail image. */
  thumbnail_label?: InputMaybe<SortEnum>;
  /** The price when tier pricing is in effect and the items purchased threshold has been reached. */
  tier_price?: InputMaybe<SortEnum>;
  /** The timestamp indicating when the product was updated. */
  updated_at?: InputMaybe<SortEnum>;
  /** The part of the URL that identifies the product */
  url_key?: InputMaybe<SortEnum>;
  url_path?: InputMaybe<SortEnum>;
  /** The weight of the item, in units defined by the store. */
  weight?: InputMaybe<SortEnum>;
};

/** This enumeration states whether a product stock status is in stock or out of stock */
export enum ProductStockStatus {
  /** @deprecated  */
  InStock = 'IN_STOCK',
  /** @deprecated  */
  OutOfStock = 'OUT_OF_STOCK'
}

/** Deprecated. Use `TierPrice` instead. Defines a tier price, which is a quantity discount offered to a specific customer group. */
export type ProductTierPrices = {
  __typename?: 'ProductTierPrices';
  /**
   * The ID of the customer group.
   * @deprecated Not relevant for the storefront.
   */
  customer_group_id?: Maybe<Scalars['String']>;
  /**
   * The percentage discount of the item.
   * @deprecated Use `TierPrice.discount` instead.
   */
  percentage_value?: Maybe<Scalars['Float']>;
  /**
   * The number of items that must be purchased to qualify for tier pricing.
   * @deprecated Use `TierPrice.quantity` instead.
   */
  qty?: Maybe<Scalars['Float']>;
  /**
   * The price of the fixed price item.
   * @deprecated Use `TierPrice.final_price` instead.
   */
  value?: Maybe<Scalars['Float']>;
  /**
   * The ID assigned to the website.
   * @deprecated Not relevant for the storefront.
   */
  website_id?: Maybe<Scalars['Float']>;
};

/** Contains information about a product video. */
export type ProductVideo = MediaGalleryInterface & {
  __typename?: 'ProductVideo';
  /** Indicates whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>;
  /** The label of the product image or video. */
  label?: Maybe<Scalars['String']>;
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>;
  /** The URL of the product image or video. */
  url?: Maybe<Scalars['String']>;
  /** Contains a `ProductMediaGalleryEntriesVideoContent` object. */
  video_content?: Maybe<ProductMediaGalleryEntriesVideoContent>;
};

/** Contains the results of a `products` query. */
export type Products = {
  __typename?: 'Products';
  /** A bucket that contains the attribute code and label for each filterable option. */
  aggregations?: Maybe<Array<Maybe<Aggregation>>>;
  /**
   * Layered navigation filters array.
   * @deprecated Use `aggregations` instead.
   */
  filters?: Maybe<Array<Maybe<LayerFilter>>>;
  /** An array of products that match the specified search criteria. */
  items?: Maybe<Array<Maybe<ProductInterface>>>;
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** An object that includes the default sort field and all available sort fields. */
  sort_fields?: Maybe<SortFields>;
  /** An array of search suggestions for case when search query have no results. */
  suggestions?: Maybe<Array<Maybe<SearchSuggestion>>>;
  /** The number of products that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  total_count?: Maybe<Scalars['Int']>;
};


/** Contains the results of a `products` query. */
export type ProductsAggregationsArgs = {
  filter?: InputMaybe<AggregationsFilterInput>;
};

export type Query = {
  __typename?: 'Query';
  /** Get a list of available store views and their config information. */
  availableStores?: Maybe<Array<Maybe<StoreConfig>>>;
  /** Return information about the specified shopping cart. */
  cart?: Maybe<Cart>;
  /** Return a list of categories that match the specified filter. */
  categories?: Maybe<CategoryResult>;
  /**
   * Search for categories that match the criteria specified in the `search` and `filter` attributes.
   * @deprecated Use `categoryList` instead.
   */
  category?: Maybe<CategoryTree>;
  /** Return an array of categories based on the specified filters. */
  categoryList?: Maybe<Array<Maybe<CategoryTree>>>;
  /** Return Terms and Conditions configuration information. */
  checkoutAgreements?: Maybe<Array<Maybe<CheckoutAgreement>>>;
  /** Return information about CMS blocks. */
  cmsBlocks?: Maybe<CmsBlocks>;
  /** Return details about a CMS page. */
  cmsPage?: Maybe<CmsPage>;
  /** Return products that have been added to the specified compare list. */
  compareList?: Maybe<CompareList>;
  /** The countries query provides information for all countries. */
  countries?: Maybe<Array<Maybe<Country>>>;
  /** The countries query provides information for a single country. */
  country?: Maybe<Country>;
  /** Return information about the store's currency. */
  currency?: Maybe<Currency>;
  /** Return the attribute type, given an attribute code and entity type. */
  customAttributeMetadata?: Maybe<CustomAttributeMetadata>;
  /** Return detailed information about a customer account. */
  customer?: Maybe<Customer>;
  /** Return information about the customer's shopping cart. */
  customerCart: Cart;
  /** Return a list of downloadable products the customer has purchased. */
  customerDownloadableProducts?: Maybe<CustomerDownloadableProducts>;
  /** @deprecated Use the `customer` query instead. */
  customerOrders?: Maybe<CustomerOrders>;
  /** Return a list of customer payment tokens stored in the vault. */
  customerPaymentTokens?: Maybe<CustomerPaymentTokens>;
  errorCodes: Array<Scalars['String']>;
  /** Retrieve the secure PayPal URL for a Payments Pro Hosted Solution transaction. */
  getHostedProUrl?: Maybe<HostedProUrl>;
  /** Retrieve payment credentials for a transaction. Use this query for Payflow Link and Payments Advanced payment methods. */
  getPayflowLinkToken?: Maybe<PayflowLinkToken>;
  heartbeat: Scalars['String'];
  /** Check whether the specified email has already been used to create a customer account. */
  isEmailAvailable?: Maybe<IsEmailAvailableOutput>;
  /** The pickup locations query searches for locations that match the search request requirements. */
  pickupLocations?: Maybe<PickupLocations>;
  /** Return the active ratings attributes and the values each rating can have. */
  productReviewRatingsMetadata: ProductReviewRatingsMetadata;
  /** Search for products that match the criteria specified in the `search` and `filter` attributes. */
  products?: Maybe<Products>;
  /** Return the full details for a specified product, category, or CMS page. */
  route?: Maybe<RoutableInterface>;
  /** Return details about the store's configuration. */
  storeConfig?: Maybe<StoreConfig>;
  /**
   * Return the relative URL for a specified product, category or CMS page.
   * @deprecated Use the `route` query instead.
   */
  urlResolver?: Maybe<EntityUrl>;
  /**
   * Return the contents of a customer's wish list.
   * @deprecated Moved under `Customer.wishlist`.
   */
  wishlist?: Maybe<WishlistOutput>;
  /** Entry point to get all settings for the site */
  wpAllSettings?: Maybe<WpSettings>;
  /** Connection between the RootQuery type and the category type */
  wpCategories?: Maybe<WpRootQueryToCategoryConnection>;
  /** A 0bject */
  wpCategory?: Maybe<WpCategory>;
  /** Returns a Comment */
  wpComment?: Maybe<WpComment>;
  /** Connection between the RootQuery type and the Comment type */
  wpComments?: Maybe<WpRootQueryToCommentConnection>;
  /** A node used to manage content */
  wpContentNode?: Maybe<WpContentNode>;
  /** Connection between the RootQuery type and the ContentNode type */
  wpContentNodes?: Maybe<WpRootQueryToContentNodeConnection>;
  /** Fetch a Content Type node by unique Identifier */
  wpContentType?: Maybe<WpContentType>;
  /** Connection between the RootQuery type and the ContentType type */
  wpContentTypes?: Maybe<WpRootQueryToContentTypeConnection>;
  /** Fields of the &#039;DiscussionSettings&#039; settings group */
  wpDiscussionSettings?: Maybe<WpDiscussionSettings>;
  /** Fields of the &#039;GeneralSettings&#039; settings group */
  wpGeneralSettings?: Maybe<WpGeneralSettings>;
  /** An object of the mediaItem Type.  */
  wpMediaItem?: Maybe<WpMediaItem>;
  /**
   * A mediaItem object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  wpMediaItemBy?: Maybe<WpMediaItem>;
  /** Connection between the RootQuery type and the mediaItem type */
  wpMediaItems?: Maybe<WpRootQueryToMediaItemConnection>;
  /** A WordPress navigation menu */
  wpMenu?: Maybe<WpMenu>;
  /** A WordPress navigation menu item */
  wpMenuItem?: Maybe<WpMenuItem>;
  /** Connection between the RootQuery type and the MenuItem type */
  wpMenuItems?: Maybe<WpRootQueryToMenuItemConnection>;
  /** Connection between the RootQuery type and the Menu type */
  wpMenus?: Maybe<WpRootQueryToMenuConnection>;
  /** Fetches an object given its ID */
  wpNode?: Maybe<WpNode>;
  /** Fetches an object given its Unique Resource Identifier */
  wpNodeByUri?: Maybe<WpUniformResourceIdentifiable>;
  /** An object of the page Type.  */
  wpPage?: Maybe<WpPage>;
  /**
   * A page object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  wpPageBy?: Maybe<WpPage>;
  /** Connection between the RootQuery type and the page type */
  wpPages?: Maybe<WpRootQueryToPageConnection>;
  /** A WordPress plugin */
  wpPlugin?: Maybe<WpPlugin>;
  /** Connection between the RootQuery type and the Plugin type */
  wpPlugins?: Maybe<WpRootQueryToPluginConnection>;
  /** An object of the post Type.  */
  wpPost?: Maybe<WpPost>;
  /**
   * A post object
   * @deprecated Deprecated in favor of using the single entry point for this type with ID and IDType fields. For example, instead of postBy( id: &quot;&quot; ), use post(id: &quot;&quot; idType: &quot;&quot;)
   */
  wpPostBy?: Maybe<WpPost>;
  /** A 0bject */
  wpPostFormat?: Maybe<WpPostFormat>;
  /** Connection between the RootQuery type and the postFormat type */
  wpPostFormats?: Maybe<WpRootQueryToPostFormatConnection>;
  /** Connection between the RootQuery type and the post type */
  wpPosts?: Maybe<WpRootQueryToPostConnection>;
  /** Fields of the &#039;ReadingSettings&#039; settings group */
  wpReadingSettings?: Maybe<WpReadingSettings>;
  /** Connection between the RootQuery type and the EnqueuedScript type */
  wpRegisteredScripts?: Maybe<WpRootQueryToEnqueuedScriptConnection>;
  /** Connection between the RootQuery type and the EnqueuedStylesheet type */
  wpRegisteredStylesheets?: Maybe<WpRootQueryToEnqueuedStylesheetConnection>;
  /** Connection between the RootQuery type and the ContentRevisionUnion type */
  wpRevisions?: Maybe<WpRootQueryToContentRevisionUnionConnection>;
  /** A 0bject */
  wpTag?: Maybe<WpTag>;
  /** Connection between the RootQuery type and the tag type */
  wpTags?: Maybe<WpRootQueryToTagConnection>;
  /** Connection between the RootQuery type and the Taxonomy type */
  wpTaxonomies?: Maybe<WpRootQueryToTaxonomyConnection>;
  /** Fetch a Taxonomy node by unique Identifier */
  wpTaxonomy?: Maybe<WpTaxonomy>;
  /** A node in a taxonomy used to group and relate content nodes */
  wpTermNode?: Maybe<WpTermNode>;
  /** Connection between the RootQuery type and the TermNode type */
  wpTerms?: Maybe<WpRootQueryToTermNodeConnection>;
  /** A Theme object */
  wpTheme?: Maybe<WpTheme>;
  /** Connection between the RootQuery type and the Theme type */
  wpThemes?: Maybe<WpRootQueryToThemeConnection>;
  /** Returns a user */
  wpUser?: Maybe<WpUser>;
  /** Returns a user role */
  wpUserRole?: Maybe<WpUserRole>;
  /** Connection between the RootQuery type and the UserRole type */
  wpUserRoles?: Maybe<WpRootQueryToUserRoleConnection>;
  /** Connection between the RootQuery type and the User type */
  wpUsers?: Maybe<WpRootQueryToUserConnection>;
  /** Returns the current user */
  wpViewer?: Maybe<WpUser>;
  /** Fields of the &#039;WritingSettings&#039; settings group */
  wpWritingSettings?: Maybe<WpWritingSettings>;
};


export type QueryAvailableStoresArgs = {
  useCurrentGroup?: InputMaybe<Scalars['Boolean']>;
};


export type QueryCartArgs = {
  cart_id: Scalars['String'];
};


export type QueryCategoriesArgs = {
  currentPage?: InputMaybe<Scalars['Int']>;
  filters?: InputMaybe<CategoryFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']>;
};


export type QueryCategoryArgs = {
  id?: InputMaybe<Scalars['Int']>;
};


export type QueryCategoryListArgs = {
  filters?: InputMaybe<CategoryFilterInput>;
};


export type QueryCmsBlocksArgs = {
  identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


export type QueryCmsPageArgs = {
  id?: InputMaybe<Scalars['Int']>;
  identifier?: InputMaybe<Scalars['String']>;
};


export type QueryCompareListArgs = {
  uid: Scalars['ID'];
};


export type QueryCountryArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QueryCustomAttributeMetadataArgs = {
  attributes: Array<AttributeInput>;
};


export type QueryGetHostedProUrlArgs = {
  input: HostedProUrlInput;
};


export type QueryGetPayflowLinkTokenArgs = {
  input: PayflowLinkTokenInput;
};


export type QueryIsEmailAvailableArgs = {
  email: Scalars['String'];
};


export type QueryPickupLocationsArgs = {
  area?: InputMaybe<AreaInput>;
  currentPage?: InputMaybe<Scalars['Int']>;
  filters?: InputMaybe<PickupLocationFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']>;
  productsInfo?: InputMaybe<Array<InputMaybe<ProductInfoInput>>>;
  sort?: InputMaybe<PickupLocationSortInput>;
};


export type QueryProductsArgs = {
  currentPage?: InputMaybe<Scalars['Int']>;
  filter?: InputMaybe<ProductAttributeFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']>;
  search?: InputMaybe<Scalars['String']>;
  sort?: InputMaybe<ProductAttributeSortInput>;
};


export type QueryRouteArgs = {
  url: Scalars['String'];
};


export type QueryUrlResolverArgs = {
  url: Scalars['String'];
};


export type QueryWpCategoriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpRootQueryToCategoryConnectionWhereArgs>;
};


export type QueryWpCategoryArgs = {
  id: Scalars['ID'];
  idType?: InputMaybe<WpCategoryIdType>;
};


export type QueryWpCommentArgs = {
  id: Scalars['ID'];
};


export type QueryWpCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpRootQueryToCommentConnectionWhereArgs>;
};


export type QueryWpContentNodeArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']>;
  contentType?: InputMaybe<WpContentTypeEnum>;
  id: Scalars['ID'];
  idType?: InputMaybe<WpContentNodeIdTypeEnum>;
};


export type QueryWpContentNodesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpRootQueryToContentNodeConnectionWhereArgs>;
};


export type QueryWpContentTypeArgs = {
  id: Scalars['ID'];
  idType?: InputMaybe<WpContentTypeIdTypeEnum>;
};


export type QueryWpContentTypesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type QueryWpMediaItemArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  idType?: InputMaybe<WpMediaItemIdType>;
};


export type QueryWpMediaItemByArgs = {
  id?: InputMaybe<Scalars['ID']>;
  mediaItemId?: InputMaybe<Scalars['Int']>;
  slug?: InputMaybe<Scalars['String']>;
  uri?: InputMaybe<Scalars['String']>;
};


export type QueryWpMediaItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpRootQueryToMediaItemConnectionWhereArgs>;
};


export type QueryWpMenuArgs = {
  id: Scalars['ID'];
  idType?: InputMaybe<WpMenuNodeIdTypeEnum>;
};


export type QueryWpMenuItemArgs = {
  id: Scalars['ID'];
  idType?: InputMaybe<WpMenuItemNodeIdTypeEnum>;
};


export type QueryWpMenuItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpRootQueryToMenuItemConnectionWhereArgs>;
};


export type QueryWpMenusArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpRootQueryToMenuConnectionWhereArgs>;
};


export type QueryWpNodeArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


export type QueryWpNodeByUriArgs = {
  uri: Scalars['String'];
};


export type QueryWpPageArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  idType?: InputMaybe<WpPageIdType>;
};


export type QueryWpPageByArgs = {
  id?: InputMaybe<Scalars['ID']>;
  pageId?: InputMaybe<Scalars['Int']>;
  uri?: InputMaybe<Scalars['String']>;
};


export type QueryWpPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpRootQueryToPageConnectionWhereArgs>;
};


export type QueryWpPluginArgs = {
  id: Scalars['ID'];
};


export type QueryWpPluginsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpRootQueryToPluginConnectionWhereArgs>;
};


export type QueryWpPostArgs = {
  asPreview?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  idType?: InputMaybe<WpPostIdType>;
};


export type QueryWpPostByArgs = {
  id?: InputMaybe<Scalars['ID']>;
  postId?: InputMaybe<Scalars['Int']>;
  slug?: InputMaybe<Scalars['String']>;
  uri?: InputMaybe<Scalars['String']>;
};


export type QueryWpPostFormatArgs = {
  id: Scalars['ID'];
  idType?: InputMaybe<WpPostFormatIdType>;
};


export type QueryWpPostFormatsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpRootQueryToPostFormatConnectionWhereArgs>;
};


export type QueryWpPostsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpRootQueryToPostConnectionWhereArgs>;
};


export type QueryWpRegisteredScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type QueryWpRegisteredStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type QueryWpRevisionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpRootQueryToContentRevisionUnionConnectionWhereArgs>;
};


export type QueryWpTagArgs = {
  id: Scalars['ID'];
  idType?: InputMaybe<WpTagIdType>;
};


export type QueryWpTagsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpRootQueryToTagConnectionWhereArgs>;
};


export type QueryWpTaxonomiesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type QueryWpTaxonomyArgs = {
  id: Scalars['ID'];
  idType?: InputMaybe<WpTaxonomyIdTypeEnum>;
};


export type QueryWpTermNodeArgs = {
  id: Scalars['ID'];
  idType?: InputMaybe<WpTermNodeIdTypeEnum>;
  taxonomy?: InputMaybe<WpTaxonomyEnum>;
};


export type QueryWpTermsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpRootQueryToTermNodeConnectionWhereArgs>;
};


export type QueryWpThemeArgs = {
  id: Scalars['ID'];
};


export type QueryWpThemesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type QueryWpUserArgs = {
  id: Scalars['ID'];
  idType?: InputMaybe<WpUserNodeIdTypeEnum>;
};


export type QueryWpUserRoleArgs = {
  id: Scalars['ID'];
};


export type QueryWpUserRolesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


export type QueryWpUsersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpRootQueryToUserConnectionWhereArgs>;
};

export type RazorpayOrder = {
  __typename?: 'RazorpayOrder';
  amount?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  order_quote_id?: Maybe<Scalars['String']>;
  rzp_order_id?: Maybe<Scalars['String']>;
  success: Scalars['Boolean'];
};

export type Region = {
  __typename?: 'Region';
  /** The two-letter code for the region, such as TX for Texas. */
  code?: Maybe<Scalars['String']>;
  /** The unique ID for a `Region` object. */
  id?: Maybe<Scalars['Int']>;
  /** The name of the region, such as Texas. */
  name?: Maybe<Scalars['String']>;
};

/** Specifies the cart from which to remove a coupon. */
export type RemoveCouponFromCartInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String'];
};

/** Contains details about the cart after removing a coupon. */
export type RemoveCouponFromCartOutput = {
  __typename?: 'RemoveCouponFromCartOutput';
  /** The cart after removing a coupon. */
  cart?: Maybe<Cart>;
};

/** Specifies which items to remove from the cart. */
export type RemoveItemFromCartInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String'];
  /** Deprecated. Use `cart_item_uid` instead. */
  cart_item_id?: InputMaybe<Scalars['Int']>;
  /** Required field. The unique ID for a `CartItemInterface` object. */
  cart_item_uid?: InputMaybe<Scalars['ID']>;
};

/** Contains details about the cart after removing an item. */
export type RemoveItemFromCartOutput = {
  __typename?: 'RemoveItemFromCartOutput';
  /** The cart after removing an item. */
  cart: Cart;
};

/** Defines which products to remove from a compare list. */
export type RemoveProductsFromCompareListInput = {
  /** An array of product IDs to remove from the compare list. */
  products: Array<InputMaybe<Scalars['ID']>>;
  /** The unique identifier of the compare list to modify. */
  uid: Scalars['ID'];
};

/** Contains the customer's wish list and any errors encountered. */
export type RemoveProductsFromWishlistOutput = {
  __typename?: 'RemoveProductsFromWishlistOutput';
  /** An array of errors encountered while deleting products from a wish list. */
  user_errors: Array<Maybe<WishListUserInputError>>;
  /** Contains the wish list with after items were successfully deleted. */
  wishlist: Wishlist;
};

/** Contains the cart and any errors after adding products. */
export type ReorderItemsOutput = {
  __typename?: 'ReorderItemsOutput';
  /** Detailed information about the customer's cart. */
  cart: Cart;
  /** An array of reordering errors. */
  userInputErrors: Array<Maybe<CheckoutUserInputError>>;
};

/** Contains the result of a request to revoke a customer token. */
export type RevokeCustomerTokenOutput = {
  __typename?: 'RevokeCustomerTokenOutput';
  /** The result of a request to revoke a customer token. */
  result: Scalars['Boolean'];
};

/** Routable entities serve as the model for a rendered page. */
export type RoutableInterface = {
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int'];
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
};

/** Contains details about a comment. */
export type SalesCommentItem = {
  __typename?: 'SalesCommentItem';
  /** The text of the message. */
  message: Scalars['String'];
  /** The timestamp of the comment. */
  timestamp: Scalars['String'];
};

export type SalesItemInterface = {
  __typename?: 'SalesItemInterface';
  /** The entered gift message for the order item */
  gift_message?: Maybe<GiftMessage>;
};

/** Provides navigation for the query response. */
export type SearchResultPageInfo = {
  __typename?: 'SearchResultPageInfo';
  /** The specific page to return. */
  current_page?: Maybe<Scalars['Int']>;
  /** The maximum number of items to return per page of results. */
  page_size?: Maybe<Scalars['Int']>;
  /** The total number of pages in the response. */
  total_pages?: Maybe<Scalars['Int']>;
};

/** A string that contains search suggestion */
export type SearchSuggestion = {
  __typename?: 'SearchSuggestion';
  /** The search suggestion of existing product. */
  search: Scalars['String'];
};

/** Contains details about a selected bundle option. */
export type SelectedBundleOption = {
  __typename?: 'SelectedBundleOption';
  /** @deprecated Use `uid` instead */
  id: Scalars['Int'];
  /** The display name of the selected bundle product option. */
  label: Scalars['String'];
  /** The type of selected bundle product option. */
  type: Scalars['String'];
  /** The unique ID for a `SelectedBundleOption` object */
  uid: Scalars['ID'];
  /** An array of selected bundle option values. */
  values: Array<Maybe<SelectedBundleOptionValue>>;
};

/** Contains details about a value for a selected bundle option. */
export type SelectedBundleOptionValue = {
  __typename?: 'SelectedBundleOptionValue';
  /** Use `uid` instead */
  id: Scalars['Int'];
  /** The display name of the value for the selected bundle product option. */
  label: Scalars['String'];
  /** The price of the value for the selected bundle product option. */
  price: Scalars['Float'];
  /** The quantity of the value for the selected bundle product option. */
  quantity: Scalars['Float'];
  /** The unique ID for a `SelectedBundleOptionValue` object */
  uid: Scalars['ID'];
};

/** Contains details about a selected configurable option. */
export type SelectedConfigurableOption = {
  __typename?: 'SelectedConfigurableOption';
  /** The unique ID for a `ConfigurableProductOptions` object. */
  configurable_product_option_uid: Scalars['ID'];
  /** The unique ID for a `ConfigurableProductOptionsValues` object. */
  configurable_product_option_value_uid: Scalars['ID'];
  /** @deprecated Use `SelectedConfigurableOption.configurable_product_option_uid` instead. */
  id: Scalars['Int'];
  /** The display text for the option. */
  option_label: Scalars['String'];
  /** @deprecated Use `SelectedConfigurableOption.configurable_product_option_value_uid` instead. */
  value_id: Scalars['Int'];
  /** The display name of the selected configurable option. */
  value_label: Scalars['String'];
};

/** Identifies a customized product that has been placed in a cart. */
export type SelectedCustomizableOption = {
  __typename?: 'SelectedCustomizableOption';
  /** The unique ID for a specific `CustomizableOptionInterface` object, such as a `CustomizableFieldOption`, `CustomizableFileOption`, or `CustomizableAreaOption` object. */
  customizable_option_uid: Scalars['ID'];
  /** @deprecated Use `SelectedCustomizableOption.customizable_option_uid` instead. */
  id: Scalars['Int'];
  /** Indicates whether the customizable option is required. */
  is_required: Scalars['Boolean'];
  /** The display name of the selected customizable option. */
  label: Scalars['String'];
  /** A value indicating the order to display this option. */
  sort_order: Scalars['Int'];
  /** The type of `CustomizableOptionInterface` object. */
  type: Scalars['String'];
  /** An array of selectable values. */
  values: Array<Maybe<SelectedCustomizableOptionValue>>;
};

/** Identifies the value of the selected customized option. */
export type SelectedCustomizableOptionValue = {
  __typename?: 'SelectedCustomizableOptionValue';
  /** The unique ID for a value object that corresponds to the object represented by the `customizable_option_uid` attribute. */
  customizable_option_value_uid: Scalars['ID'];
  /** @deprecated Use `SelectedCustomizableOptionValue.customizable_option_value_uid` instead. */
  id: Scalars['Int'];
  /** The display name of the selected value. */
  label: Scalars['String'];
  /** The price of the selected customizable value. */
  price: CartItemSelectedOptionValuePrice;
  /** The text identifying the selected value. */
  value: Scalars['String'];
};

/** Describes the payment method the shopper selected. */
export type SelectedPaymentMethod = {
  __typename?: 'SelectedPaymentMethod';
  /** The payment method code. */
  code: Scalars['String'];
  /** The purchase order number. */
  purchase_order_number?: Maybe<Scalars['String']>;
  /** The payment method title. */
  title: Scalars['String'];
};

/** Contains details about the selected shipping method and carrier. */
export type SelectedShippingMethod = {
  __typename?: 'SelectedShippingMethod';
  /** The cost of shipping using this shipping method. */
  amount: Money;
  /** @deprecated The field should not be used on the storefront. */
  base_amount?: Maybe<Money>;
  /** A string that identifies a commercial carrier or an offline shipping method. */
  carrier_code: Scalars['String'];
  /** The label for the carrier code. */
  carrier_title: Scalars['String'];
  /** A shipping method code associated with a carrier. */
  method_code: Scalars['String'];
  /** The label for the method code. */
  method_title: Scalars['String'];
};

/** Defines the referenced product and the email sender and recipients. */
export type SendEmailToFriendInput = {
  /** The ID of the product that the sender is referencing. */
  product_id: Scalars['Int'];
  /** An array containing information about each recipient. */
  recipients: Array<InputMaybe<SendEmailToFriendRecipientInput>>;
  /** Information about the customer and the content of the message. */
  sender: SendEmailToFriendSenderInput;
};

/** Contains information about the sender and recipients. */
export type SendEmailToFriendOutput = {
  __typename?: 'SendEmailToFriendOutput';
  /** An array containing information about each recipient. */
  recipients?: Maybe<Array<Maybe<SendEmailToFriendRecipient>>>;
  /** Information about the customer and the content of the message. */
  sender?: Maybe<SendEmailToFriendSender>;
};

/** An output object that contains information about the recipient. */
export type SendEmailToFriendRecipient = {
  __typename?: 'SendEmailToFriendRecipient';
  /** The email address of the recipient. */
  email: Scalars['String'];
  /** The name of the recipient. */
  name: Scalars['String'];
};

/** Contains details about a recipient. */
export type SendEmailToFriendRecipientInput = {
  /** The email address of the recipient. */
  email: Scalars['String'];
  /** The name of the recipient. */
  name: Scalars['String'];
};

/** An output object that contains information about the sender. */
export type SendEmailToFriendSender = {
  __typename?: 'SendEmailToFriendSender';
  /** The email address of the sender. */
  email: Scalars['String'];
  /** The text of the message to be sent. */
  message: Scalars['String'];
  /** The name of the sender. */
  name: Scalars['String'];
};

/** Contains details about the sender. */
export type SendEmailToFriendSenderInput = {
  /** The email address of the sender. */
  email: Scalars['String'];
  /** The text of the message to be sent. */
  message: Scalars['String'];
  /** The name of the sender. */
  name: Scalars['String'];
};

/** Contains details about the configuration of the Email to a Friend feature. */
export type SendFriendConfiguration = {
  __typename?: 'SendFriendConfiguration';
  /** Indicates whether the Email to a Friend feature is enabled. */
  enabled_for_customers: Scalars['Boolean'];
  /** Indicates whether the Email to a Friend feature is enabled for guests. */
  enabled_for_guests: Scalars['Boolean'];
};

/** Sets the billing address. */
export type SetBillingAddressOnCartInput = {
  /** The billing address. */
  billing_address: BillingAddressInput;
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String'];
};

/** Contains details about the cart after setting the billing address. */
export type SetBillingAddressOnCartOutput = {
  __typename?: 'SetBillingAddressOnCartOutput';
  /** The cart after setting the billing address. */
  cart: Cart;
};

/** Defines the guest email and cart. */
export type SetGuestEmailOnCartInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String'];
  /** The email address of the guest. */
  email: Scalars['String'];
};

/** Contains details about the cart after setting the email of a guest. */
export type SetGuestEmailOnCartOutput = {
  __typename?: 'SetGuestEmailOnCartOutput';
  /** The cart after setting the guest email. */
  cart: Cart;
};

/** Applies a payment method to the quote. */
export type SetPaymentMethodAndPlaceOrderInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String'];
  /** The payment method data to apply to the cart. */
  payment_method: PaymentMethodInput;
};

/** Applies a payment method to the cart. */
export type SetPaymentMethodOnCartInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String'];
  /** The payment method data to apply to the cart. */
  payment_method: PaymentMethodInput;
};

/** Contains details about the cart after setting the payment method. */
export type SetPaymentMethodOnCartOutput = {
  __typename?: 'SetPaymentMethodOnCartOutput';
  /** The cart after setting the payment method. */
  cart: Cart;
};

export type SetRzpPaymentDetailsOnCartInput = {
  cart_id: Scalars['String'];
  rzp_order_id: Scalars['String'];
  rzp_payment_id: Scalars['String'];
  rzp_signature: Scalars['String'];
};

export type SetRzpPaymentDetailsOnCartOutput = {
  __typename?: 'SetRzpPaymentDetailsOnCartOutput';
  cart: Cart;
};

/** Specifies an array of addresses to use for shipping. */
export type SetShippingAddressesOnCartInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String'];
  /** An array of shipping addresses. */
  shipping_addresses: Array<InputMaybe<ShippingAddressInput>>;
};

/** Contains details about the cart after setting the shipping addresses. */
export type SetShippingAddressesOnCartOutput = {
  __typename?: 'SetShippingAddressesOnCartOutput';
  /** The cart after setting the shipping addresses. */
  cart: Cart;
};

/** Applies one or shipping methods to the cart. */
export type SetShippingMethodsOnCartInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String'];
  /** An array of shipping methods. */
  shipping_methods: Array<InputMaybe<ShippingMethodInput>>;
};

/** Contains details about the cart after setting the shipping methods. */
export type SetShippingMethodsOnCartOutput = {
  __typename?: 'SetShippingMethodsOnCartOutput';
  /** The cart after setting the shipping methods. */
  cart: Cart;
};

/** Defines whether bundle items must be shipped together. */
export enum ShipBundleItemsEnum {
  /** @deprecated  */
  Separately = 'SEPARATELY',
  /** @deprecated  */
  Together = 'TOGETHER'
}

export type ShipmentItem = ShipmentItemInterface & {
  __typename?: 'ShipmentItem';
  /** The unique ID for a `ShipmentItemInterface` object. */
  id: Scalars['ID'];
  /** The order item associated with the shipment item. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String'];
  /** The number of shipped items. */
  quantity_shipped: Scalars['Float'];
};

/** Order shipment item details. */
export type ShipmentItemInterface = {
  /** The unique ID for a `ShipmentItemInterface` object. */
  id: Scalars['ID'];
  /** The order item associated with the shipment item. */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product. */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product. */
  product_sale_price: Money;
  /** The SKU of the base product. */
  product_sku: Scalars['String'];
  /** The number of shipped items. */
  quantity_shipped: Scalars['Float'];
};

/** Contains order shipment tracking details. */
export type ShipmentTracking = {
  __typename?: 'ShipmentTracking';
  /** The shipping carrier for the order delivery. */
  carrier: Scalars['String'];
  /** The tracking number of the order shipment. */
  number?: Maybe<Scalars['String']>;
  /** The shipment tracking title. */
  title: Scalars['String'];
};

/** Defines a single shipping address. */
export type ShippingAddressInput = {
  /** Defines a shipping address. */
  address?: InputMaybe<CartAddressInput>;
  /** An ID from the customer's address book that uniquely identifies the address to be used for shipping. */
  customer_address_id?: InputMaybe<Scalars['Int']>;
  /** Text provided by the shopper. */
  customer_notes?: InputMaybe<Scalars['String']>;
  /** The code of Pickup Location which will be used for In-Store Pickup. */
  pickup_location_code?: InputMaybe<Scalars['String']>;
};

/** Contains shipping addresses and methods. */
export type ShippingCartAddress = CartAddressInterface & {
  __typename?: 'ShippingCartAddress';
  /** An array that lists the shipping methods that can be applied to the cart. */
  available_shipping_methods?: Maybe<Array<Maybe<AvailableShippingMethod>>>;
  /** @deprecated Use `cart_items_v2` instead. */
  cart_items?: Maybe<Array<Maybe<CartItemQuantity>>>;
  /** An array that lists the items in the cart. */
  cart_items_v2?: Maybe<Array<Maybe<CartItemInterface>>>;
  /** The city specified for the billing or shipping address. */
  city: Scalars['String'];
  /** The company specified for the billing or shipping address. */
  company?: Maybe<Scalars['String']>;
  /** An object containing the country label and code. */
  country: CartAddressCountry;
  /** Text provided by the shopper. */
  customer_notes?: Maybe<Scalars['String']>;
  /** The first name of the customer or guest. */
  firstname: Scalars['String'];
  /** @deprecated This information should not be exposed on the frontend. */
  items_weight?: Maybe<Scalars['Float']>;
  /** The last name of the customer or guest. */
  lastname: Scalars['String'];
  pickup_location_code?: Maybe<Scalars['String']>;
  /** The ZIP or postal code of the billing or shipping address. */
  postcode?: Maybe<Scalars['String']>;
  /** An object containing the region label and code. */
  region?: Maybe<CartAddressRegion>;
  /** An object that describes the selected shipping method. */
  selected_shipping_method?: Maybe<SelectedShippingMethod>;
  /** An array containing the street for the billing or shipping address. */
  street: Array<Maybe<Scalars['String']>>;
  /** The telephone number for the billing or shipping address. */
  telephone?: Maybe<Scalars['String']>;
};

/** Defines an individual shipping discount. This discount can be applied to shipping. */
export type ShippingDiscount = {
  __typename?: 'ShippingDiscount';
  /** The amount of the discount. */
  amount: Money;
};

/** Contains details about shipping and handling costs. */
export type ShippingHandling = {
  __typename?: 'ShippingHandling';
  /** The shipping amount, excluding tax. */
  amount_excluding_tax?: Maybe<Money>;
  /** The shipping amount, including tax. */
  amount_including_tax?: Maybe<Money>;
  /** The applied discounts to the shipping. */
  discounts?: Maybe<Array<Maybe<ShippingDiscount>>>;
  /** Details about taxes applied for shipping. */
  taxes?: Maybe<Array<Maybe<TaxItem>>>;
  /** The total amount for shipping. */
  total_amount: Money;
};

/** Defines the shipping carrier and method. */
export type ShippingMethodInput = {
  /** A string that identifies a commercial carrier or an offline delivery method. */
  carrier_code: Scalars['String'];
  /** A string that indicates which service a commercial carrier will use to ship items. For offline delivery methods, this value is similar to the label displayed on the checkout page. */
  method_code: Scalars['String'];
};

/** An implementation for simple product cart items. */
export type SimpleCartItem = CartItemInterface & {
  __typename?: 'SimpleCartItem';
  /** An array containing the customizable options the shopper selected. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** An array of errors encountered while loading the cart item */
  errors?: Maybe<Array<Maybe<CartItemError>>>;
  /** The entered gift message for the cart item */
  gift_message?: Maybe<GiftMessage>;
  /** @deprecated Use `uid` instead. */
  id: Scalars['String'];
  /** Contains details about the price of the item, including taxes and discounts. */
  prices?: Maybe<CartItemPrices>;
  /** Details about an item in the cart. */
  product: ProductInterface;
  /** The quantity of this item in the cart. */
  quantity: Scalars['Float'];
  /** The unique ID for a `CartItemInterface` object. */
  uid: Scalars['ID'];
};

/** Defines a simple product, which is tangible and is usually sold in single units or in fixed quantities. */
export type SimpleProduct = CustomizableProductInterface & PhysicalProductInterface & ProductInterface & RoutableInterface & {
  __typename?: 'SimpleProduct';
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  /** The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled. */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  color?: Maybe<Scalars['Int']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  /** An array of media gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use `media_gallery` instead.
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  /**
   * Indicates the price of an item.
   * @deprecated Use `price_range` for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** The range of prices for the product */
  price_range: PriceRange;
  /** An array of `TierPrice` objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  /** An array of `ProductLinks` objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int'];
  /** An array of products to be displayed in a Related Products block. */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date for a product with a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  /** The file name of a swatch image. */
  swatch_image?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use `__typename` instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']>;
};


/** Defines a simple product, which is tangible and is usually sold in single units or in fixed quantities. */
export type SimpleProductReviewsArgs = {
  currentPage?: InputMaybe<Scalars['Int']>;
  pageSize?: InputMaybe<Scalars['Int']>;
};

/** Defines a single product to add to the cart. */
export type SimpleProductCartItemInput = {
  /** An array that defines customizable options for the product. */
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  /** An object containing the `sku`, `quantity`, and other relevant information about the product. */
  data: CartItemInput;
};

/** Contains a simple product wish list item. */
export type SimpleWishlistItem = WishlistItemInterface & {
  __typename?: 'SimpleWishlistItem';
  /** The date and time the item was added to the wish list. */
  added_at: Scalars['String'];
  /** Custom options selected for the wish list item. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item. */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object. */
  id: Scalars['ID'];
  /** Product details of the wish list item. */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item. */
  quantity: Scalars['Float'];
};

/** Indicates whether to return results in ascending or descending order. */
export enum SortEnum {
  /** @deprecated  */
  Asc = 'ASC',
  /** @deprecated  */
  Desc = 'DESC'
}

/** Defines a possible sort field. */
export type SortField = {
  __typename?: 'SortField';
  /** The label of the sort field. */
  label?: Maybe<Scalars['String']>;
  /** The attribute code of the sort field. */
  value?: Maybe<Scalars['String']>;
};

/** Contains a default value for sort fields and all available sort fields. */
export type SortFields = {
  __typename?: 'SortFields';
  /** The default sort field value. */
  default?: Maybe<Scalars['String']>;
  /** An array of possible sort fields. */
  options?: Maybe<Array<Maybe<SortField>>>;
};

/** The type contains information about a store config */
export type StoreConfig = {
  __typename?: 'StoreConfig';
  /** Contains scripts that must be included in the HTML before the closing `<body>` tag. */
  absolute_footer?: Maybe<Scalars['String']>;
  /** Indicates whether guest users can write product reviews. Possible values: 1 (Yes) and 0 (No). */
  allow_guests_to_write_product_reviews?: Maybe<Scalars['String']>;
  /** The value of the Allow Gift Messages for Order Items option */
  allow_items?: Maybe<Scalars['String']>;
  /** The value of the Allow Gift Messages on Order Level option */
  allow_order?: Maybe<Scalars['String']>;
  /** Indicates whether to enable autocomplete on login and forgot password forms. */
  autocomplete_on_storefront?: Maybe<Scalars['Boolean']>;
  /** The base currency code. */
  base_currency_code?: Maybe<Scalars['String']>;
  /** A fully-qualified URL that is used to create relative links to the `base_url`. */
  base_link_url?: Maybe<Scalars['String']>;
  /** The fully-qualified URL that specifies the location of media files. */
  base_media_url?: Maybe<Scalars['String']>;
  /** The fully-qualified URL that specifies the location of static view files. */
  base_static_url?: Maybe<Scalars['String']>;
  /** The store’s fully-qualified base URL. */
  base_url?: Maybe<Scalars['String']>;
  /** Braintree cc vault status. */
  braintree_cc_vault_active?: Maybe<Scalars['String']>;
  /** The default sort order of the search results list. */
  catalog_default_sort_by?: Maybe<Scalars['String']>;
  /** Corresponds to the 'Display Prices In Product Lists' field in the Admin. It indicates how FPT information is displayed on category pages. */
  category_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>;
  /** The suffix applied to category pages, such as `.htm` or `.html`. */
  category_url_suffix?: Maybe<Scalars['String']>;
  /** Indicates whether only specific countries can use this payment method. */
  check_money_order_enable_for_specific_countries?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the Check/Money Order payment method is enabled. */
  check_money_order_enabled?: Maybe<Scalars['Boolean']>;
  /** The name of the party to whom the check must be payable. */
  check_money_order_make_check_payable_to?: Maybe<Scalars['String']>;
  /** The maximum order amount required to qualify for the Check/Money Order payment method. */
  check_money_order_max_order_total?: Maybe<Scalars['String']>;
  /** The minimum order amount required to qualify for the Check/Money Order payment method. */
  check_money_order_min_order_total?: Maybe<Scalars['String']>;
  /** The status of new orders placed using the Check/Money Order payment method. */
  check_money_order_new_order_status?: Maybe<Scalars['String']>;
  /** A comma-separated list of specific countries allowed to use the Check/Money Order payment method. */
  check_money_order_payment_from_specific_countries?: Maybe<Scalars['String']>;
  /** The full street address or PO Box where the checks are mailed. */
  check_money_order_send_check_to?: Maybe<Scalars['String']>;
  /** A number indicating the position of the Check/Money Order payment method in the list of available payment methods during checkout. */
  check_money_order_sort_order?: Maybe<Scalars['Int']>;
  /** The title of the Check/Money Order payment method displayed on the storefront. */
  check_money_order_title?: Maybe<Scalars['String']>;
  /** The name of the CMS page that identifies the home page for the store. */
  cms_home_page?: Maybe<Scalars['String']>;
  /** A specific CMS page that displays when cookies are not enabled for the browser. */
  cms_no_cookies?: Maybe<Scalars['String']>;
  /** A specific CMS page that displays when a 404 'Page Not Found' error occurs. */
  cms_no_route?: Maybe<Scalars['String']>;
  /**
   * A code assigned to the store to identify it.
   * @deprecated Use `store_code` instead.
   */
  code?: Maybe<Scalars['String']>;
  /** Indicates whether the `parent` or child (`itself`) thumbnail should be used in the cart for configurable products. */
  configurable_thumbnail_source?: Maybe<Scalars['String']>;
  /** Indicates whether the Contact Us form in enabled. */
  contact_enabled: Scalars['Boolean'];
  /** The copyright statement that appears at the bottom of each page. */
  copyright?: Maybe<Scalars['String']>;
  /** The description that provides a summary of your site for search engine listings. It should not be more than 160 characters in length. */
  default_description?: Maybe<Scalars['String']>;
  /** The default display currency code. */
  default_display_currency_code?: Maybe<Scalars['String']>;
  /** A series of keywords that describe your store, each separated by a comma. */
  default_keywords?: Maybe<Scalars['String']>;
  /** The title that appears at the title bar of each page when viewed in a browser. */
  default_title?: Maybe<Scalars['String']>;
  /** Controls the display of the demo store notice at the top of the page. Options: 0 (No) or 1 (Yes). */
  demonotice?: Maybe<Scalars['Int']>;
  /** The landing page that is associated with the base URL. */
  front?: Maybe<Scalars['String']>;
  /** The default number of products per page in Grid View. */
  grid_per_page?: Maybe<Scalars['Int']>;
  /** A list of numbers that define how many products can be displayed in Grid View. */
  grid_per_page_values?: Maybe<Scalars['String']>;
  /** Scripts that must be included in the HTML before the closing `<head>` tag. */
  head_includes?: Maybe<Scalars['String']>;
  /** The small graphic image (favicon) that appears in the address bar and tab of the browser. */
  head_shortcut_icon?: Maybe<Scalars['String']>;
  /** The path to the logo that appears in the header. */
  header_logo_src?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the store.
   * @deprecated Use `store_code` instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** Indicates whether the store view has been designated as the default within the store group. */
  is_default_store?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the store group has been designated as the default within the website. */
  is_default_store_group?: Maybe<Scalars['Boolean']>;
  /** The format of the search results list. */
  list_mode?: Maybe<Scalars['String']>;
  /** The default number of products per page in List View. */
  list_per_page?: Maybe<Scalars['Int']>;
  /** A list of numbers that define how many products can be displayed in List View. */
  list_per_page_values?: Maybe<Scalars['String']>;
  /** The store locale. */
  locale?: Maybe<Scalars['String']>;
  /** The Alt text that is associated with the logo. */
  logo_alt?: Maybe<Scalars['String']>;
  /** The height of the logo image, in pixels. */
  logo_height?: Maybe<Scalars['Int']>;
  /** The width of the logo image, in pixels. */
  logo_width?: Maybe<Scalars['Int']>;
  /** Indicates whether wishlists are enabled (1) or disabled (0). */
  magento_wishlist_general_is_enabled?: Maybe<Scalars['String']>;
  /** The minimum number of characters required for a valid password. */
  minimum_password_length?: Maybe<Scalars['String']>;
  /** Indicates whether newsletters are enabled. */
  newsletter_enabled: Scalars['Boolean'];
  /** The default page that displays when a 404 'Page not Found' error occurs. */
  no_route?: Maybe<Scalars['String']>;
  /** Payflow Pro vault status. */
  payment_payflowpro_cc_vault_active?: Maybe<Scalars['String']>;
  /** Corresponds to the 'Display Prices On Product View Page' field in the Admin. It indicates how FPT information is displayed on product pages. */
  product_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>;
  /** Indicates whether product reviews are enabled. Possible values: 1 (Yes) and 0 (No). */
  product_reviews_enabled?: Maybe<Scalars['String']>;
  /** The suffix applied to product pages, such as `.htm` or `.html`. */
  product_url_suffix?: Maybe<Scalars['String']>;
  /** Razorpay API Key ID */
  razorpay_key_id?: Maybe<Scalars['String']>;
  /** Razorpay Merchange Name Override */
  razorpay_merchant_name_override?: Maybe<Scalars['String']>;
  /** The number of different character classes (lowercase, uppercase, digits, special characters) required in a password. */
  required_character_classes_number?: Maybe<Scalars['String']>;
  /**
   * The ID of the root category.
   * @deprecated Use `root_category_uid` instead.
   */
  root_category_id?: Maybe<Scalars['Int']>;
  /** The unique ID for a `CategoryInterface` object. */
  root_category_uid?: Maybe<Scalars['ID']>;
  /** Corresponds to the 'Display Prices In Sales Modules' field in the Admin. It indicates how FPT information is displayed on cart, checkout, and order pages. */
  sales_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>;
  /** A secure fully-qualified URL that is used to create relative links to the `base_url`. */
  secure_base_link_url?: Maybe<Scalars['String']>;
  /** The secure fully-qualified URL that specifies the location of media files. */
  secure_base_media_url?: Maybe<Scalars['String']>;
  /** The secure fully-qualified URL that specifies the location of static view files. */
  secure_base_static_url?: Maybe<Scalars['String']>;
  /** The store’s fully-qualified secure base URL. */
  secure_base_url?: Maybe<Scalars['String']>;
  /** Email to a Friend configuration. */
  send_friend?: Maybe<SendFriendConfiguration>;
  /** Indicates whether a breadcrumb trail appears on all CMS pages in the catalog. 0 (No) or 1 (Yes). */
  show_cms_breadcrumbs?: Maybe<Scalars['Int']>;
  /** The unique ID of the store view. In the Admin, this is called the Store View Code. When making a GraphQL call, assign this value to the `Store` header to provide the scope. */
  store_code?: Maybe<Scalars['ID']>;
  /** The unique ID assigned to the store group. In the Admin, this is called the Store Name. */
  store_group_code?: Maybe<Scalars['ID']>;
  /** The label assigned to the store group. */
  store_group_name?: Maybe<Scalars['String']>;
  /** The label assigned to the store view. */
  store_name?: Maybe<Scalars['String']>;
  /** The store view sort order. */
  store_sort_order?: Maybe<Scalars['Int']>;
  /** The time zone of the store. */
  timezone?: Maybe<Scalars['String']>;
  /** A prefix that appears before the title to create a two- or three-part title. */
  title_prefix?: Maybe<Scalars['String']>;
  /** The character that separates the category name and subcategory in the browser title bar. */
  title_separator?: Maybe<Scalars['String']>;
  /** A suffix that appears after the title to create a two- or three-part title. */
  title_suffix?: Maybe<Scalars['String']>;
  /** Indicates whether the store code should be used in the URL. */
  use_store_in_url?: Maybe<Scalars['Boolean']>;
  /** The unique ID for the website. */
  website_code?: Maybe<Scalars['ID']>;
  /**
   * The ID number assigned to the website store.
   * @deprecated The field should not be used on the storefront.
   */
  website_id?: Maybe<Scalars['Int']>;
  /** The label assigned to the website. */
  website_name?: Maybe<Scalars['String']>;
  /** The unit of weight. */
  weight_unit?: Maybe<Scalars['String']>;
  /** Text that appears in the header of the page and includes the name of the logged in customer. */
  welcome?: Maybe<Scalars['String']>;
  /** Indicates whether only specific countries can use this payment method. */
  zero_subtotal_enable_for_specific_countries?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the Zero Subtotal payment method is enabled. */
  zero_subtotal_enabled?: Maybe<Scalars['Boolean']>;
  /** The status of new orders placed using the Zero Subtotal payment method. */
  zero_subtotal_new_order_status?: Maybe<Scalars['String']>;
  /** When the new order status is 'Processing', this can be set to `authorize_capture` to automatically invoice all items that have a zero balance. */
  zero_subtotal_payment_action?: Maybe<Scalars['String']>;
  /** A comma-separated list of specific countries allowed to use the Zero Subtotal payment method. */
  zero_subtotal_payment_from_specific_countries?: Maybe<Scalars['String']>;
  /** A number indicating the position of the Zero Subtotal payment method in the list of available payment methods during checkout. */
  zero_subtotal_sort_order?: Maybe<Scalars['Int']>;
  /** The title of the Zero Subtotal payment method displayed on the storefront. */
  zero_subtotal_title?: Maybe<Scalars['String']>;
};

/** Indicates where an attribute can be displayed. */
export type StorefrontProperties = {
  __typename?: 'StorefrontProperties';
  /** The relative position of the attribute in the layered navigation block. */
  position?: Maybe<Scalars['Int']>;
  /** Indicates whether the attribute is filterable with results, without results, or not at all. */
  use_in_layered_navigation?: Maybe<UseInLayeredNavigationOptions>;
  /** Indicates whether the attribute is displayed in product listings. */
  use_in_product_listing?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the attribute can be used in layered navigation on search results pages. */
  use_in_search_results_layered_navigation?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the attribute is displayed on product pages. */
  visible_on_catalog_pages?: Maybe<Scalars['Boolean']>;
};

/** Contains the result of the `subscribeEmailToNewsletter` operation. */
export type SubscribeEmailToNewsletterOutput = {
  __typename?: 'SubscribeEmailToNewsletterOutput';
  /** The status of the subscription request. */
  status?: Maybe<SubscriptionStatusesEnum>;
};

/** Indicates the status of the request. */
export enum SubscriptionStatusesEnum {
  /** @deprecated  */
  NotActive = 'NOT_ACTIVE',
  /** @deprecated  */
  Subscribed = 'SUBSCRIBED',
  /** @deprecated  */
  Unconfirmed = 'UNCONFIRMED',
  /** @deprecated  */
  Unsubscribed = 'UNSUBSCRIBED'
}

/** Describes the swatch type and a value. */
export type SwatchData = {
  __typename?: 'SwatchData';
  /** The type of swatch filter item: 1 - text; 2 - image. */
  type?: Maybe<Scalars['String']>;
  /** The value for the swatch item. It could be text or an image link. */
  value?: Maybe<Scalars['String']>;
};

export type SwatchDataInterface = {
  /** The value can be represented as color (HEX code), image link, or text. */
  value?: Maybe<Scalars['String']>;
};

export type SwatchLayerFilterItem = LayerFilterItemInterface & SwatchLayerFilterItemInterface & {
  __typename?: 'SwatchLayerFilterItem';
  /**
   * The count of items per filter.
   * @deprecated Use `AggregationOption.count` instead.
   */
  items_count?: Maybe<Scalars['Int']>;
  /**
   * The label for a filter.
   * @deprecated Use `AggregationOption.label` instead.
   */
  label?: Maybe<Scalars['String']>;
  /** Data required to render a swatch filter item. */
  swatch_data?: Maybe<SwatchData>;
  /**
   * The value of a filter request variable to be used in query.
   * @deprecated Use `AggregationOption.value` instead.
   */
  value_string?: Maybe<Scalars['String']>;
};

export type SwatchLayerFilterItemInterface = {
  /** Data required to render a swatch filter item. */
  swatch_data?: Maybe<SwatchData>;
};

/** Contains tax item details. */
export type TaxItem = {
  __typename?: 'TaxItem';
  /** The amount of tax applied to the item. */
  amount: Money;
  /** The rate used to calculate the tax. */
  rate: Scalars['Float'];
  /** A title that describes the tax. */
  title: Scalars['String'];
};

export type TextSwatchData = SwatchDataInterface & {
  __typename?: 'TextSwatchData';
  /** The value can be represented as color (HEX code), image link, or text. */
  value?: Maybe<Scalars['String']>;
};

/** Defines a price based on the quantity purchased. */
export type TierPrice = {
  __typename?: 'TierPrice';
  /** The price discount that this tier represents. */
  discount?: Maybe<ProductDiscount>;
  /** The price of the product at this tier. */
  final_price?: Maybe<Money>;
  /** The minimum number of items that must be purchased to qualify for this price tier. */
  quantity?: Maybe<Scalars['Float']>;
};

/** Modifies the specified items in the cart. */
export type UpdateCartItemsInput = {
  /** The unique ID of a `Cart` object. */
  cart_id: Scalars['String'];
  /** An array of items to be updated. */
  cart_items: Array<InputMaybe<CartItemUpdateInput>>;
};

/** Contains details about the cart after updating items. */
export type UpdateCartItemsOutput = {
  __typename?: 'UpdateCartItemsOutput';
  /** The cart after updating products. */
  cart: Cart;
};

/** Contains the customer's wish list and any errors encountered. */
export type UpdateProductsInWishlistOutput = {
  __typename?: 'UpdateProductsInWishlistOutput';
  /** An array of errors encountered while updating products in a wish list. */
  user_errors: Array<Maybe<WishListUserInputError>>;
  /** Contains the wish list with all items that were successfully updated. */
  wishlist: Wishlist;
};

/** Contains URL rewrite details. */
export type UrlRewrite = {
  __typename?: 'UrlRewrite';
  /** An array of request parameters. */
  parameters?: Maybe<Array<Maybe<HttpQueryParameter>>>;
  /** The request URL. */
  url?: Maybe<Scalars['String']>;
};

/** This enumeration defines the entity type. */
export enum UrlRewriteEntityTypeEnum {
  /** @deprecated  */
  Category = 'CATEGORY',
  /** @deprecated  */
  CmsPage = 'CMS_PAGE',
  /** @deprecated  */
  Product = 'PRODUCT'
}

/** Defines whether the attribute is filterable in layered navigation. */
export enum UseInLayeredNavigationOptions {
  /** @deprecated  */
  FilterableNoResult = 'FILTERABLE_NO_RESULT',
  /** @deprecated  */
  FilterableWithResults = 'FILTERABLE_WITH_RESULTS',
  /** @deprecated  */
  No = 'NO'
}

/** Contains required input for payment methods with Vault support. */
export type VaultTokenInput = {
  /** The public hash of the payment token. */
  public_hash: Scalars['String'];
};

/** An implementation for virtual product cart items. */
export type VirtualCartItem = CartItemInterface & {
  __typename?: 'VirtualCartItem';
  /** An array containing customizable options the shopper selected. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** An array of errors encountered while loading the cart item */
  errors?: Maybe<Array<Maybe<CartItemError>>>;
  /** @deprecated Use `uid` instead. */
  id: Scalars['String'];
  /** Contains details about the price of the item, including taxes and discounts. */
  prices?: Maybe<CartItemPrices>;
  /** Details about an item in the cart. */
  product: ProductInterface;
  /** The quantity of this item in the cart. */
  quantity: Scalars['Float'];
  /** The unique ID for a `CartItemInterface` object. */
  uid: Scalars['ID'];
};

/** Defines a virtual product, which is a non-tangible product that does not require shipping and is not kept in inventory. */
export type VirtualProduct = CustomizableProductInterface & ProductInterface & RoutableInterface & {
  __typename?: 'VirtualProduct';
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  /** The relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled. */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  color?: Maybe<Scalars['Int']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  /** An array of media gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use `media_gallery` instead.
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  /**
   * Indicates the price of an item.
   * @deprecated Use `price_range` for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** The range of prices for the product */
  price_range: PriceRange;
  /** An array of `TierPrice` objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  /** An array of `ProductLinks` objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect. */
  redirect_code: Scalars['Int'];
  /** An array of products to be displayed in a Related Products block. */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date for a product with a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  /** The file name of a swatch image. */
  swatch_image?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use `price_tiers` for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use `__typename` instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
};


/** Defines a virtual product, which is a non-tangible product that does not require shipping and is not kept in inventory. */
export type VirtualProductReviewsArgs = {
  currentPage?: InputMaybe<Scalars['Int']>;
  pageSize?: InputMaybe<Scalars['Int']>;
};

/** Defines a single product to add to the cart. */
export type VirtualProductCartItemInput = {
  /** An array that defines customizable options for the product. */
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  /** An object containing the `sku`, `quantity`, and other relevant information about the product. */
  data: CartItemInput;
};

/** Contains a virtual product wish list item. */
export type VirtualWishlistItem = WishlistItemInterface & {
  __typename?: 'VirtualWishlistItem';
  /** The date and time the item was added to the wish list. */
  added_at: Scalars['String'];
  /** Custom options selected for the wish list item. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item. */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object. */
  id: Scalars['ID'];
  /** Product details of the wish list item. */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item. */
  quantity: Scalars['Float'];
};

/** Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from. */
export type WpAvatar = {
  __typename?: 'WPAvatar';
  /** URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo). */
  default?: Maybe<Scalars['String']>;
  /** HTML attributes to insert in the IMG element. Is not sanitized. */
  extraAttr?: Maybe<Scalars['String']>;
  /** Whether to always show the default image, never the Gravatar. */
  forceDefault?: Maybe<Scalars['Boolean']>;
  /** Whether the avatar was successfully found. */
  foundAvatar?: Maybe<Scalars['Boolean']>;
  /** Height of the avatar image. */
  height?: Maybe<Scalars['Int']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order. */
  rating?: Maybe<Scalars['String']>;
  /** Type of url scheme to use. Typically HTTP vs. HTTPS. */
  scheme?: Maybe<Scalars['String']>;
  /** The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image. */
  size?: Maybe<Scalars['Int']>;
  /** URL for the gravatar image source. */
  url?: Maybe<Scalars['String']>;
  /** Width of the avatar image. */
  width?: Maybe<Scalars['Int']>;
};

/** What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option */
export enum WpAvatarRatingEnum {
  /** Indicates a G level avatar rating level. */
  G = 'G',
  /** Indicates a PG level avatar rating level. */
  Pg = 'PG',
  /** Indicates an R level avatar rating level. */
  R = 'R',
  /** Indicates an X level avatar rating level. */
  X = 'X'
}

/** The category type */
export type WpCategory = WpDatabaseIdentifier & WpHierarchicalTermNode & WpMenuItemLinkable & WpNode & WpTermNode & WpUniformResourceIdentifiable & {
  __typename?: 'WPCategory';
  /** The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<WpCategoryToAncestorsCategoryConnection>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  categoryId?: Maybe<Scalars['Int']>;
  /** Connection between the category type and the category type */
  children?: Maybe<WpCategoryToCategoryConnection>;
  /** Connection between the category type and the ContentNode type */
  contentNodes?: Maybe<WpCategoryToContentNodeConnection>;
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  databaseId: Scalars['Int'];
  /** The description of the object */
  description?: Maybe<Scalars['String']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<WpTermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<WpTermNodeToEnqueuedStylesheetConnection>;
  /** The unique resource identifier path */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The link to the term */
  link?: Maybe<Scalars['String']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']>;
  /** Connection between the category type and the category type */
  parent?: Maybe<WpCategoryToParentCategoryConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']>;
  /** Connection between the category type and the post type */
  posts?: Maybe<WpCategoryToPostConnection>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']>;
  /** Connection between the category type and the Taxonomy type */
  taxonomy?: Maybe<WpCategoryToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};


/** The category type */
export type WpCategoryAncestorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The category type */
export type WpCategoryChildrenArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpCategoryToCategoryConnectionWhereArgs>;
};


/** The category type */
export type WpCategoryContentNodesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpCategoryToContentNodeConnectionWhereArgs>;
};


/** The category type */
export type WpCategoryEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The category type */
export type WpCategoryEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The category type */
export type WpCategoryPostsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpCategoryToPostConnectionWhereArgs>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum WpCategoryIdType {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}

/** Connection between the category type and the category type */
export type WpCategoryToAncestorsCategoryConnection = {
  __typename?: 'WPCategoryToAncestorsCategoryConnection';
  /** Edges for the CategoryToAncestorsCategoryConnection connection */
  edges?: Maybe<Array<Maybe<WpCategoryToAncestorsCategoryConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpCategory>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpCategoryToAncestorsCategoryConnectionEdge = {
  __typename?: 'WPCategoryToAncestorsCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpCategory>;
};

/** Connection between the category type and the category type */
export type WpCategoryToCategoryConnection = {
  __typename?: 'WPCategoryToCategoryConnection';
  /** Edges for the CategoryToCategoryConnection connection */
  edges?: Maybe<Array<Maybe<WpCategoryToCategoryConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpCategory>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpCategoryToCategoryConnectionEdge = {
  __typename?: 'WPCategoryToCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpCategory>;
};

/** Arguments for filtering the CategoryToCategoryConnection connection */
export type WpCategoryToCategoryConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<WpOrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<WpTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']>;
};

/** Connection between the category type and the ContentNode type */
export type WpCategoryToContentNodeConnection = {
  __typename?: 'WPCategoryToContentNodeConnection';
  /** Edges for the CategoryToContentNodeConnection connection */
  edges?: Maybe<Array<Maybe<WpCategoryToContentNodeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpContentNode>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpCategoryToContentNodeConnectionEdge = {
  __typename?: 'WPCategoryToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpContentNode>;
};

/** Arguments for filtering the CategoryToContentNodeConnection connection */
export type WpCategoryToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<WpContentTypesOfCategoryEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the category type and the category type */
export type WpCategoryToParentCategoryConnectionEdge = {
  __typename?: 'WPCategoryToParentCategoryConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<WpCategory>;
};

/** Connection between the category type and the post type */
export type WpCategoryToPostConnection = {
  __typename?: 'WPCategoryToPostConnection';
  /** Edges for the CategoryToPostConnection connection */
  edges?: Maybe<Array<Maybe<WpCategoryToPostConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpPost>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpCategoryToPostConnectionEdge = {
  __typename?: 'WPCategoryToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpPost>;
};

/** Arguments for filtering the CategoryToPostConnection connection */
export type WpCategoryToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the category type and the Taxonomy type */
export type WpCategoryToTaxonomyConnectionEdge = {
  __typename?: 'WPCategoryToTaxonomyConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<WpTaxonomy>;
};

/** A Comment object */
export type WpComment = WpDatabaseIdentifier & WpNode & {
  __typename?: 'WPComment';
  /** User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL. */
  agent?: Maybe<Scalars['String']>;
  /** The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL. */
  approved?: Maybe<Scalars['Boolean']>;
  /** The author of the comment */
  author?: Maybe<WpCommentToCommenterConnectionEdge>;
  /** IP address for the author. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL. */
  authorIp?: Maybe<Scalars['String']>;
  /**
   * ID for the comment, unique among comments.
   * @deprecated Deprecated in favor of databaseId
   */
  commentId?: Maybe<Scalars['Int']>;
  /** Connection between the Comment type and the ContentNode type */
  commentedOn?: Maybe<WpCommentToContentNodeConnectionEdge>;
  /** Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL. */
  content?: Maybe<Scalars['String']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int'];
  /** Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL. */
  date?: Maybe<Scalars['String']>;
  /** Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL. */
  dateGmt?: Maybe<Scalars['String']>;
  /** The globally unique identifier for the comment object */
  id: Scalars['ID'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL. */
  karma?: Maybe<Scalars['Int']>;
  /** Connection between the Comment type and the Comment type */
  parent?: Maybe<WpCommentToParentCommentConnectionEdge>;
  /** The database id of the parent comment node or null if it is the root comment */
  parentDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent comment node. */
  parentId?: Maybe<Scalars['ID']>;
  /** Connection between the Comment type and the Comment type */
  replies?: Maybe<WpCommentToCommentConnection>;
  /** Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL. */
  type?: Maybe<Scalars['String']>;
};


/** A Comment object */
export type WpCommentContentArgs = {
  format?: InputMaybe<WpPostObjectFieldFormatEnum>;
};


/** A Comment object */
export type WpCommentParentArgs = {
  where?: InputMaybe<WpCommentToParentCommentConnectionWhereArgs>;
};


/** A Comment object */
export type WpCommentRepliesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpCommentToCommentConnectionWhereArgs>;
};

/** A Comment Author object */
export type WpCommentAuthor = WpCommenter & WpNode & {
  __typename?: 'WPCommentAuthor';
  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */
  avatar?: Maybe<WpAvatar>;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'];
  /** The email for the comment author */
  email?: Maybe<Scalars['String']>;
  /** The globally unique identifier for the comment author object */
  id: Scalars['ID'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** The name for the comment author. */
  name?: Maybe<Scalars['String']>;
  /** The url the comment author. */
  url?: Maybe<Scalars['String']>;
};


/** A Comment Author object */
export type WpCommentAuthorAvatarArgs = {
  forceDefault?: InputMaybe<Scalars['Boolean']>;
  rating?: InputMaybe<WpAvatarRatingEnum>;
  size?: InputMaybe<Scalars['Int']>;
};

/** Connection between the Comment type and the Comment type */
export type WpCommentToCommentConnection = {
  __typename?: 'WPCommentToCommentConnection';
  /** Edges for the CommentToCommentConnection connection */
  edges?: Maybe<Array<Maybe<WpCommentToCommentConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpComment>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpCommentToCommentConnectionEdge = {
  __typename?: 'WPCommentToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpComment>;
};

/** Arguments for filtering the CommentToCommentConnection connection */
export type WpCommentToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<WpContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<WpOrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<WpCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']>;
};

/** Connection between the Comment type and the Commenter type */
export type WpCommentToCommenterConnectionEdge = {
  __typename?: 'WPCommentToCommenterConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<WpCommenter>;
};

/** Connection between the Comment type and the ContentNode type */
export type WpCommentToContentNodeConnectionEdge = {
  __typename?: 'WPCommentToContentNodeConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<WpContentNode>;
};

/** Connection between the Comment type and the Comment type */
export type WpCommentToParentCommentConnectionEdge = {
  __typename?: 'WPCommentToParentCommentConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<WpComment>;
};

/** Arguments for filtering the CommentToParentCommentConnection connection */
export type WpCommentToParentCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<WpContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<WpOrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<WpCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']>;
};

/** The author of a comment */
export type WpCommenter = {
  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */
  avatar?: Maybe<WpAvatar>;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'];
  /** The email address of the author of a comment. */
  email?: Maybe<Scalars['String']>;
  /** The globally unique identifier for the comment author. */
  id: Scalars['ID'];
  /** Whether the author information is considered restricted. (not fully public) */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** The name of the author of a comment. */
  name?: Maybe<Scalars['String']>;
  /** The url of the author of a comment. */
  url?: Maybe<Scalars['String']>;
};

/** Options for ordering the connection */
export enum WpCommentsConnectionOrderbyEnum {
  /** Order by browser user agent of the commenter. */
  CommentAgent = 'COMMENT_AGENT',
  /** Order by true/false approval of the comment. */
  CommentApproved = 'COMMENT_APPROVED',
  /** Order by name of the comment author. */
  CommentAuthor = 'COMMENT_AUTHOR',
  /** Order by e-mail of the comment author. */
  CommentAuthorEmail = 'COMMENT_AUTHOR_EMAIL',
  /** Order by IP address of the comment author. */
  CommentAuthorIp = 'COMMENT_AUTHOR_IP',
  /** Order by URL address of the comment author. */
  CommentAuthorUrl = 'COMMENT_AUTHOR_URL',
  /** Order by the comment contents. */
  CommentContent = 'COMMENT_CONTENT',
  /** Order by date/time timestamp of the comment. */
  CommentDate = 'COMMENT_DATE',
  /** Order by GMT timezone date/time timestamp of the comment. */
  CommentDateGmt = 'COMMENT_DATE_GMT',
  /** Order by the globally unique identifier for the comment object */
  CommentId = 'COMMENT_ID',
  /** Order by the array list of comment IDs listed in the where clause. */
  CommentIn = 'COMMENT_IN',
  /** Order by the comment karma score. */
  CommentKarma = 'COMMENT_KARMA',
  /** Order by the comment parent ID. */
  CommentParent = 'COMMENT_PARENT',
  /** Order by the post object ID. */
  CommentPostId = 'COMMENT_POST_ID',
  /** Order by the the type of comment, such as 'comment', 'pingback', or 'trackback'. */
  CommentType = 'COMMENT_TYPE',
  /** Order by the user ID. */
  UserId = 'USER_ID'
}

/** Nodes used to manage content */
export type WpContentNode = {
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<WpContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String'];
  /** The ID of the node in the database. */
  databaseId: Scalars['Int'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<WpContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<WpContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<WpContentNodeToEnqueuedStylesheetConnection>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']>;
  /** The unique resource identifier path */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<WpContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']>;
  /** The template assigned to a node of content */
  template?: Maybe<WpContentTemplate>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};


/** Nodes used to manage content */
export type WpContentNodeEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** Nodes used to manage content */
export type WpContentNodeEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum WpContentNodeIdTypeEnum {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the ContentNode type and the ContentType type */
export type WpContentNodeToContentTypeConnectionEdge = {
  __typename?: 'WPContentNodeToContentTypeConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<WpContentType>;
};

/** Connection between the ContentNode type and the User type */
export type WpContentNodeToEditLastConnectionEdge = {
  __typename?: 'WPContentNodeToEditLastConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<WpUser>;
};

/** Connection between the ContentNode type and the User type */
export type WpContentNodeToEditLockConnectionEdge = {
  __typename?: 'WPContentNodeToEditLockConnectionEdge';
  /** The timestamp for when the node was last edited */
  lockTimestamp?: Maybe<Scalars['String']>;
  /** The node of the connection, without the edges */
  node?: Maybe<WpUser>;
};

/** Connection between the ContentNode type and the EnqueuedScript type */
export type WpContentNodeToEnqueuedScriptConnection = {
  __typename?: 'WPContentNodeToEnqueuedScriptConnection';
  /** Edges for the ContentNodeToEnqueuedScriptConnection connection */
  edges?: Maybe<Array<Maybe<WpContentNodeToEnqueuedScriptConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpEnqueuedScript>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpContentNodeToEnqueuedScriptConnectionEdge = {
  __typename?: 'WPContentNodeToEnqueuedScriptConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpEnqueuedScript>;
};

/** Connection between the ContentNode type and the EnqueuedStylesheet type */
export type WpContentNodeToEnqueuedStylesheetConnection = {
  __typename?: 'WPContentNodeToEnqueuedStylesheetConnection';
  /** Edges for the ContentNodeToEnqueuedStylesheetConnection connection */
  edges?: Maybe<Array<Maybe<WpContentNodeToEnqueuedStylesheetConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpEnqueuedStylesheet>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpContentNodeToEnqueuedStylesheetConnectionEdge = {
  __typename?: 'WPContentNodeToEnqueuedStylesheetConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpEnqueuedStylesheet>;
};

/** A union of Content Node Types that support revisions */
export type WpContentRevisionUnion = WpPage | WpPost;

/** The template assigned to a node of content */
export type WpContentTemplate = {
  /** The name of the template */
  templateName?: Maybe<Scalars['String']>;
};

/** An Post Type object */
export type WpContentType = WpNode & WpUniformResourceIdentifiable & {
  __typename?: 'WPContentType';
  /** Whether this content type should can be exported. */
  canExport?: Maybe<Scalars['Boolean']>;
  /** Connection between the ContentType type and the Taxonomy type */
  connectedTaxonomies?: Maybe<WpContentTypeToTaxonomyConnection>;
  /** Connection between the ContentType type and the ContentNode type */
  contentNodes?: Maybe<WpContentTypeToContentNodeConnection>;
  /** Whether content of this type should be deleted when the author of it is deleted from the system. */
  deleteWithUser?: Maybe<Scalars['Boolean']>;
  /** Description of the content type. */
  description?: Maybe<Scalars['String']>;
  /** Whether to exclude nodes of this content type from front end search results. */
  excludeFromSearch?: Maybe<Scalars['Boolean']>;
  /** The plural name of the content type within the GraphQL Schema. */
  graphqlPluralName?: Maybe<Scalars['String']>;
  /** The singular name of the content type within the GraphQL Schema. */
  graphqlSingleName?: Maybe<Scalars['String']>;
  /** Whether this content type should have archives. Content archives are generated by type and by date. */
  hasArchive?: Maybe<Scalars['Boolean']>;
  /** Whether the content type is hierarchical, for example pages. */
  hierarchical?: Maybe<Scalars['Boolean']>;
  /** The globally unique identifier of the post-type object. */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether this page is set to the static front page. */
  isFrontPage: Scalars['Boolean'];
  /** Whether this page is set to the blog posts page. */
  isPostsPage: Scalars['Boolean'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** Display name of the content type. */
  label?: Maybe<Scalars['String']>;
  /** Details about the content type labels. */
  labels?: Maybe<WpPostTypeLabelDetails>;
  /** The name of the icon file to display as a menu icon. */
  menuIcon?: Maybe<Scalars['String']>;
  /** The position of this post type in the menu. Only applies if show_in_menu is true. */
  menuPosition?: Maybe<Scalars['Int']>;
  /** The internal name of the post type. This should not be used for display purposes. */
  name?: Maybe<Scalars['String']>;
  /** Whether a content type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention. */
  public?: Maybe<Scalars['Boolean']>;
  /** Whether queries can be performed on the front end for the content type as part of parse_request(). */
  publiclyQueryable?: Maybe<Scalars['Boolean']>;
  /** Name of content type to display in REST API &quot;wp/v2&quot; namespace. */
  restBase?: Maybe<Scalars['String']>;
  /** The REST Controller class assigned to handling this content type. */
  restControllerClass?: Maybe<Scalars['String']>;
  /** Makes this content type available via the admin bar. */
  showInAdminBar?: Maybe<Scalars['Boolean']>;
  /** Whether to add the content type to the GraphQL Schema. */
  showInGraphql?: Maybe<Scalars['Boolean']>;
  /** Where to show the content type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that. */
  showInMenu?: Maybe<Scalars['Boolean']>;
  /** Makes this content type available for selection in navigation menus. */
  showInNavMenus?: Maybe<Scalars['Boolean']>;
  /** Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace. */
  showInRest?: Maybe<Scalars['Boolean']>;
  /** Whether to generate and allow a UI for managing this content type in the admin. */
  showUi?: Maybe<Scalars['Boolean']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};


/** An Post Type object */
export type WpContentTypeConnectedTaxonomiesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** An Post Type object */
export type WpContentTypeContentNodesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpContentTypeToContentNodeConnectionWhereArgs>;
};

/** Allowed Content Types */
export enum WpContentTypeEnum {
  /** The Type of Content object */
  Attachment = 'ATTACHMENT',
  /** The Type of Content object */
  Page = 'PAGE',
  /** The Type of Content object */
  Post = 'POST'
}

/** The Type of Identifier used to fetch a single Content Type node. To be used along with the "id" field. Default is "ID". */
export enum WpContentTypeIdTypeEnum {
  /** The globally unique ID */
  Id = 'ID',
  /** The name of the content type. */
  Name = 'NAME'
}

/** Connection between the ContentType type and the ContentNode type */
export type WpContentTypeToContentNodeConnection = {
  __typename?: 'WPContentTypeToContentNodeConnection';
  /** Edges for the ContentTypeToContentNodeConnection connection */
  edges?: Maybe<Array<Maybe<WpContentTypeToContentNodeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpContentNode>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpContentTypeToContentNodeConnectionEdge = {
  __typename?: 'WPContentTypeToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpContentNode>;
};

/** Arguments for filtering the ContentTypeToContentNodeConnection connection */
export type WpContentTypeToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<WpContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the ContentType type and the Taxonomy type */
export type WpContentTypeToTaxonomyConnection = {
  __typename?: 'WPContentTypeToTaxonomyConnection';
  /** Edges for the ContentTypeToTaxonomyConnection connection */
  edges?: Maybe<Array<Maybe<WpContentTypeToTaxonomyConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpTaxonomy>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpContentTypeToTaxonomyConnectionEdge = {
  __typename?: 'WPContentTypeToTaxonomyConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpTaxonomy>;
};

/** Allowed Content Types of the Category taxonomy. */
export enum WpContentTypesOfCategoryEnum {
  /** The Type of Content object */
  Post = 'POST'
}

/** Allowed Content Types of the PostFormat taxonomy. */
export enum WpContentTypesOfPostFormatEnum {
  /** The Type of Content object */
  Post = 'POST'
}

/** Allowed Content Types of the Tag taxonomy. */
export enum WpContentTypesOfTagEnum {
  /** The Type of Content object */
  Post = 'POST'
}

/** Input for the createCategory mutation */
export type WpCreateCategoryInput = {
  /** The slug that the category will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The description of the category object */
  description?: InputMaybe<Scalars['String']>;
  /** The name of the category object to mutate */
  name: Scalars['String'];
  /** The ID of the category that should be set as the parent */
  parentId?: InputMaybe<Scalars['ID']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']>;
};

/** The payload for the createCategory mutation */
export type WpCreateCategoryPayload = {
  __typename?: 'WPCreateCategoryPayload';
  /** The created category */
  category?: Maybe<WpCategory>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Input for the createComment mutation */
export type WpCreateCommentInput = {
  /** The approval status of the comment. */
  approved?: InputMaybe<Scalars['String']>;
  /** The name of the comment's author. */
  author?: InputMaybe<Scalars['String']>;
  /** The email of the comment's author. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** The url of the comment's author. */
  authorUrl?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The database ID of the post object the comment belongs to. */
  commentOn?: InputMaybe<Scalars['Int']>;
  /** Content of the comment. */
  content?: InputMaybe<Scalars['String']>;
  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']>;
  /** Parent comment ID of current comment. */
  parent?: InputMaybe<Scalars['ID']>;
  /** Type of comment. */
  type?: InputMaybe<Scalars['String']>;
};

/** The payload for the createComment mutation */
export type WpCreateCommentPayload = {
  __typename?: 'WPCreateCommentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The comment that was created */
  comment?: Maybe<WpComment>;
  /** Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache */
  success?: Maybe<Scalars['Boolean']>;
};

/** Input for the createMediaItem mutation */
export type WpCreateMediaItemInput = {
  /** Alternative text to display when mediaItem is not displayed */
  altText?: InputMaybe<Scalars['String']>;
  /** The userId to assign as the author of the mediaItem */
  authorId?: InputMaybe<Scalars['ID']>;
  /** The caption for the mediaItem */
  caption?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The comment status for the mediaItem */
  commentStatus?: InputMaybe<Scalars['String']>;
  /** The date of the mediaItem */
  date?: InputMaybe<Scalars['String']>;
  /** The date (in GMT zone) of the mediaItem */
  dateGmt?: InputMaybe<Scalars['String']>;
  /** Description of the mediaItem */
  description?: InputMaybe<Scalars['String']>;
  /** The file name of the mediaItem */
  filePath?: InputMaybe<Scalars['String']>;
  /** The file type of the mediaItem */
  fileType?: InputMaybe<WpMimeTypeEnum>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']>;
  /** The ping status for the mediaItem */
  pingStatus?: InputMaybe<Scalars['String']>;
  /** The slug of the mediaItem */
  slug?: InputMaybe<Scalars['String']>;
  /** The status of the mediaItem */
  status?: InputMaybe<WpMediaItemStatusEnum>;
  /** The title of the mediaItem */
  title?: InputMaybe<Scalars['String']>;
};

/** The payload for the createMediaItem mutation */
export type WpCreateMediaItemPayload = {
  __typename?: 'WPCreateMediaItemPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The MediaItem object mutation type. */
  mediaItem?: Maybe<WpMediaItem>;
};

/** Input for the createPage mutation */
export type WpCreatePageInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars['String']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']>;
  /** The status of the object */
  status?: InputMaybe<WpPostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** The payload for the createPage mutation */
export type WpCreatePagePayload = {
  __typename?: 'WPCreatePagePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The Post object mutation type. */
  page?: Maybe<WpPage>;
};

/** Input for the createPostFormat mutation */
export type WpCreatePostFormatInput = {
  /** The slug that the post_format will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The description of the post_format object */
  description?: InputMaybe<Scalars['String']>;
  /** The name of the post_format object to mutate */
  name: Scalars['String'];
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']>;
};

/** The payload for the createPostFormat mutation */
export type WpCreatePostFormatPayload = {
  __typename?: 'WPCreatePostFormatPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The created post_format */
  postFormat?: Maybe<WpPostFormat>;
};

/** Input for the createPost mutation */
export type WpCreatePostInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']>;
  /** Set connections between the post and categories */
  categories?: InputMaybe<WpPostCategoriesInput>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars['String']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']>;
  /** The excerpt of the object */
  excerpt?: InputMaybe<Scalars['String']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']>;
  /** The ping status for the object */
  pingStatus?: InputMaybe<Scalars['String']>;
  /** URLs that have been pinged. */
  pinged?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Set connections between the post and postFormats */
  postFormats?: InputMaybe<WpPostPostFormatsInput>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']>;
  /** The status of the object */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Set connections between the post and tags */
  tags?: InputMaybe<WpPostTagsInput>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']>;
  /** URLs queued to be pinged. */
  toPing?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

/** The payload for the createPost mutation */
export type WpCreatePostPayload = {
  __typename?: 'WPCreatePostPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The Post object mutation type. */
  post?: Maybe<WpPost>;
};

/** Input for the createTag mutation */
export type WpCreateTagInput = {
  /** The slug that the post_tag will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The description of the post_tag object */
  description?: InputMaybe<Scalars['String']>;
  /** The name of the post_tag object to mutate */
  name: Scalars['String'];
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']>;
};

/** The payload for the createTag mutation */
export type WpCreateTagPayload = {
  __typename?: 'WPCreateTagPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The created post_tag */
  tag?: Maybe<WpTag>;
};

/** Input for the createUser mutation */
export type WpCreateUserInput = {
  /** User's AOL IM account. */
  aim?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** A string containing content about the user. */
  description?: InputMaybe<Scalars['String']>;
  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */
  displayName?: InputMaybe<Scalars['String']>;
  /** A string containing the user's email address. */
  email?: InputMaybe<Scalars['String']>;
  /** 	The user's first name. */
  firstName?: InputMaybe<Scalars['String']>;
  /** User's Jabber account. */
  jabber?: InputMaybe<Scalars['String']>;
  /** The user's last name. */
  lastName?: InputMaybe<Scalars['String']>;
  /** User's locale. */
  locale?: InputMaybe<Scalars['String']>;
  /** A string that contains a URL-friendly name for the user. The default is the user's username. */
  nicename?: InputMaybe<Scalars['String']>;
  /** The user's nickname, defaults to the user's username. */
  nickname?: InputMaybe<Scalars['String']>;
  /** A string that contains the plain text password for the user. */
  password?: InputMaybe<Scalars['String']>;
  /** The date the user registered. Format is Y-m-d H:i:s. */
  registered?: InputMaybe<Scalars['String']>;
  /** A string for whether to enable the rich editor or not. False if not empty. */
  richEditing?: InputMaybe<Scalars['String']>;
  /** An array of roles to be assigned to the user. */
  roles?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** A string that contains the user's username for logging in. */
  username: Scalars['String'];
  /** A string containing the user's URL for the user's web site. */
  websiteUrl?: InputMaybe<Scalars['String']>;
  /** User's Yahoo IM account. */
  yim?: InputMaybe<Scalars['String']>;
};

/** The payload for the createUser mutation */
export type WpCreateUserPayload = {
  __typename?: 'WPCreateUserPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The User object mutation type. */
  user?: Maybe<WpUser>;
};

/** Object that can be identified with a Database ID */
export type WpDatabaseIdentifier = {
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int'];
};

/** Date values */
export type WpDateInput = {
  /** Day of the month (from 1 to 31) */
  day?: InputMaybe<Scalars['Int']>;
  /** Month number (from 1 to 12) */
  month?: InputMaybe<Scalars['Int']>;
  /** 4 digit year (e.g. 2017) */
  year?: InputMaybe<Scalars['Int']>;
};

/** Filter the connection based on input */
export type WpDateQueryInput = {
  /** Nodes should be returned after this date */
  after?: InputMaybe<WpDateInput>;
  /** Nodes should be returned before this date */
  before?: InputMaybe<WpDateInput>;
  /** Column to query against */
  column?: InputMaybe<WpPostObjectsConnectionDateColumnEnum>;
  /** For after/before, whether exact value should be matched or not */
  compare?: InputMaybe<Scalars['String']>;
  /** Day of the month (from 1 to 31) */
  day?: InputMaybe<Scalars['Int']>;
  /** Hour (from 0 to 23) */
  hour?: InputMaybe<Scalars['Int']>;
  /** For after/before, whether exact value should be matched or not */
  inclusive?: InputMaybe<Scalars['Boolean']>;
  /** Minute (from 0 to 59) */
  minute?: InputMaybe<Scalars['Int']>;
  /** Month number (from 1 to 12) */
  month?: InputMaybe<Scalars['Int']>;
  /** OR or AND, how the sub-arrays should be compared */
  relation?: InputMaybe<WpRelationEnum>;
  /** Second (0 to 59) */
  second?: InputMaybe<Scalars['Int']>;
  /** Week of the year (from 0 to 53) */
  week?: InputMaybe<Scalars['Int']>;
  /** 4 digit year (e.g. 2017) */
  year?: InputMaybe<Scalars['Int']>;
};

/** The template assigned to the node */
export type WpDefaultTemplate = WpContentTemplate & {
  __typename?: 'WPDefaultTemplate';
  /** The name of the template */
  templateName?: Maybe<Scalars['String']>;
};

/** Input for the deleteCategory mutation */
export type WpDeleteCategoryInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the category to delete */
  id: Scalars['ID'];
};

/** The payload for the deleteCategory mutation */
export type WpDeleteCategoryPayload = {
  __typename?: 'WPDeleteCategoryPayload';
  /** The deteted term object */
  category?: Maybe<WpCategory>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']>;
};

/** Input for the deleteComment mutation */
export type WpDeleteCommentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Whether the comment should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']>;
  /** The deleted comment ID */
  id: Scalars['ID'];
};

/** The payload for the deleteComment mutation */
export type WpDeleteCommentPayload = {
  __typename?: 'WPDeleteCommentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The deleted comment object */
  comment?: Maybe<WpComment>;
  /** The deleted comment ID */
  deletedId?: Maybe<Scalars['ID']>;
};

/** Input for the deleteMediaItem mutation */
export type WpDeleteMediaItemInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Whether the mediaItem should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the mediaItem to delete */
  id: Scalars['ID'];
};

/** The payload for the deleteMediaItem mutation */
export type WpDeleteMediaItemPayload = {
  __typename?: 'WPDeleteMediaItemPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the deleted mediaItem */
  deletedId?: Maybe<Scalars['ID']>;
  /** The mediaItem before it was deleted */
  mediaItem?: Maybe<WpMediaItem>;
};

/** Input for the deletePage mutation */
export type WpDeletePageInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the page to delete */
  id: Scalars['ID'];
};

/** The payload for the deletePage mutation */
export type WpDeletePagePayload = {
  __typename?: 'WPDeletePagePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']>;
  /** The object before it was deleted */
  page?: Maybe<WpPage>;
};

/** Input for the deletePostFormat mutation */
export type WpDeletePostFormatInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the postFormat to delete */
  id: Scalars['ID'];
};

/** The payload for the deletePostFormat mutation */
export type WpDeletePostFormatPayload = {
  __typename?: 'WPDeletePostFormatPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']>;
  /** The deteted term object */
  postFormat?: Maybe<WpPostFormat>;
};

/** Input for the deletePost mutation */
export type WpDeletePostInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the post to delete */
  id: Scalars['ID'];
};

/** The payload for the deletePost mutation */
export type WpDeletePostPayload = {
  __typename?: 'WPDeletePostPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']>;
  /** The object before it was deleted */
  post?: Maybe<WpPost>;
};

/** Input for the deleteTag mutation */
export type WpDeleteTagInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the tag to delete */
  id: Scalars['ID'];
};

/** The payload for the deleteTag mutation */
export type WpDeleteTagPayload = {
  __typename?: 'WPDeleteTagPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the deleted object */
  deletedId?: Maybe<Scalars['ID']>;
  /** The deteted term object */
  tag?: Maybe<WpTag>;
};

/** Input for the deleteUser mutation */
export type WpDeleteUserInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the user you want to delete */
  id: Scalars['ID'];
  /** Reassign posts and links to new User ID. */
  reassignId?: InputMaybe<Scalars['ID']>;
};

/** The payload for the deleteUser mutation */
export type WpDeleteUserPayload = {
  __typename?: 'WPDeleteUserPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The ID of the user that you just deleted */
  deletedId?: Maybe<Scalars['ID']>;
  /** The deleted user object */
  user?: Maybe<WpUser>;
};

/** The discussion setting type */
export type WpDiscussionSettings = {
  __typename?: 'WPDiscussionSettings';
  /** Allow people to submit comments on new posts. */
  defaultCommentStatus?: Maybe<Scalars['String']>;
  /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */
  defaultPingStatus?: Maybe<Scalars['String']>;
};

/** Asset enqueued by the CMS */
export type WpEnqueuedAsset = {
  /** @todo */
  args?: Maybe<Scalars['Boolean']>;
  /** Dependencies needed to use this asset */
  dependencies?: Maybe<Array<Maybe<WpEnqueuedScript>>>;
  /** Extra information needed for the script */
  extra?: Maybe<Scalars['String']>;
  /** The handle of the enqueued asset */
  handle?: Maybe<Scalars['String']>;
  /** The ID of the enqueued asset */
  id: Scalars['ID'];
  /** The source of the asset */
  src?: Maybe<Scalars['String']>;
  /** The version of the enqueued asset */
  version?: Maybe<Scalars['String']>;
};

/** Script enqueued by the CMS */
export type WpEnqueuedScript = WpEnqueuedAsset & WpNode & {
  __typename?: 'WPEnqueuedScript';
  /** @todo */
  args?: Maybe<Scalars['Boolean']>;
  /** Dependencies needed to use this asset */
  dependencies?: Maybe<Array<Maybe<WpEnqueuedScript>>>;
  /** Extra information needed for the script */
  extra?: Maybe<Scalars['String']>;
  /** The handle of the enqueued asset */
  handle?: Maybe<Scalars['String']>;
  /** The ID of the enqueued asset */
  id: Scalars['ID'];
  /** The source of the asset */
  src?: Maybe<Scalars['String']>;
  /** The version of the enqueued asset */
  version?: Maybe<Scalars['String']>;
};

/** Stylesheet enqueued by the CMS */
export type WpEnqueuedStylesheet = WpEnqueuedAsset & WpNode & {
  __typename?: 'WPEnqueuedStylesheet';
  /** @todo */
  args?: Maybe<Scalars['Boolean']>;
  /** Dependencies needed to use this asset */
  dependencies?: Maybe<Array<Maybe<WpEnqueuedScript>>>;
  /** Extra information needed for the script */
  extra?: Maybe<Scalars['String']>;
  /** The handle of the enqueued asset */
  handle?: Maybe<Scalars['String']>;
  /** The ID of the enqueued asset */
  id: Scalars['ID'];
  /** The source of the asset */
  src?: Maybe<Scalars['String']>;
  /** The version of the enqueued asset */
  version?: Maybe<Scalars['String']>;
};

/** The general setting type */
export type WpGeneralSettings = {
  __typename?: 'WPGeneralSettings';
  /** A date format for all date strings. */
  dateFormat?: Maybe<Scalars['String']>;
  /** Site tagline. */
  description?: Maybe<Scalars['String']>;
  /** This address is used for admin purposes, like new user notification. */
  email?: Maybe<Scalars['String']>;
  /** WordPress locale code. */
  language?: Maybe<Scalars['String']>;
  /** A day number of the week that the week should start on. */
  startOfWeek?: Maybe<Scalars['Int']>;
  /** A time format for all time strings. */
  timeFormat?: Maybe<Scalars['String']>;
  /** A city in the same timezone as you. */
  timezone?: Maybe<Scalars['String']>;
  /** Site title. */
  title?: Maybe<Scalars['String']>;
  /** Site URL. */
  url?: Maybe<Scalars['String']>;
};

/** Content node with hierarchical (parent/child) relationships */
export type WpHierarchicalContentNode = {
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<WpHierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  children?: Maybe<WpHierarchicalContentNodeToContentNodeChildrenConnection>;
  /** The parent of the node. The parent object can be of various types */
  parent?: Maybe<WpHierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']>;
};


/** Content node with hierarchical (parent/child) relationships */
export type WpHierarchicalContentNodeAncestorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpHierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
};


/** Content node with hierarchical (parent/child) relationships */
export type WpHierarchicalContentNodeChildrenArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpHierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
};

/** Connection between the HierarchicalContentNode type and the ContentNode type */
export type WpHierarchicalContentNodeToContentNodeAncestorsConnection = {
  __typename?: 'WPHierarchicalContentNodeToContentNodeAncestorsConnection';
  /** Edges for the HierarchicalContentNodeToContentNodeAncestorsConnection connection */
  edges?: Maybe<Array<Maybe<WpHierarchicalContentNodeToContentNodeAncestorsConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpContentNode>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpHierarchicalContentNodeToContentNodeAncestorsConnectionEdge = {
  __typename?: 'WPHierarchicalContentNodeToContentNodeAncestorsConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpContentNode>;
};

/** Arguments for filtering the HierarchicalContentNodeToContentNodeAncestorsConnection connection */
export type WpHierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<WpContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the HierarchicalContentNode type and the ContentNode type */
export type WpHierarchicalContentNodeToContentNodeChildrenConnection = {
  __typename?: 'WPHierarchicalContentNodeToContentNodeChildrenConnection';
  /** Edges for the HierarchicalContentNodeToContentNodeChildrenConnection connection */
  edges?: Maybe<Array<Maybe<WpHierarchicalContentNodeToContentNodeChildrenConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpContentNode>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpHierarchicalContentNodeToContentNodeChildrenConnectionEdge = {
  __typename?: 'WPHierarchicalContentNodeToContentNodeChildrenConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpContentNode>;
};

/** Arguments for filtering the HierarchicalContentNodeToContentNodeChildrenConnection connection */
export type WpHierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<WpContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the HierarchicalContentNode type and the ContentNode type */
export type WpHierarchicalContentNodeToParentContentNodeConnectionEdge = {
  __typename?: 'WPHierarchicalContentNodeToParentContentNodeConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<WpContentNode>;
};

/** Term node with hierarchical (parent/child) relationships */
export type WpHierarchicalTermNode = {
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']>;
};

/** File details for a Media Item */
export type WpMediaDetails = {
  __typename?: 'WPMediaDetails';
  /** The filename of the mediaItem */
  file?: Maybe<Scalars['String']>;
  /** The height of the mediaItem */
  height?: Maybe<Scalars['Int']>;
  /** Meta information associated with the mediaItem */
  meta?: Maybe<WpMediaItemMeta>;
  /** The available sizes of the mediaItem */
  sizes?: Maybe<Array<Maybe<WpMediaSize>>>;
  /** The width of the mediaItem */
  width?: Maybe<Scalars['Int']>;
};

/** The mediaItem type */
export type WpMediaItem = WpContentNode & WpDatabaseIdentifier & WpHierarchicalContentNode & WpNode & WpNodeWithAuthor & WpNodeWithComments & WpNodeWithTemplate & WpNodeWithTitle & WpUniformResourceIdentifiable & {
  __typename?: 'WPMediaItem';
  /** Alternative text to display when resource is not displayed */
  altText?: Maybe<Scalars['String']>;
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<WpHierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<WpNodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']>;
  /** The caption for the resource */
  caption?: Maybe<Scalars['String']>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  children?: Maybe<WpHierarchicalContentNodeToContentNodeChildrenConnection>;
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  commentCount?: Maybe<Scalars['Int']>;
  /** Whether the comments are open or closed for this particular post. */
  commentStatus?: Maybe<Scalars['String']>;
  /** Connection between the mediaItem type and the Comment type */
  comments?: Maybe<WpMediaItemToCommentConnection>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<WpContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']>;
  /** Description of the image (stored as post_content) */
  description?: Maybe<Scalars['String']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<WpContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<WpContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<WpContentNodeToEnqueuedStylesheetConnection>;
  /** The filesize in bytes of the resource */
  fileSize?: Maybe<Scalars['Int']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']>;
  /** The globally unique identifier of the attachment object. */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<WpContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']>;
  /** Details about the mediaItem */
  mediaDetails?: Maybe<WpMediaDetails>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  mediaItemId: Scalars['Int'];
  /** Url of the mediaItem */
  mediaItemUrl?: Maybe<Scalars['String']>;
  /** Type of resource */
  mediaType?: Maybe<Scalars['String']>;
  /** The mime type of the mediaItem */
  mimeType?: Maybe<Scalars['String']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']>;
  /** The parent of the node. The parent object can be of various types */
  parent?: Maybe<WpHierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']>;
  /** The sizes attribute value for an image. */
  sizes?: Maybe<Scalars['String']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']>;
  /** Url of the mediaItem */
  sourceUrl?: Maybe<Scalars['String']>;
  /** The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths. */
  srcSet?: Maybe<Scalars['String']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']>;
  /** The template assigned to the node */
  template?: Maybe<WpContentTemplate>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};


/** The mediaItem type */
export type WpMediaItemAncestorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpHierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
};


/** The mediaItem type */
export type WpMediaItemCaptionArgs = {
  format?: InputMaybe<WpPostObjectFieldFormatEnum>;
};


/** The mediaItem type */
export type WpMediaItemChildrenArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpHierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
};


/** The mediaItem type */
export type WpMediaItemCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpMediaItemToCommentConnectionWhereArgs>;
};


/** The mediaItem type */
export type WpMediaItemDescriptionArgs = {
  format?: InputMaybe<WpPostObjectFieldFormatEnum>;
};


/** The mediaItem type */
export type WpMediaItemEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The mediaItem type */
export type WpMediaItemEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The mediaItem type */
export type WpMediaItemFileSizeArgs = {
  size?: InputMaybe<WpMediaItemSizeEnum>;
};


/** The mediaItem type */
export type WpMediaItemSizesArgs = {
  size?: InputMaybe<WpMediaItemSizeEnum>;
};


/** The mediaItem type */
export type WpMediaItemSourceUrlArgs = {
  size?: InputMaybe<WpMediaItemSizeEnum>;
};


/** The mediaItem type */
export type WpMediaItemSrcSetArgs = {
  size?: InputMaybe<WpMediaItemSizeEnum>;
};


/** The mediaItem type */
export type WpMediaItemTitleArgs = {
  format?: InputMaybe<WpPostObjectFieldFormatEnum>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum WpMediaItemIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a media item by its source url */
  SourceUrl = 'SOURCE_URL',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Meta connected to a MediaItem */
export type WpMediaItemMeta = {
  __typename?: 'WPMediaItemMeta';
  /** Aperture measurement of the media item. */
  aperture?: Maybe<Scalars['Float']>;
  /** Information about the camera used to create the media item. */
  camera?: Maybe<Scalars['String']>;
  /** The text string description associated with the media item. */
  caption?: Maybe<Scalars['String']>;
  /** Copyright information associated with the media item. */
  copyright?: Maybe<Scalars['String']>;
  /** The date/time when the media was created. */
  createdTimestamp?: Maybe<Scalars['Int']>;
  /** The original creator of the media item. */
  credit?: Maybe<Scalars['String']>;
  /** The focal length value of the media item. */
  focalLength?: Maybe<Scalars['Float']>;
  /** The ISO (International Organization for Standardization) value of the media item. */
  iso?: Maybe<Scalars['Int']>;
  /** List of keywords used to describe or identfy the media item. */
  keywords?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The vertical or horizontal aspect of the media item. */
  orientation?: Maybe<Scalars['String']>;
  /** The shutter speed information of the media item. */
  shutterSpeed?: Maybe<Scalars['Float']>;
  /** A useful title for the media item. */
  title?: Maybe<Scalars['String']>;
};

/** The size of the media item object. */
export enum WpMediaItemSizeEnum {
  /** MediaItem with the large size */
  Large = 'LARGE',
  /** MediaItem with the medium size */
  Medium = 'MEDIUM',
  /** MediaItem with the medium_large size */
  MediumLarge = 'MEDIUM_LARGE',
  /** MediaItem with the storefront-ecommerce-homepage-thumb size */
  StorefrontEcommerceHomepageThumb = 'STOREFRONT_ECOMMERCE_HOMEPAGE_THUMB',
  /** MediaItem with the thumbnail size */
  Thumbnail = 'THUMBNAIL',
  /** MediaItem with the 1536x1536 size */
  '1536X1536' = '_1536X1536',
  /** MediaItem with the 2048x2048 size */
  '2048X2048' = '_2048X2048'
}

/** The status of the media item object. */
export enum WpMediaItemStatusEnum {
  /** Objects with the auto-draft status */
  AutoDraft = 'AUTO_DRAFT',
  /** Objects with the inherit status */
  Inherit = 'INHERIT',
  /** Objects with the private status */
  Private = 'PRIVATE',
  /** Objects with the trash status */
  Trash = 'TRASH'
}

/** Connection between the mediaItem type and the Comment type */
export type WpMediaItemToCommentConnection = {
  __typename?: 'WPMediaItemToCommentConnection';
  /** Edges for the MediaItemToCommentConnection connection */
  edges?: Maybe<Array<Maybe<WpMediaItemToCommentConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpComment>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpMediaItemToCommentConnectionEdge = {
  __typename?: 'WPMediaItemToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpComment>;
};

/** Arguments for filtering the MediaItemToCommentConnection connection */
export type WpMediaItemToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<WpContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<WpOrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<WpCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']>;
};

/** Details of an available size for a media item */
export type WpMediaSize = {
  __typename?: 'WPMediaSize';
  /** The filename of the referenced size */
  file?: Maybe<Scalars['String']>;
  /** The filesize of the resource */
  fileSize?: Maybe<Scalars['Int']>;
  /** The height of the referenced size */
  height?: Maybe<Scalars['String']>;
  /** The mime type of the referenced size */
  mimeType?: Maybe<Scalars['String']>;
  /** The referenced size name */
  name?: Maybe<Scalars['String']>;
  /** The url of the referenced size */
  sourceUrl?: Maybe<Scalars['String']>;
  /** The width of the referenced size */
  width?: Maybe<Scalars['String']>;
};

/** Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme. */
export type WpMenu = WpDatabaseIdentifier & WpNode & {
  __typename?: 'WPMenu';
  /** The number of items in the menu */
  count?: Maybe<Scalars['Int']>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int'];
  /** The globally unique identifier of the nav menu object. */
  id: Scalars['ID'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** The locations a menu is assigned to */
  locations?: Maybe<Array<Maybe<WpMenuLocationEnum>>>;
  /**
   * WP ID of the nav menu.
   * @deprecated Deprecated in favor of the databaseId field
   */
  menuId?: Maybe<Scalars['Int']>;
  /** Connection between the Menu type and the MenuItem type */
  menuItems?: Maybe<WpMenuToMenuItemConnection>;
  /** Display name of the menu. Equivalent to WP_Term-&gt;name. */
  name?: Maybe<Scalars['String']>;
  /** The url friendly name of the menu. Equivalent to WP_Term-&gt;slug */
  slug?: Maybe<Scalars['String']>;
};


/** Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme. */
export type WpMenuMenuItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpMenuToMenuItemConnectionWhereArgs>;
};

/** Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu. */
export type WpMenuItem = WpDatabaseIdentifier & WpNode & {
  __typename?: 'WPMenuItem';
  /** Connection between the MenuItem type and the MenuItem type */
  childItems?: Maybe<WpMenuItemToMenuItemConnection>;
  /** Connection from MenuItem to it&#039;s connected node */
  connectedNode?: Maybe<WpMenuItemToMenuItemLinkableConnectionEdge>;
  /**
   * The object connected to this menu item.
   * @deprecated Deprecated in favor of the connectedNode field
   */
  connectedObject?: Maybe<WpMenuItemObjectUnion>;
  /** Class attribute for the menu item link */
  cssClasses?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int'];
  /** Description of the menu item. */
  description?: Maybe<Scalars['String']>;
  /** The globally unique identifier of the nav menu item object. */
  id: Scalars['ID'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Label or title of the menu item. */
  label?: Maybe<Scalars['String']>;
  /** Link relationship (XFN) of the menu item. */
  linkRelationship?: Maybe<Scalars['String']>;
  /** The locations the menu item&#039;s Menu is assigned to */
  locations?: Maybe<Array<Maybe<WpMenuLocationEnum>>>;
  /** The Menu a MenuItem is part of */
  menu?: Maybe<WpMenuItemToMenuConnectionEdge>;
  /**
   * WP ID of the menu item.
   * @deprecated Deprecated in favor of the databaseId field
   */
  menuItemId?: Maybe<Scalars['Int']>;
  /** Menu item order */
  order?: Maybe<Scalars['Int']>;
  /** The database id of the parent menu item or null if it is the root */
  parentDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent nav menu item object. */
  parentId?: Maybe<Scalars['ID']>;
  /** Path for the resource. Relative path for internal resources. Absolute path for external resources. */
  path?: Maybe<Scalars['String']>;
  /** Target attribute for the menu item link. */
  target?: Maybe<Scalars['String']>;
  /** Title attribute for the menu item link */
  title?: Maybe<Scalars['String']>;
  /** The uri of the resource the menu item links to */
  uri?: Maybe<Scalars['String']>;
  /** URL or destination of the menu item. */
  url?: Maybe<Scalars['String']>;
};


/** Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu. */
export type WpMenuItemChildItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpMenuItemToMenuItemConnectionWhereArgs>;
};

/** Nodes that can be linked to as Menu Items */
export type WpMenuItemLinkable = {
  /** The unique resource identifier path */
  databaseId: Scalars['Int'];
  /** The unique resource identifier path */
  id: Scalars['ID'];
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};

/** The Type of Identifier used to fetch a single node. Default is "ID". To be used along with the "id" field. */
export enum WpMenuItemNodeIdTypeEnum {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID'
}

/** Deprecated in favor of MenuItemLinkeable Interface */
export type WpMenuItemObjectUnion = WpCategory | WpPage | WpPost | WpPostFormat | WpTag;

/** Connection between the MenuItem type and the Menu type */
export type WpMenuItemToMenuConnectionEdge = {
  __typename?: 'WPMenuItemToMenuConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<WpMenu>;
};

/** Connection between the MenuItem type and the MenuItem type */
export type WpMenuItemToMenuItemConnection = {
  __typename?: 'WPMenuItemToMenuItemConnection';
  /** Edges for the MenuItemToMenuItemConnection connection */
  edges?: Maybe<Array<Maybe<WpMenuItemToMenuItemConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpMenuItem>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpMenuItemToMenuItemConnectionEdge = {
  __typename?: 'WPMenuItemToMenuItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpMenuItem>;
};

/** Arguments for filtering the MenuItemToMenuItemConnection connection */
export type WpMenuItemToMenuItemConnectionWhereArgs = {
  /** The ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<WpMenuLocationEnum>;
  /** The database ID of the parent menu object */
  parentDatabaseId?: InputMaybe<Scalars['Int']>;
  /** The ID of the parent menu object */
  parentId?: InputMaybe<Scalars['ID']>;
};

/** Connection between the MenuItem type and the MenuItemLinkable type */
export type WpMenuItemToMenuItemLinkableConnectionEdge = {
  __typename?: 'WPMenuItemToMenuItemLinkableConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<WpMenuItemLinkable>;
};

/** Registered menu locations */
export enum WpMenuLocationEnum {
  /** Put the menu in the primary location */
  Primary = 'PRIMARY'
}

/** The Type of Identifier used to fetch a single node. Default is "ID". To be used along with the "id" field. */
export enum WpMenuNodeIdTypeEnum {
  /** Identify a menu node by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a menu node by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a menu node by it's name */
  Name = 'NAME'
}

/** Connection between the Menu type and the MenuItem type */
export type WpMenuToMenuItemConnection = {
  __typename?: 'WPMenuToMenuItemConnection';
  /** Edges for the MenuToMenuItemConnection connection */
  edges?: Maybe<Array<Maybe<WpMenuToMenuItemConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpMenuItem>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpMenuToMenuItemConnectionEdge = {
  __typename?: 'WPMenuToMenuItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpMenuItem>;
};

/** Arguments for filtering the MenuToMenuItemConnection connection */
export type WpMenuToMenuItemConnectionWhereArgs = {
  /** The ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<WpMenuLocationEnum>;
  /** The database ID of the parent menu object */
  parentDatabaseId?: InputMaybe<Scalars['Int']>;
  /** The ID of the parent menu object */
  parentId?: InputMaybe<Scalars['ID']>;
};

/** The MimeType of the object */
export enum WpMimeTypeEnum {
  /** MimeType application/java */
  ApplicationJava = 'APPLICATION_JAVA',
  /** MimeType application/msword */
  ApplicationMsword = 'APPLICATION_MSWORD',
  /** MimeType application/octet-stream */
  ApplicationOctetStream = 'APPLICATION_OCTET_STREAM',
  /** MimeType application/onenote */
  ApplicationOnenote = 'APPLICATION_ONENOTE',
  /** MimeType application/oxps */
  ApplicationOxps = 'APPLICATION_OXPS',
  /** MimeType application/pdf */
  ApplicationPdf = 'APPLICATION_PDF',
  /** MimeType application/rar */
  ApplicationRar = 'APPLICATION_RAR',
  /** MimeType application/rtf */
  ApplicationRtf = 'APPLICATION_RTF',
  /** MimeType application/ttaf+xml */
  ApplicationTtafXml = 'APPLICATION_TTAF_XML',
  /** MimeType application/vnd.apple.keynote */
  ApplicationVndAppleKeynote = 'APPLICATION_VND_APPLE_KEYNOTE',
  /** MimeType application/vnd.apple.numbers */
  ApplicationVndAppleNumbers = 'APPLICATION_VND_APPLE_NUMBERS',
  /** MimeType application/vnd.apple.pages */
  ApplicationVndApplePages = 'APPLICATION_VND_APPLE_PAGES',
  /** MimeType application/vnd.ms-access */
  ApplicationVndMsAccess = 'APPLICATION_VND_MS_ACCESS',
  /** MimeType application/vnd.ms-excel */
  ApplicationVndMsExcel = 'APPLICATION_VND_MS_EXCEL',
  /** MimeType application/vnd.ms-excel.addin.macroEnabled.12 */
  ApplicationVndMsExcelAddinMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12',
  /** MimeType application/vnd.ms-excel.sheet.binary.macroEnabled.12 */
  ApplicationVndMsExcelSheetBinaryMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12',
  /** MimeType application/vnd.ms-excel.sheet.macroEnabled.12 */
  ApplicationVndMsExcelSheetMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12',
  /** MimeType application/vnd.ms-excel.template.macroEnabled.12 */
  ApplicationVndMsExcelTemplateMacroenabled_12 = 'APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12',
  /** MimeType application/vnd.ms-powerpoint */
  ApplicationVndMsPowerpoint = 'APPLICATION_VND_MS_POWERPOINT',
  /** MimeType application/vnd.ms-powerpoint.addin.macroEnabled.12 */
  ApplicationVndMsPowerpointAddinMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12',
  /** MimeType application/vnd.ms-powerpoint.presentation.macroEnabled.12 */
  ApplicationVndMsPowerpointPresentationMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12',
  /** MimeType application/vnd.ms-powerpoint.slideshow.macroEnabled.12 */
  ApplicationVndMsPowerpointSlideshowMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12',
  /** MimeType application/vnd.ms-powerpoint.slide.macroEnabled.12 */
  ApplicationVndMsPowerpointSlideMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12',
  /** MimeType application/vnd.ms-powerpoint.template.macroEnabled.12 */
  ApplicationVndMsPowerpointTemplateMacroenabled_12 = 'APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12',
  /** MimeType application/vnd.ms-project */
  ApplicationVndMsProject = 'APPLICATION_VND_MS_PROJECT',
  /** MimeType application/vnd.ms-word.document.macroEnabled.12 */
  ApplicationVndMsWordDocumentMacroenabled_12 = 'APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12',
  /** MimeType application/vnd.ms-word.template.macroEnabled.12 */
  ApplicationVndMsWordTemplateMacroenabled_12 = 'APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12',
  /** MimeType application/vnd.ms-write */
  ApplicationVndMsWrite = 'APPLICATION_VND_MS_WRITE',
  /** MimeType application/vnd.ms-xpsdocument */
  ApplicationVndMsXpsdocument = 'APPLICATION_VND_MS_XPSDOCUMENT',
  /** MimeType application/vnd.oasis.opendocument.chart */
  ApplicationVndOasisOpendocumentChart = 'APPLICATION_VND_OASIS_OPENDOCUMENT_CHART',
  /** MimeType application/vnd.oasis.opendocument.database */
  ApplicationVndOasisOpendocumentDatabase = 'APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE',
  /** MimeType application/vnd.oasis.opendocument.formula */
  ApplicationVndOasisOpendocumentFormula = 'APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA',
  /** MimeType application/vnd.oasis.opendocument.graphics */
  ApplicationVndOasisOpendocumentGraphics = 'APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS',
  /** MimeType application/vnd.oasis.opendocument.presentation */
  ApplicationVndOasisOpendocumentPresentation = 'APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION',
  /** MimeType application/vnd.oasis.opendocument.spreadsheet */
  ApplicationVndOasisOpendocumentSpreadsheet = 'APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET',
  /** MimeType application/vnd.oasis.opendocument.text */
  ApplicationVndOasisOpendocumentText = 'APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT',
  /** MimeType application/vnd.openxmlformats-officedocument.presentationml.presentation */
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlPresentation = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION',
  /** MimeType application/vnd.openxmlformats-officedocument.presentationml.slide */
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlSlide = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE',
  /** MimeType application/vnd.openxmlformats-officedocument.presentationml.slideshow */
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlSlideshow = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW',
  /** MimeType application/vnd.openxmlformats-officedocument.presentationml.template */
  ApplicationVndOpenxmlformatsOfficedocumentPresentationmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE',
  /** MimeType application/vnd.openxmlformats-officedocument.spreadsheetml.sheet */
  ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET',
  /** MimeType application/vnd.openxmlformats-officedocument.spreadsheetml.template */
  ApplicationVndOpenxmlformatsOfficedocumentSpreadsheetmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE',
  /** MimeType application/vnd.openxmlformats-officedocument.wordprocessingml.document */
  ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlDocument = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT',
  /** MimeType application/vnd.openxmlformats-officedocument.wordprocessingml.template */
  ApplicationVndOpenxmlformatsOfficedocumentWordprocessingmlTemplate = 'APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE',
  /** MimeType application/wordperfect */
  ApplicationWordperfect = 'APPLICATION_WORDPERFECT',
  /** MimeType application/x-7z-compressed */
  ApplicationX_7ZCompressed = 'APPLICATION_X_7Z_COMPRESSED',
  /** MimeType application/x-gzip */
  ApplicationXGzip = 'APPLICATION_X_GZIP',
  /** MimeType application/x-tar */
  ApplicationXTar = 'APPLICATION_X_TAR',
  /** MimeType application/zip */
  ApplicationZip = 'APPLICATION_ZIP',
  /** MimeType audio/aac */
  AudioAac = 'AUDIO_AAC',
  /** MimeType audio/flac */
  AudioFlac = 'AUDIO_FLAC',
  /** MimeType audio/midi */
  AudioMidi = 'AUDIO_MIDI',
  /** MimeType audio/mpeg */
  AudioMpeg = 'AUDIO_MPEG',
  /** MimeType audio/ogg */
  AudioOgg = 'AUDIO_OGG',
  /** MimeType audio/wav */
  AudioWav = 'AUDIO_WAV',
  /** MimeType audio/x-matroska */
  AudioXMatroska = 'AUDIO_X_MATROSKA',
  /** MimeType audio/x-ms-wax */
  AudioXMsWax = 'AUDIO_X_MS_WAX',
  /** MimeType audio/x-ms-wma */
  AudioXMsWma = 'AUDIO_X_MS_WMA',
  /** MimeType audio/x-realaudio */
  AudioXRealaudio = 'AUDIO_X_REALAUDIO',
  /** MimeType image/bmp */
  ImageBmp = 'IMAGE_BMP',
  /** MimeType image/gif */
  ImageGif = 'IMAGE_GIF',
  /** MimeType image/heic */
  ImageHeic = 'IMAGE_HEIC',
  /** MimeType image/jpeg */
  ImageJpeg = 'IMAGE_JPEG',
  /** MimeType image/png */
  ImagePng = 'IMAGE_PNG',
  /** MimeType image/tiff */
  ImageTiff = 'IMAGE_TIFF',
  /** MimeType image/webp */
  ImageWebp = 'IMAGE_WEBP',
  /** MimeType image/x-icon */
  ImageXIcon = 'IMAGE_X_ICON',
  /** MimeType text/calendar */
  TextCalendar = 'TEXT_CALENDAR',
  /** MimeType text/css */
  TextCss = 'TEXT_CSS',
  /** MimeType text/csv */
  TextCsv = 'TEXT_CSV',
  /** MimeType text/plain */
  TextPlain = 'TEXT_PLAIN',
  /** MimeType text/richtext */
  TextRichtext = 'TEXT_RICHTEXT',
  /** MimeType text/tab-separated-values */
  TextTabSeparatedValues = 'TEXT_TAB_SEPARATED_VALUES',
  /** MimeType text/vtt */
  TextVtt = 'TEXT_VTT',
  /** MimeType video/3gpp */
  Video_3Gpp = 'VIDEO_3GPP',
  /** MimeType video/3gpp2 */
  Video_3Gpp2 = 'VIDEO_3GPP2',
  /** MimeType video/avi */
  VideoAvi = 'VIDEO_AVI',
  /** MimeType video/divx */
  VideoDivx = 'VIDEO_DIVX',
  /** MimeType video/mp4 */
  VideoMp4 = 'VIDEO_MP4',
  /** MimeType video/mpeg */
  VideoMpeg = 'VIDEO_MPEG',
  /** MimeType video/ogg */
  VideoOgg = 'VIDEO_OGG',
  /** MimeType video/quicktime */
  VideoQuicktime = 'VIDEO_QUICKTIME',
  /** MimeType video/webm */
  VideoWebm = 'VIDEO_WEBM',
  /** MimeType video/x-flv */
  VideoXFlv = 'VIDEO_X_FLV',
  /** MimeType video/x-matroska */
  VideoXMatroska = 'VIDEO_X_MATROSKA',
  /** MimeType video/x-ms-asf */
  VideoXMsAsf = 'VIDEO_X_MS_ASF',
  /** MimeType video/x-ms-wm */
  VideoXMsWm = 'VIDEO_X_MS_WM',
  /** MimeType video/x-ms-wmv */
  VideoXMsWmv = 'VIDEO_X_MS_WMV',
  /** MimeType video/x-ms-wmx */
  VideoXMsWmx = 'VIDEO_X_MS_WMX'
}

/** An object with an ID */
export type WpNode = {
  /** The globally unique ID for the object */
  id: Scalars['ID'];
};

/** A node that can have an author assigned to it */
export type WpNodeWithAuthor = {
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<WpNodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']>;
};

/** Connection between the NodeWithAuthor type and the User type */
export type WpNodeWithAuthorToUserConnectionEdge = {
  __typename?: 'WPNodeWithAuthorToUserConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<WpUser>;
};

/** A node that can have comments associated with it */
export type WpNodeWithComments = {
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  commentCount?: Maybe<Scalars['Int']>;
  /** Whether the comments are open or closed for this particular post. */
  commentStatus?: Maybe<Scalars['String']>;
};

/** A node that supports the content editor */
export type WpNodeWithContentEditor = {
  /** The content of the post. */
  content?: Maybe<Scalars['String']>;
};


/** A node that supports the content editor */
export type WpNodeWithContentEditorContentArgs = {
  format?: InputMaybe<WpPostObjectFieldFormatEnum>;
};

/** A node that can have an excerpt */
export type WpNodeWithExcerpt = {
  /** The excerpt of the post. */
  excerpt?: Maybe<Scalars['String']>;
};


/** A node that can have an excerpt */
export type WpNodeWithExcerptExcerptArgs = {
  format?: InputMaybe<WpPostObjectFieldFormatEnum>;
};

/** A node that can have a featured image set */
export type WpNodeWithFeaturedImage = {
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<WpContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String'];
  /** The unique identifier stored in the database */
  databaseId: Scalars['Int'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<WpContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<WpContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<WpContentNodeToEnqueuedStylesheetConnection>;
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  featuredImage?: Maybe<WpNodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  featuredImageDatabaseId?: Maybe<Scalars['Int']>;
  /** Globally unique ID of the featured image assigned to the node */
  featuredImageId?: Maybe<Scalars['ID']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']>;
  /** The unique resource identifier path */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<WpContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']>;
  /** The template assigned to a node of content */
  template?: Maybe<WpContentTemplate>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};


/** A node that can have a featured image set */
export type WpNodeWithFeaturedImageEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A node that can have a featured image set */
export type WpNodeWithFeaturedImageEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Connection between the NodeWithFeaturedImage type and the MediaItem type */
export type WpNodeWithFeaturedImageToMediaItemConnectionEdge = {
  __typename?: 'WPNodeWithFeaturedImageToMediaItemConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<WpMediaItem>;
};

/** A node that can have page attributes */
export type WpNodeWithPageAttributes = {
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: Maybe<Scalars['Int']>;
};

/** A node that can have revisions */
export type WpNodeWithRevisions = {
  /** True if the node is a revision of another node */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */
  revisionOf?: Maybe<WpNodeWithRevisionsToContentNodeConnectionEdge>;
};

/** Connection between the NodeWithRevisions type and the ContentNode type */
export type WpNodeWithRevisionsToContentNodeConnectionEdge = {
  __typename?: 'WPNodeWithRevisionsToContentNodeConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<WpContentNode>;
};

/** A node that can have a template associated with it */
export type WpNodeWithTemplate = {
  /** The template assigned to the node */
  template?: Maybe<WpContentTemplate>;
};

/** A node that NodeWith a title */
export type WpNodeWithTitle = {
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']>;
};


/** A node that NodeWith a title */
export type WpNodeWithTitleTitleArgs = {
  format?: InputMaybe<WpPostObjectFieldFormatEnum>;
};

/** A node that can have trackbacks and pingbacks */
export type WpNodeWithTrackbacks = {
  /** Whether the pings are open or closed for this particular post. */
  pingStatus?: Maybe<Scalars['String']>;
  /** URLs that have been pinged. */
  pinged?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** URLs queued to be pinged. */
  toPing?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** The cardinality of the connection order */
export enum WpOrderEnum {
  /** Sort the query result set in an ascending order */
  Asc = 'ASC',
  /** Sort the query result set in a descending order */
  Desc = 'DESC'
}

/** The page type */
export type WpPage = WpContentNode & WpDatabaseIdentifier & WpHierarchicalContentNode & WpMenuItemLinkable & WpNode & WpNodeWithAuthor & WpNodeWithComments & WpNodeWithContentEditor & WpNodeWithFeaturedImage & WpNodeWithPageAttributes & WpNodeWithRevisions & WpNodeWithTemplate & WpNodeWithTitle & WpUniformResourceIdentifiable & {
  __typename?: 'WPPage';
  /** Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root). */
  ancestors?: Maybe<WpHierarchicalContentNodeToContentNodeAncestorsConnection>;
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<WpNodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']>;
  /** Connection between the HierarchicalContentNode type and the ContentNode type */
  children?: Maybe<WpHierarchicalContentNodeToContentNodeChildrenConnection>;
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  commentCount?: Maybe<Scalars['Int']>;
  /** Whether the comments are open or closed for this particular post. */
  commentStatus?: Maybe<Scalars['String']>;
  /** Connection between the page type and the Comment type */
  comments?: Maybe<WpPageToCommentConnection>;
  /** The content of the post. */
  content?: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<WpContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String'];
  /** The unique resource identifier path */
  databaseId: Scalars['Int'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<WpContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<WpContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<WpContentNodeToEnqueuedStylesheetConnection>;
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  featuredImage?: Maybe<WpNodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  featuredImageDatabaseId?: Maybe<Scalars['Int']>;
  /** Globally unique ID of the featured image assigned to the node */
  featuredImageId?: Maybe<Scalars['ID']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']>;
  /** The globally unique identifier of the page object. */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether this page is set to the static front page. */
  isFrontPage: Scalars['Boolean'];
  /** Whether this page is set to the blog posts page. */
  isPostsPage: Scalars['Boolean'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']>;
  /** Whether this page is set to the privacy page. */
  isPrivacyPage: Scalars['Boolean'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** True if the node is a revision of another node */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<WpContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: Maybe<Scalars['Int']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  pageId: Scalars['Int'];
  /** The parent of the node. The parent object can be of various types */
  parent?: Maybe<WpHierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /** Database id of the parent node */
  parentDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the parent node. */
  parentId?: Maybe<Scalars['ID']>;
  /** Connection between the page type and the page type */
  preview?: Maybe<WpPageToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']>;
  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */
  revisionOf?: Maybe<WpNodeWithRevisionsToContentNodeConnectionEdge>;
  /** Connection between the page type and the page type */
  revisions?: Maybe<WpPageToRevisionConnection>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']>;
  /** The template assigned to a node of content */
  template?: Maybe<WpContentTemplate>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};


/** The page type */
export type WpPageAncestorsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpHierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
};


/** The page type */
export type WpPageChildrenArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpHierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
};


/** The page type */
export type WpPageCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpPageToCommentConnectionWhereArgs>;
};


/** The page type */
export type WpPageContentArgs = {
  format?: InputMaybe<WpPostObjectFieldFormatEnum>;
};


/** The page type */
export type WpPageEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The page type */
export type WpPageEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The page type */
export type WpPageRevisionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpPageToRevisionConnectionWhereArgs>;
};


/** The page type */
export type WpPageTitleArgs = {
  format?: InputMaybe<WpPostObjectFieldFormatEnum>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum WpPageIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** Connection between the page type and the Comment type */
export type WpPageToCommentConnection = {
  __typename?: 'WPPageToCommentConnection';
  /** Edges for the PageToCommentConnection connection */
  edges?: Maybe<Array<Maybe<WpPageToCommentConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpComment>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpPageToCommentConnectionEdge = {
  __typename?: 'WPPageToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpComment>;
};

/** Arguments for filtering the PageToCommentConnection connection */
export type WpPageToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<WpContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<WpOrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<WpCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']>;
};

/** Connection between the page type and the page type */
export type WpPageToPreviewConnectionEdge = {
  __typename?: 'WPPageToPreviewConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<WpPage>;
};

/** Connection between the page type and the page type */
export type WpPageToRevisionConnection = {
  __typename?: 'WPPageToRevisionConnection';
  /** Edges for the pageToRevisionConnection connection */
  edges?: Maybe<Array<Maybe<WpPageToRevisionConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpPage>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpPageToRevisionConnectionEdge = {
  __typename?: 'WPPageToRevisionConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpPage>;
};

/** Arguments for filtering the pageToRevisionConnection connection */
export type WpPageToRevisionConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** An plugin object */
export type WpPlugin = WpNode & {
  __typename?: 'WPPlugin';
  /** Name of the plugin author(s), may also be a company name. */
  author?: Maybe<Scalars['String']>;
  /** URI for the related author(s)/company website. */
  authorUri?: Maybe<Scalars['String']>;
  /** Description of the plugin. */
  description?: Maybe<Scalars['String']>;
  /** The globally unique identifier of the plugin object. */
  id: Scalars['ID'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Display name of the plugin. */
  name?: Maybe<Scalars['String']>;
  /** Plugin path. */
  path?: Maybe<Scalars['String']>;
  /** URI for the plugin website. This is useful for directing users for support requests etc. */
  pluginUri?: Maybe<Scalars['String']>;
  /** Current version of the plugin. */
  version?: Maybe<Scalars['String']>;
};

/** The status of the WordPress plugin. */
export enum WpPluginStatusEnum {
  /** The plugin is currently active. */
  Active = 'ACTIVE',
  /** The plugin is a drop-in plugin. */
  DropIn = 'DROP_IN',
  /** The plugin is currently inactive. */
  Inactive = 'INACTIVE',
  /** The plugin is a must-use plugin. */
  MustUse = 'MUST_USE',
  /** The plugin is technically active but was paused while loading. */
  Paused = 'PAUSED',
  /** The plugin was active recently. */
  RecentlyActive = 'RECENTLY_ACTIVE',
  /** The plugin has an upgrade available. */
  Upgrade = 'UPGRADE'
}

/** The post type */
export type WpPost = WpContentNode & WpDatabaseIdentifier & WpMenuItemLinkable & WpNode & WpNodeWithAuthor & WpNodeWithComments & WpNodeWithContentEditor & WpNodeWithExcerpt & WpNodeWithFeaturedImage & WpNodeWithRevisions & WpNodeWithTemplate & WpNodeWithTitle & WpNodeWithTrackbacks & WpUniformResourceIdentifiable & {
  __typename?: 'WPPost';
  /** Connection between the NodeWithAuthor type and the User type */
  author?: Maybe<WpNodeWithAuthorToUserConnectionEdge>;
  /** The database identifier of the author of the node */
  authorDatabaseId?: Maybe<Scalars['Int']>;
  /** The globally unique identifier of the author of the node */
  authorId?: Maybe<Scalars['ID']>;
  /** Connection between the post type and the category type */
  categories?: Maybe<WpPostToCategoryConnection>;
  /** The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility. */
  commentCount?: Maybe<Scalars['Int']>;
  /** Whether the comments are open or closed for this particular post. */
  commentStatus?: Maybe<Scalars['String']>;
  /** Connection between the post type and the Comment type */
  comments?: Maybe<WpPostToCommentConnection>;
  /** The content of the post. */
  content?: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the ContentType type */
  contentType?: Maybe<WpContentNodeToContentTypeConnectionEdge>;
  /** The name of the Content Type the node belongs to */
  contentTypeName: Scalars['String'];
  /** The unique resource identifier path */
  databaseId: Scalars['Int'];
  /** Post publishing date. */
  date?: Maybe<Scalars['String']>;
  /** The publishing date set in GMT. */
  dateGmt?: Maybe<Scalars['String']>;
  /** The desired slug of the post */
  desiredSlug?: Maybe<Scalars['String']>;
  /** If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds */
  editingLockedBy?: Maybe<WpContentNodeToEditLockConnectionEdge>;
  /** The RSS enclosure for the object */
  enclosure?: Maybe<Scalars['String']>;
  /** Connection between the ContentNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<WpContentNodeToEnqueuedScriptConnection>;
  /** Connection between the ContentNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<WpContentNodeToEnqueuedStylesheetConnection>;
  /** The excerpt of the post. */
  excerpt?: Maybe<Scalars['String']>;
  /** Connection between the NodeWithFeaturedImage type and the MediaItem type */
  featuredImage?: Maybe<WpNodeWithFeaturedImageToMediaItemConnectionEdge>;
  /** The database identifier for the featured image node assigned to the content node */
  featuredImageDatabaseId?: Maybe<Scalars['Int']>;
  /** Globally unique ID of the featured image assigned to the node */
  featuredImageId?: Maybe<Scalars['ID']>;
  /** The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table. */
  guid?: Maybe<Scalars['String']>;
  /** The globally unique identifier of the post object. */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the object is a node in the preview state */
  isPreview?: Maybe<Scalars['Boolean']>;
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** True if the node is a revision of another node */
  isRevision?: Maybe<Scalars['Boolean']>;
  /** Whether this page is sticky */
  isSticky: Scalars['Boolean'];
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The user that most recently edited the node */
  lastEditedBy?: Maybe<WpContentNodeToEditLastConnectionEdge>;
  /** The permalink of the post */
  link?: Maybe<Scalars['String']>;
  /** The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time. */
  modified?: Maybe<Scalars['String']>;
  /** The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT. */
  modifiedGmt?: Maybe<Scalars['String']>;
  /** Whether the pings are open or closed for this particular post. */
  pingStatus?: Maybe<Scalars['String']>;
  /** URLs that have been pinged. */
  pinged?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Connection between the post type and the postFormat type */
  postFormats?: Maybe<WpPostToPostFormatConnection>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  postId: Scalars['Int'];
  /** Connection between the post type and the post type */
  preview?: Maybe<WpPostToPreviewConnectionEdge>;
  /** The database id of the preview node */
  previewRevisionDatabaseId?: Maybe<Scalars['Int']>;
  /** Whether the object is a node in the preview state */
  previewRevisionId?: Maybe<Scalars['ID']>;
  /** If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node. */
  revisionOf?: Maybe<WpNodeWithRevisionsToContentNodeConnectionEdge>;
  /** Connection between the post type and the post type */
  revisions?: Maybe<WpPostToRevisionConnection>;
  /** The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table. */
  slug?: Maybe<Scalars['String']>;
  /** The current status of the object */
  status?: Maybe<Scalars['String']>;
  /** Connection between the post type and the tag type */
  tags?: Maybe<WpPostToTagConnection>;
  /** The template assigned to a node of content */
  template?: Maybe<WpContentTemplate>;
  /** Connection between the post type and the TermNode type */
  terms?: Maybe<WpPostToTermNodeConnection>;
  /** The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made. */
  title?: Maybe<Scalars['String']>;
  /** URLs queued to be pinged. */
  toPing?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};


/** The post type */
export type WpPostCategoriesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpPostToCategoryConnectionWhereArgs>;
};


/** The post type */
export type WpPostCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpPostToCommentConnectionWhereArgs>;
};


/** The post type */
export type WpPostContentArgs = {
  format?: InputMaybe<WpPostObjectFieldFormatEnum>;
};


/** The post type */
export type WpPostEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The post type */
export type WpPostEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The post type */
export type WpPostExcerptArgs = {
  format?: InputMaybe<WpPostObjectFieldFormatEnum>;
};


/** The post type */
export type WpPostPostFormatsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpPostToPostFormatConnectionWhereArgs>;
};


/** The post type */
export type WpPostRevisionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpPostToRevisionConnectionWhereArgs>;
};


/** The post type */
export type WpPostTagsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpPostToTagConnectionWhereArgs>;
};


/** The post type */
export type WpPostTermsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpPostToTermNodeConnectionWhereArgs>;
};


/** The post type */
export type WpPostTitleArgs = {
  format?: InputMaybe<WpPostObjectFieldFormatEnum>;
};

/** Set relationships between the post to categories */
export type WpPostCategoriesInput = {
  /** If true, this will append the category to existing related categories. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars['Boolean']>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<WpPostCategoriesNodeInput>>>;
};

/** List of categories to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export type WpPostCategoriesNodeInput = {
  /** The description of the category. This field is used to set a description of the category if a new one is created during the mutation. */
  description?: InputMaybe<Scalars['String']>;
  /** The ID of the category. If present, this will be used to connect to the post. If no existing category exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars['ID']>;
  /** The name of the category. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars['String']>;
  /** The slug of the category. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars['String']>;
};

/** The postFormat type */
export type WpPostFormat = WpDatabaseIdentifier & WpMenuItemLinkable & WpNode & WpTermNode & WpUniformResourceIdentifiable & {
  __typename?: 'WPPostFormat';
  /** Connection between the postFormat type and the ContentNode type */
  contentNodes?: Maybe<WpPostFormatToContentNodeConnection>;
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  databaseId: Scalars['Int'];
  /** The description of the object */
  description?: Maybe<Scalars['String']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<WpTermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<WpTermNodeToEnqueuedStylesheetConnection>;
  /** The unique resource identifier path */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The link to the term */
  link?: Maybe<Scalars['String']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  postFormatId?: Maybe<Scalars['Int']>;
  /** Connection between the postFormat type and the post type */
  posts?: Maybe<WpPostFormatToPostConnection>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']>;
  /** Connection between the postFormat type and the Taxonomy type */
  taxonomy?: Maybe<WpPostFormatToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};


/** The postFormat type */
export type WpPostFormatContentNodesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpPostFormatToContentNodeConnectionWhereArgs>;
};


/** The postFormat type */
export type WpPostFormatEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The postFormat type */
export type WpPostFormatEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The postFormat type */
export type WpPostFormatPostsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpPostFormatToPostConnectionWhereArgs>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum WpPostFormatIdType {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}

/** Connection between the postFormat type and the ContentNode type */
export type WpPostFormatToContentNodeConnection = {
  __typename?: 'WPPostFormatToContentNodeConnection';
  /** Edges for the PostFormatToContentNodeConnection connection */
  edges?: Maybe<Array<Maybe<WpPostFormatToContentNodeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpContentNode>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpPostFormatToContentNodeConnectionEdge = {
  __typename?: 'WPPostFormatToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpContentNode>;
};

/** Arguments for filtering the PostFormatToContentNodeConnection connection */
export type WpPostFormatToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<WpContentTypesOfPostFormatEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the postFormat type and the post type */
export type WpPostFormatToPostConnection = {
  __typename?: 'WPPostFormatToPostConnection';
  /** Edges for the PostFormatToPostConnection connection */
  edges?: Maybe<Array<Maybe<WpPostFormatToPostConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpPost>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpPostFormatToPostConnectionEdge = {
  __typename?: 'WPPostFormatToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpPost>;
};

/** Arguments for filtering the PostFormatToPostConnection connection */
export type WpPostFormatToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the postFormat type and the Taxonomy type */
export type WpPostFormatToTaxonomyConnectionEdge = {
  __typename?: 'WPPostFormatToTaxonomyConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<WpTaxonomy>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum WpPostIdType {
  /** Identify a resource by the Database ID. */
  DatabaseId = 'DATABASE_ID',
  /** Identify a resource by the (hashed) Global ID. */
  Id = 'ID',
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  Slug = 'SLUG',
  /** Identify a resource by the URI. */
  Uri = 'URI'
}

/** The format of post field data. */
export enum WpPostObjectFieldFormatEnum {
  /** Provide the field value directly from database. Null on unauthenticated requests. */
  Raw = 'RAW',
  /** Provide the field value as rendered by WordPress. Default. */
  Rendered = 'RENDERED'
}

/** The column to use when filtering by date */
export enum WpPostObjectsConnectionDateColumnEnum {
  /** The date the comment was created in local time. */
  Date = 'DATE',
  /** The most recent modification date of the comment. */
  Modified = 'MODIFIED'
}

/** Field to order the connection by */
export enum WpPostObjectsConnectionOrderbyEnum {
  /** Order by author */
  Author = 'AUTHOR',
  /** Order by the number of comments it has acquired */
  CommentCount = 'COMMENT_COUNT',
  /** Order by publish date */
  Date = 'DATE',
  /** Preserve the ID order given in the IN array */
  In = 'IN',
  /** Order by the menu order value */
  MenuOrder = 'MENU_ORDER',
  /** Order by last modified date */
  Modified = 'MODIFIED',
  /** Preserve slug order given in the NAME_IN array */
  NameIn = 'NAME_IN',
  /** Order by parent ID */
  Parent = 'PARENT',
  /** Order by slug */
  Slug = 'SLUG',
  /** Order by title */
  Title = 'TITLE'
}

/** Options for ordering the connection */
export type WpPostObjectsConnectionOrderbyInput = {
  /** The field to order the connection by */
  field: WpPostObjectsConnectionOrderbyEnum;
  /** Possible directions in which to order a list of items */
  order: WpOrderEnum;
};

/** Set relationships between the post to postFormats */
export type WpPostPostFormatsInput = {
  /** If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars['Boolean']>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<WpPostPostFormatsNodeInput>>>;
};

/** List of postFormats to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export type WpPostPostFormatsNodeInput = {
  /** The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation. */
  description?: InputMaybe<Scalars['String']>;
  /** The ID of the postFormat. If present, this will be used to connect to the post. If no existing postFormat exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars['ID']>;
  /** The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars['String']>;
  /** The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars['String']>;
};

/** The status of the object. */
export enum WpPostStatusEnum {
  /** Objects with the auto-draft status */
  AutoDraft = 'AUTO_DRAFT',
  /** Objects with the draft status */
  Draft = 'DRAFT',
  /** Objects with the future status */
  Future = 'FUTURE',
  /** Objects with the inherit status */
  Inherit = 'INHERIT',
  /** Objects with the pending status */
  Pending = 'PENDING',
  /** Objects with the private status */
  Private = 'PRIVATE',
  /** Objects with the publish status */
  Publish = 'PUBLISH',
  /** Objects with the request-completed status */
  RequestCompleted = 'REQUEST_COMPLETED',
  /** Objects with the request-confirmed status */
  RequestConfirmed = 'REQUEST_CONFIRMED',
  /** Objects with the request-failed status */
  RequestFailed = 'REQUEST_FAILED',
  /** Objects with the request-pending status */
  RequestPending = 'REQUEST_PENDING',
  /** Objects with the trash status */
  Trash = 'TRASH'
}

/** Set relationships between the post to tags */
export type WpPostTagsInput = {
  /** If true, this will append the tag to existing related tags. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars['Boolean']>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<WpPostTagsNodeInput>>>;
};

/** List of tags to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export type WpPostTagsNodeInput = {
  /** The description of the tag. This field is used to set a description of the tag if a new one is created during the mutation. */
  description?: InputMaybe<Scalars['String']>;
  /** The ID of the tag. If present, this will be used to connect to the post. If no existing tag exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars['ID']>;
  /** The name of the tag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars['String']>;
  /** The slug of the tag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars['String']>;
};

/** Connection between the post type and the category type */
export type WpPostToCategoryConnection = {
  __typename?: 'WPPostToCategoryConnection';
  /** Edges for the PostToCategoryConnection connection */
  edges?: Maybe<Array<Maybe<WpPostToCategoryConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpCategory>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpPostToCategoryConnectionEdge = {
  __typename?: 'WPPostToCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpCategory>;
};

/** Arguments for filtering the PostToCategoryConnection connection */
export type WpPostToCategoryConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<WpOrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<WpTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']>;
};

/** Connection between the post type and the Comment type */
export type WpPostToCommentConnection = {
  __typename?: 'WPPostToCommentConnection';
  /** Edges for the PostToCommentConnection connection */
  edges?: Maybe<Array<Maybe<WpPostToCommentConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpComment>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpPostToCommentConnectionEdge = {
  __typename?: 'WPPostToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpComment>;
};

/** Arguments for filtering the PostToCommentConnection connection */
export type WpPostToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<WpContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<WpOrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<WpCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']>;
};

/** Connection between the post type and the postFormat type */
export type WpPostToPostFormatConnection = {
  __typename?: 'WPPostToPostFormatConnection';
  /** Edges for the PostToPostFormatConnection connection */
  edges?: Maybe<Array<Maybe<WpPostToPostFormatConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpPostFormat>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpPostToPostFormatConnectionEdge = {
  __typename?: 'WPPostToPostFormatConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpPostFormat>;
};

/** Arguments for filtering the PostToPostFormatConnection connection */
export type WpPostToPostFormatConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<WpOrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<WpTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']>;
};

/** Connection between the post type and the post type */
export type WpPostToPreviewConnectionEdge = {
  __typename?: 'WPPostToPreviewConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<WpPost>;
};

/** Connection between the post type and the post type */
export type WpPostToRevisionConnection = {
  __typename?: 'WPPostToRevisionConnection';
  /** Edges for the postToRevisionConnection connection */
  edges?: Maybe<Array<Maybe<WpPostToRevisionConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpPost>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpPostToRevisionConnectionEdge = {
  __typename?: 'WPPostToRevisionConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpPost>;
};

/** Arguments for filtering the postToRevisionConnection connection */
export type WpPostToRevisionConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the post type and the tag type */
export type WpPostToTagConnection = {
  __typename?: 'WPPostToTagConnection';
  /** Edges for the PostToTagConnection connection */
  edges?: Maybe<Array<Maybe<WpPostToTagConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpTag>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpPostToTagConnectionEdge = {
  __typename?: 'WPPostToTagConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpTag>;
};

/** Arguments for filtering the PostToTagConnection connection */
export type WpPostToTagConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<WpOrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<WpTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']>;
};

/** Connection between the post type and the TermNode type */
export type WpPostToTermNodeConnection = {
  __typename?: 'WPPostToTermNodeConnection';
  /** Edges for the PostToTermNodeConnection connection */
  edges?: Maybe<Array<Maybe<WpPostToTermNodeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpTermNode>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpPostToTermNodeConnectionEdge = {
  __typename?: 'WPPostToTermNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpTermNode>;
};

/** Arguments for filtering the PostToTermNodeConnection connection */
export type WpPostToTermNodeConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<WpOrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<WpTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: InputMaybe<Array<InputMaybe<WpTaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']>;
};

/** Details for labels of the PostType */
export type WpPostTypeLabelDetails = {
  __typename?: 'WPPostTypeLabelDetails';
  /** Default is ‘Add New’ for both hierarchical and non-hierarchical types. */
  addNew?: Maybe<Scalars['String']>;
  /** Label for adding a new singular item. */
  addNewItem?: Maybe<Scalars['String']>;
  /** Label to signify all items in a submenu link. */
  allItems?: Maybe<Scalars['String']>;
  /** Label for archives in nav menus */
  archives?: Maybe<Scalars['String']>;
  /** Label for the attributes meta box. */
  attributes?: Maybe<Scalars['String']>;
  /** Label for editing a singular item. */
  editItem?: Maybe<Scalars['String']>;
  /** Label for the Featured Image meta box title. */
  featuredImage?: Maybe<Scalars['String']>;
  /** Label for the table views hidden heading. */
  filterItemsList?: Maybe<Scalars['String']>;
  /** Label for the media frame button. */
  insertIntoItem?: Maybe<Scalars['String']>;
  /** Label for the table hidden heading. */
  itemsList?: Maybe<Scalars['String']>;
  /** Label for the table pagination hidden heading. */
  itemsListNavigation?: Maybe<Scalars['String']>;
  /** Label for the menu name. */
  menuName?: Maybe<Scalars['String']>;
  /** General name for the post type, usually plural. */
  name?: Maybe<Scalars['String']>;
  /** Label for the new item page title. */
  newItem?: Maybe<Scalars['String']>;
  /** Label used when no items are found. */
  notFound?: Maybe<Scalars['String']>;
  /** Label used when no items are in the trash. */
  notFoundInTrash?: Maybe<Scalars['String']>;
  /** Label used to prefix parents of hierarchical items. */
  parentItemColon?: Maybe<Scalars['String']>;
  /** Label for removing the featured image. */
  removeFeaturedImage?: Maybe<Scalars['String']>;
  /** Label for searching plural items. */
  searchItems?: Maybe<Scalars['String']>;
  /** Label for setting the featured image. */
  setFeaturedImage?: Maybe<Scalars['String']>;
  /** Name for one object of this post type. */
  singularName?: Maybe<Scalars['String']>;
  /** Label for the media frame filter. */
  uploadedToThisItem?: Maybe<Scalars['String']>;
  /** Label in the media frame for using a featured image. */
  useFeaturedImage?: Maybe<Scalars['String']>;
  /** Label for viewing a singular item. */
  viewItem?: Maybe<Scalars['String']>;
  /** Label for viewing post type archives. */
  viewItems?: Maybe<Scalars['String']>;
};

/** The reading setting type */
export type WpReadingSettings = {
  __typename?: 'WPReadingSettings';
  /** The ID of the page that should display the latest posts */
  pageForPosts?: Maybe<Scalars['Int']>;
  /** The ID of the page that should be displayed on the front page */
  pageOnFront?: Maybe<Scalars['Int']>;
  /** Blog pages show at most. */
  postsPerPage?: Maybe<Scalars['Int']>;
  /** What to show on the front page */
  showOnFront?: Maybe<Scalars['String']>;
};

/** Input for the registerUser mutation */
export type WpRegisterUserInput = {
  /** User's AOL IM account. */
  aim?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** A string containing content about the user. */
  description?: InputMaybe<Scalars['String']>;
  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */
  displayName?: InputMaybe<Scalars['String']>;
  /** A string containing the user's email address. */
  email?: InputMaybe<Scalars['String']>;
  /** 	The user's first name. */
  firstName?: InputMaybe<Scalars['String']>;
  /** User's Jabber account. */
  jabber?: InputMaybe<Scalars['String']>;
  /** The user's last name. */
  lastName?: InputMaybe<Scalars['String']>;
  /** User's locale. */
  locale?: InputMaybe<Scalars['String']>;
  /** A string that contains a URL-friendly name for the user. The default is the user's username. */
  nicename?: InputMaybe<Scalars['String']>;
  /** The user's nickname, defaults to the user's username. */
  nickname?: InputMaybe<Scalars['String']>;
  /** A string that contains the plain text password for the user. */
  password?: InputMaybe<Scalars['String']>;
  /** The date the user registered. Format is Y-m-d H:i:s. */
  registered?: InputMaybe<Scalars['String']>;
  /** A string for whether to enable the rich editor or not. False if not empty. */
  richEditing?: InputMaybe<Scalars['String']>;
  /** A string that contains the user's username. */
  username: Scalars['String'];
  /** A string containing the user's URL for the user's web site. */
  websiteUrl?: InputMaybe<Scalars['String']>;
  /** User's Yahoo IM account. */
  yim?: InputMaybe<Scalars['String']>;
};

/** The payload for the registerUser mutation */
export type WpRegisterUserPayload = {
  __typename?: 'WPRegisterUserPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The User object mutation type. */
  user?: Maybe<WpUser>;
};

/** The logical relation between each item in the array when there are more than one. */
export enum WpRelationEnum {
  /** The logical AND condition returns true if both operands are true, otherwise, it returns false. */
  And = 'AND',
  /** The logical OR condition returns false if both operands are false, otherwise, it returns true. */
  Or = 'OR'
}

/** Input for the resetUserPassword mutation */
export type WpResetUserPasswordInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Password reset key */
  key?: InputMaybe<Scalars['String']>;
  /** The user's login (username). */
  login?: InputMaybe<Scalars['String']>;
  /** The new password. */
  password?: InputMaybe<Scalars['String']>;
};

/** The payload for the resetUserPassword mutation */
export type WpResetUserPasswordPayload = {
  __typename?: 'WPResetUserPasswordPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The User object mutation type. */
  user?: Maybe<WpUser>;
};

/** Input for the restoreComment mutation */
export type WpRestoreCommentInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The ID of the comment to be restored */
  id: Scalars['ID'];
};

/** The payload for the restoreComment mutation */
export type WpRestoreCommentPayload = {
  __typename?: 'WPRestoreCommentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The restored comment object */
  comment?: Maybe<WpComment>;
  /** The ID of the restored comment */
  restoredId?: Maybe<Scalars['ID']>;
};

/** Connection between the RootQuery type and the category type */
export type WpRootQueryToCategoryConnection = {
  __typename?: 'WPRootQueryToCategoryConnection';
  /** Edges for the RootQueryToCategoryConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToCategoryConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpCategory>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToCategoryConnectionEdge = {
  __typename?: 'WPRootQueryToCategoryConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpCategory>;
};

/** Arguments for filtering the RootQueryToCategoryConnection connection */
export type WpRootQueryToCategoryConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<WpOrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<WpTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']>;
};

/** Connection between the RootQuery type and the Comment type */
export type WpRootQueryToCommentConnection = {
  __typename?: 'WPRootQueryToCommentConnection';
  /** Edges for the RootQueryToCommentConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToCommentConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpComment>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToCommentConnectionEdge = {
  __typename?: 'WPRootQueryToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpComment>;
};

/** Arguments for filtering the RootQueryToCommentConnection connection */
export type WpRootQueryToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<WpContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<WpOrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<WpCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']>;
};

/** Connection between the RootQuery type and the ContentNode type */
export type WpRootQueryToContentNodeConnection = {
  __typename?: 'WPRootQueryToContentNodeConnection';
  /** Edges for the RootQueryToContentNodeConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToContentNodeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpContentNode>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToContentNodeConnectionEdge = {
  __typename?: 'WPRootQueryToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpContentNode>;
};

/** Arguments for filtering the RootQueryToContentNodeConnection connection */
export type WpRootQueryToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<WpContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the RootQuery type and the ContentRevisionUnion type */
export type WpRootQueryToContentRevisionUnionConnection = {
  __typename?: 'WPRootQueryToContentRevisionUnionConnection';
  /** Edges for the RootQueryToContentRevisionUnionConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToContentRevisionUnionConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpContentRevisionUnion>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToContentRevisionUnionConnectionEdge = {
  __typename?: 'WPRootQueryToContentRevisionUnionConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpContentRevisionUnion>;
};

/** Arguments for filtering the RootQueryToContentRevisionUnionConnection connection */
export type WpRootQueryToContentRevisionUnionConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<WpContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the RootQuery type and the ContentType type */
export type WpRootQueryToContentTypeConnection = {
  __typename?: 'WPRootQueryToContentTypeConnection';
  /** Edges for the RootQueryToContentTypeConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToContentTypeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpContentType>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToContentTypeConnectionEdge = {
  __typename?: 'WPRootQueryToContentTypeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpContentType>;
};

/** Connection between the RootQuery type and the EnqueuedScript type */
export type WpRootQueryToEnqueuedScriptConnection = {
  __typename?: 'WPRootQueryToEnqueuedScriptConnection';
  /** Edges for the RootQueryToEnqueuedScriptConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToEnqueuedScriptConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpEnqueuedScript>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToEnqueuedScriptConnectionEdge = {
  __typename?: 'WPRootQueryToEnqueuedScriptConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpEnqueuedScript>;
};

/** Connection between the RootQuery type and the EnqueuedStylesheet type */
export type WpRootQueryToEnqueuedStylesheetConnection = {
  __typename?: 'WPRootQueryToEnqueuedStylesheetConnection';
  /** Edges for the RootQueryToEnqueuedStylesheetConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToEnqueuedStylesheetConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpEnqueuedStylesheet>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToEnqueuedStylesheetConnectionEdge = {
  __typename?: 'WPRootQueryToEnqueuedStylesheetConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpEnqueuedStylesheet>;
};

/** Connection between the RootQuery type and the mediaItem type */
export type WpRootQueryToMediaItemConnection = {
  __typename?: 'WPRootQueryToMediaItemConnection';
  /** Edges for the RootQueryToMediaItemConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToMediaItemConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpMediaItem>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToMediaItemConnectionEdge = {
  __typename?: 'WPRootQueryToMediaItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpMediaItem>;
};

/** Arguments for filtering the RootQueryToMediaItemConnection connection */
export type WpRootQueryToMediaItemConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the RootQuery type and the Menu type */
export type WpRootQueryToMenuConnection = {
  __typename?: 'WPRootQueryToMenuConnection';
  /** Edges for the RootQueryToMenuConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToMenuConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpMenu>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToMenuConnectionEdge = {
  __typename?: 'WPRootQueryToMenuConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpMenu>;
};

/** Arguments for filtering the RootQueryToMenuConnection connection */
export type WpRootQueryToMenuConnectionWhereArgs = {
  /** The ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<WpMenuLocationEnum>;
  /** The slug of the menu to query items for */
  slug?: InputMaybe<Scalars['String']>;
};

/** Connection between the RootQuery type and the MenuItem type */
export type WpRootQueryToMenuItemConnection = {
  __typename?: 'WPRootQueryToMenuItemConnection';
  /** Edges for the RootQueryToMenuItemConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToMenuItemConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpMenuItem>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToMenuItemConnectionEdge = {
  __typename?: 'WPRootQueryToMenuItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpMenuItem>;
};

/** Arguments for filtering the RootQueryToMenuItemConnection connection */
export type WpRootQueryToMenuItemConnectionWhereArgs = {
  /** The ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<WpMenuLocationEnum>;
  /** The database ID of the parent menu object */
  parentDatabaseId?: InputMaybe<Scalars['Int']>;
  /** The ID of the parent menu object */
  parentId?: InputMaybe<Scalars['ID']>;
};

/** Connection between the RootQuery type and the page type */
export type WpRootQueryToPageConnection = {
  __typename?: 'WPRootQueryToPageConnection';
  /** Edges for the RootQueryToPageConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToPageConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpPage>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToPageConnectionEdge = {
  __typename?: 'WPRootQueryToPageConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpPage>;
};

/** Arguments for filtering the RootQueryToPageConnection connection */
export type WpRootQueryToPageConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the RootQuery type and the Plugin type */
export type WpRootQueryToPluginConnection = {
  __typename?: 'WPRootQueryToPluginConnection';
  /** Edges for the RootQueryToPluginConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToPluginConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpPlugin>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToPluginConnectionEdge = {
  __typename?: 'WPRootQueryToPluginConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpPlugin>;
};

/** Arguments for filtering the RootQueryToPluginConnection connection */
export type WpRootQueryToPluginConnectionWhereArgs = {
  /** Show plugin based on a keyword search. */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve plugins where plugin status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPluginStatusEnum>>>;
  /** Show plugins with a specific status. */
  status?: InputMaybe<WpPluginStatusEnum>;
};

/** Connection between the RootQuery type and the post type */
export type WpRootQueryToPostConnection = {
  __typename?: 'WPRootQueryToPostConnection';
  /** Edges for the RootQueryToPostConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToPostConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpPost>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToPostConnectionEdge = {
  __typename?: 'WPRootQueryToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpPost>;
};

/** Arguments for filtering the RootQueryToPostConnection connection */
export type WpRootQueryToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the RootQuery type and the postFormat type */
export type WpRootQueryToPostFormatConnection = {
  __typename?: 'WPRootQueryToPostFormatConnection';
  /** Edges for the RootQueryToPostFormatConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToPostFormatConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpPostFormat>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToPostFormatConnectionEdge = {
  __typename?: 'WPRootQueryToPostFormatConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpPostFormat>;
};

/** Arguments for filtering the RootQueryToPostFormatConnection connection */
export type WpRootQueryToPostFormatConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<WpOrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<WpTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']>;
};

/** Connection between the RootQuery type and the tag type */
export type WpRootQueryToTagConnection = {
  __typename?: 'WPRootQueryToTagConnection';
  /** Edges for the RootQueryToTagConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToTagConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpTag>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToTagConnectionEdge = {
  __typename?: 'WPRootQueryToTagConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpTag>;
};

/** Arguments for filtering the RootQueryToTagConnection connection */
export type WpRootQueryToTagConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<WpOrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<WpTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']>;
};

/** Connection between the RootQuery type and the Taxonomy type */
export type WpRootQueryToTaxonomyConnection = {
  __typename?: 'WPRootQueryToTaxonomyConnection';
  /** Edges for the RootQueryToTaxonomyConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToTaxonomyConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpTaxonomy>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToTaxonomyConnectionEdge = {
  __typename?: 'WPRootQueryToTaxonomyConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpTaxonomy>;
};

/** Connection between the RootQuery type and the TermNode type */
export type WpRootQueryToTermNodeConnection = {
  __typename?: 'WPRootQueryToTermNodeConnection';
  /** Edges for the RootQueryToTermNodeConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToTermNodeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpTermNode>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToTermNodeConnectionEdge = {
  __typename?: 'WPRootQueryToTermNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpTermNode>;
};

/** Arguments for filtering the RootQueryToTermNodeConnection connection */
export type WpRootQueryToTermNodeConnectionWhereArgs = {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars['String']>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars['Int']>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars['Boolean']>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars['String']>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars['Boolean']>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars['Boolean']>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars['String']>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<WpOrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<WpTermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars['Boolean']>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: InputMaybe<Array<InputMaybe<WpTaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars['Boolean']>;
};

/** Connection between the RootQuery type and the Theme type */
export type WpRootQueryToThemeConnection = {
  __typename?: 'WPRootQueryToThemeConnection';
  /** Edges for the RootQueryToThemeConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToThemeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpTheme>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToThemeConnectionEdge = {
  __typename?: 'WPRootQueryToThemeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpTheme>;
};

/** Connection between the RootQuery type and the User type */
export type WpRootQueryToUserConnection = {
  __typename?: 'WPRootQueryToUserConnection';
  /** Edges for the RootQueryToUserConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToUserConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpUser>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToUserConnectionEdge = {
  __typename?: 'WPRootQueryToUserConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpUser>;
};

/** Arguments for filtering the RootQueryToUserConnection connection */
export type WpRootQueryToUserConnectionWhereArgs = {
  /** Array of userIds to exclude. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** Pass an array of post types to filter results to users who have published posts in those post types. */
  hasPublishedPosts?: InputMaybe<Array<InputMaybe<WpContentTypeEnum>>>;
  /** Array of userIds to include. */
  include?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** The user login. */
  login?: InputMaybe<Scalars['String']>;
  /** An array of logins to include. Users matching one of these logins will be included in results. */
  loginIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** An array of logins to exclude. Users matching one of these logins will not be included in results. */
  loginNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** The user nicename. */
  nicename?: InputMaybe<Scalars['String']>;
  /** An array of nicenames to include. Users matching one of these nicenames will be included in results. */
  nicenameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** An array of nicenames to exclude. Users matching one of these nicenames will not be included in results. */
  nicenameNotIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpUsersConnectionOrderbyInput>>>;
  /** An array of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role. */
  role?: InputMaybe<WpUserRoleEnum>;
  /** An array of role names. Matched users must have at least one of these roles. */
  roleIn?: InputMaybe<Array<InputMaybe<WpUserRoleEnum>>>;
  /** An array of role names to exclude. Users matching one or more of these roles will not be included in results. */
  roleNotIn?: InputMaybe<Array<InputMaybe<WpUserRoleEnum>>>;
  /** Search keyword. Searches for possible string matches on columns. When "searchColumns" is left empty, it tries to determine which column to search in based on search string. */
  search?: InputMaybe<Scalars['String']>;
  /** Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'. */
  searchColumns?: InputMaybe<Array<InputMaybe<WpUsersConnectionSearchColumnEnum>>>;
};

/** Connection between the RootQuery type and the UserRole type */
export type WpRootQueryToUserRoleConnection = {
  __typename?: 'WPRootQueryToUserRoleConnection';
  /** Edges for the RootQueryToUserRoleConnection connection */
  edges?: Maybe<Array<Maybe<WpRootQueryToUserRoleConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpUserRole>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpRootQueryToUserRoleConnectionEdge = {
  __typename?: 'WPRootQueryToUserRoleConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpUserRole>;
};

/** Input for the sendPasswordResetEmail mutation */
export type WpSendPasswordResetEmailInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** A string that contains the user's username or email address. */
  username: Scalars['String'];
};

/** The payload for the sendPasswordResetEmail mutation */
export type WpSendPasswordResetEmailPayload = {
  __typename?: 'WPSendPasswordResetEmailPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The user that the password reset email was sent to */
  user?: Maybe<WpUser>;
};

/** All of the registered settings */
export type WpSettings = {
  __typename?: 'WPSettings';
  /** Settings of the the string Settings Group */
  discussionSettingsDefaultCommentStatus?: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  discussionSettingsDefaultPingStatus?: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  generalSettingsDateFormat?: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  generalSettingsDescription?: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  generalSettingsEmail?: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  generalSettingsLanguage?: Maybe<Scalars['String']>;
  /** Settings of the the integer Settings Group */
  generalSettingsStartOfWeek?: Maybe<Scalars['Int']>;
  /** Settings of the the string Settings Group */
  generalSettingsTimeFormat?: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  generalSettingsTimezone?: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  generalSettingsTitle?: Maybe<Scalars['String']>;
  /** Settings of the the string Settings Group */
  generalSettingsUrl?: Maybe<Scalars['String']>;
  /** Settings of the the integer Settings Group */
  readingSettingsPageForPosts?: Maybe<Scalars['Int']>;
  /** Settings of the the integer Settings Group */
  readingSettingsPageOnFront?: Maybe<Scalars['Int']>;
  /** Settings of the the integer Settings Group */
  readingSettingsPostsPerPage?: Maybe<Scalars['Int']>;
  /** Settings of the the string Settings Group */
  readingSettingsShowOnFront?: Maybe<Scalars['String']>;
  /** Settings of the the integer Settings Group */
  writingSettingsDefaultCategory?: Maybe<Scalars['Int']>;
  /** Settings of the the string Settings Group */
  writingSettingsDefaultPostFormat?: Maybe<Scalars['String']>;
  /** Settings of the the boolean Settings Group */
  writingSettingsUseSmilies?: Maybe<Scalars['Boolean']>;
};

/** The tag type */
export type WpTag = WpDatabaseIdentifier & WpMenuItemLinkable & WpNode & WpTermNode & WpUniformResourceIdentifiable & {
  __typename?: 'WPTag';
  /** Connection between the tag type and the ContentNode type */
  contentNodes?: Maybe<WpTagToContentNodeConnection>;
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  databaseId: Scalars['Int'];
  /** The description of the object */
  description?: Maybe<Scalars['String']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<WpTermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<WpTermNodeToEnqueuedStylesheetConnection>;
  /** The unique resource identifier path */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The link to the term */
  link?: Maybe<Scalars['String']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']>;
  /** Connection between the tag type and the post type */
  posts?: Maybe<WpTagToPostConnection>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  tagId?: Maybe<Scalars['Int']>;
  /** Connection between the tag type and the Taxonomy type */
  taxonomy?: Maybe<WpTagToTaxonomyConnectionEdge>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};


/** The tag type */
export type WpTagContentNodesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpTagToContentNodeConnectionWhereArgs>;
};


/** The tag type */
export type WpTagEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The tag type */
export type WpTagEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** The tag type */
export type WpTagPostsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpTagToPostConnectionWhereArgs>;
};

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum WpTagIdType {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}

/** Connection between the tag type and the ContentNode type */
export type WpTagToContentNodeConnection = {
  __typename?: 'WPTagToContentNodeConnection';
  /** Edges for the TagToContentNodeConnection connection */
  edges?: Maybe<Array<Maybe<WpTagToContentNodeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpContentNode>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpTagToContentNodeConnectionEdge = {
  __typename?: 'WPTagToContentNodeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpContentNode>;
};

/** Arguments for filtering the TagToContentNodeConnection connection */
export type WpTagToContentNodeConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<WpContentTypesOfTagEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the tag type and the post type */
export type WpTagToPostConnection = {
  __typename?: 'WPTagToPostConnection';
  /** Edges for the TagToPostConnection connection */
  edges?: Maybe<Array<Maybe<WpTagToPostConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpPost>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpTagToPostConnectionEdge = {
  __typename?: 'WPTagToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpPost>;
};

/** Arguments for filtering the TagToPostConnection connection */
export type WpTagToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the tag type and the Taxonomy type */
export type WpTagToTaxonomyConnectionEdge = {
  __typename?: 'WPTagToTaxonomyConnectionEdge';
  /** The node of the connection, without the edges */
  node?: Maybe<WpTaxonomy>;
};

/** A taxonomy object */
export type WpTaxonomy = WpNode & {
  __typename?: 'WPTaxonomy';
  /** List of Content Types associated with the Taxonomy */
  connectedContentTypes?: Maybe<WpTaxonomyToContentTypeConnection>;
  /** Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description */
  description?: Maybe<Scalars['String']>;
  /** The plural name of the post type within the GraphQL Schema. */
  graphqlPluralName?: Maybe<Scalars['String']>;
  /** The singular name of the post type within the GraphQL Schema. */
  graphqlSingleName?: Maybe<Scalars['String']>;
  /** Whether the taxonomy is hierarchical */
  hierarchical?: Maybe<Scalars['Boolean']>;
  /** The globally unique identifier of the taxonomy object. */
  id: Scalars['ID'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Name of the taxonomy shown in the menu. Usually plural. */
  label?: Maybe<Scalars['String']>;
  /** The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label */
  name?: Maybe<Scalars['String']>;
  /** Whether the taxonomy is publicly queryable */
  public?: Maybe<Scalars['Boolean']>;
  /** Name of content type to diplay in REST API &quot;wp/v2&quot; namespace. */
  restBase?: Maybe<Scalars['String']>;
  /** The REST Controller class assigned to handling this content type. */
  restControllerClass?: Maybe<Scalars['String']>;
  /** Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud */
  showCloud?: Maybe<Scalars['Boolean']>;
  /** Whether to display a column for the taxonomy on its post type listing screens. */
  showInAdminColumn?: Maybe<Scalars['Boolean']>;
  /** Whether to add the post type to the GraphQL Schema. */
  showInGraphql?: Maybe<Scalars['Boolean']>;
  /** Whether to show the taxonomy in the admin menu */
  showInMenu?: Maybe<Scalars['Boolean']>;
  /** Whether the taxonomy is available for selection in navigation menus. */
  showInNavMenus?: Maybe<Scalars['Boolean']>;
  /** Whether to show the taxonomy in the quick/bulk edit panel. */
  showInQuickEdit?: Maybe<Scalars['Boolean']>;
  /** Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace. */
  showInRest?: Maybe<Scalars['Boolean']>;
  /** Whether to generate and allow a UI for managing terms in this taxonomy in the admin */
  showUi?: Maybe<Scalars['Boolean']>;
};


/** A taxonomy object */
export type WpTaxonomyConnectedContentTypesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** Allowed taxonomies */
export enum WpTaxonomyEnum {
  /** Taxonomy enum category */
  Category = 'CATEGORY',
  /** Taxonomy enum post_format */
  Postformat = 'POSTFORMAT',
  /** Taxonomy enum post_tag */
  Tag = 'TAG'
}

/** The Type of Identifier used to fetch a single Taxonomy node. To be used along with the "id" field. Default is "ID". */
export enum WpTaxonomyIdTypeEnum {
  /** The globally unique ID */
  Id = 'ID',
  /** The name of the taxonomy */
  Name = 'NAME'
}

/** Connection between the Taxonomy type and the ContentType type */
export type WpTaxonomyToContentTypeConnection = {
  __typename?: 'WPTaxonomyToContentTypeConnection';
  /** Edges for the TaxonomyToContentTypeConnection connection */
  edges?: Maybe<Array<Maybe<WpTaxonomyToContentTypeConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpContentType>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpTaxonomyToContentTypeConnectionEdge = {
  __typename?: 'WPTaxonomyToContentTypeConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpContentType>;
};

/** The template assigned to the node */
export type WpTemplate_CustomHomePage = WpContentTemplate & {
  __typename?: 'WPTemplate_CustomHomePage';
  /** The name of the template */
  templateName?: Maybe<Scalars['String']>;
};

/** The template assigned to the node */
export type WpTemplate_PageWithLeftSidebar = WpContentTemplate & {
  __typename?: 'WPTemplate_PageWithLeftSidebar';
  /** The name of the template */
  templateName?: Maybe<Scalars['String']>;
};

/** The template assigned to the node */
export type WpTemplate_PageWithRightSidebar = WpContentTemplate & {
  __typename?: 'WPTemplate_PageWithRightSidebar';
  /** The name of the template */
  templateName?: Maybe<Scalars['String']>;
};

/** Terms are nodes within a Taxonomy, used to group and relate other nodes. */
export type WpTermNode = {
  /** The number of objects connected to the object */
  count?: Maybe<Scalars['Int']>;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'];
  /** The description of the object */
  description?: Maybe<Scalars['String']>;
  /** Connection between the TermNode type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<WpTermNodeToEnqueuedScriptConnection>;
  /** Connection between the TermNode type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<WpTermNodeToEnqueuedStylesheetConnection>;
  /** The unique resource identifier path */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The link to the term */
  link?: Maybe<Scalars['String']>;
  /** The human friendly name of the object. */
  name?: Maybe<Scalars['String']>;
  /** An alphanumeric identifier for the object unique to its type. */
  slug?: Maybe<Scalars['String']>;
  /** The name of the taxonomy that the object is associated with */
  taxonomyName?: Maybe<Scalars['String']>;
  /** The ID of the term group that this term object belongs to */
  termGroupId?: Maybe<Scalars['Int']>;
  /** The taxonomy ID that the object is associated with */
  termTaxonomyId?: Maybe<Scalars['Int']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};


/** Terms are nodes within a Taxonomy, used to group and relate other nodes. */
export type WpTermNodeEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** Terms are nodes within a Taxonomy, used to group and relate other nodes. */
export type WpTermNodeEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The Type of Identifier used to fetch a single resource. Default is "ID". To be used along with the "id" field. */
export enum WpTermNodeIdTypeEnum {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The hashed Global ID */
  Id = 'ID',
  /** The name of the node */
  Name = 'NAME',
  /** Url friendly name of the node */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI'
}

/** Connection between the TermNode type and the EnqueuedScript type */
export type WpTermNodeToEnqueuedScriptConnection = {
  __typename?: 'WPTermNodeToEnqueuedScriptConnection';
  /** Edges for the TermNodeToEnqueuedScriptConnection connection */
  edges?: Maybe<Array<Maybe<WpTermNodeToEnqueuedScriptConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpEnqueuedScript>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpTermNodeToEnqueuedScriptConnectionEdge = {
  __typename?: 'WPTermNodeToEnqueuedScriptConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpEnqueuedScript>;
};

/** Connection between the TermNode type and the EnqueuedStylesheet type */
export type WpTermNodeToEnqueuedStylesheetConnection = {
  __typename?: 'WPTermNodeToEnqueuedStylesheetConnection';
  /** Edges for the TermNodeToEnqueuedStylesheetConnection connection */
  edges?: Maybe<Array<Maybe<WpTermNodeToEnqueuedStylesheetConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpEnqueuedStylesheet>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpTermNodeToEnqueuedStylesheetConnectionEdge = {
  __typename?: 'WPTermNodeToEnqueuedStylesheetConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpEnqueuedStylesheet>;
};

/** Options for ordering the connection by */
export enum WpTermObjectsConnectionOrderbyEnum {
  /** Order the connection by item count. */
  Count = 'COUNT',
  /** Order the connection by description. */
  Description = 'DESCRIPTION',
  /** Order the connection by name. */
  Name = 'NAME',
  /** Order the connection by slug. */
  Slug = 'SLUG',
  /** Order the connection by term group. */
  TermGroup = 'TERM_GROUP',
  /** Order the connection by term id. */
  TermId = 'TERM_ID',
  /** Order the connection by term order. */
  TermOrder = 'TERM_ORDER'
}

/** A theme object */
export type WpTheme = WpNode & {
  __typename?: 'WPTheme';
  /** Name of the theme author(s), could also be a company name. This field is equivalent to WP_Theme-&gt;get( &quot;Author&quot; ). */
  author?: Maybe<Scalars['String']>;
  /** URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; ). */
  authorUri?: Maybe<Scalars['String']>;
  /** The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; ). */
  description?: Maybe<Scalars['String']>;
  /** The globally unique identifier of the theme object. */
  id: Scalars['ID'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; ). */
  name?: Maybe<Scalars['String']>;
  /** The URL of the screenshot for the theme. The screenshot is intended to give an overview of what the theme looks like. This field is equivalent to WP_Theme-&gt;get_screenshot(). */
  screenshot?: Maybe<Scalars['String']>;
  /** The theme slug is used to internally match themes. Theme slugs can have subdirectories like: my-theme/sub-theme. This field is equivalent to WP_Theme-&gt;get_stylesheet(). */
  slug?: Maybe<Scalars['String']>;
  /** URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; ). */
  tags?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A URI if the theme has a website associated with it. The Theme URI is handy for directing users to a theme site for support etc. This field is equivalent to WP_Theme-&gt;get( &quot;ThemeURI&quot; ). */
  themeUri?: Maybe<Scalars['String']>;
  /** The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; ). */
  version?: Maybe<Scalars['String']>;
};

/** Any node that has a URI */
export type WpUniformResourceIdentifiable = {
  /** The unique resource identifier path */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
};

/** Input for the UpdateCategory mutation */
export type WpUpdateCategoryInput = {
  /** The slug that the category will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The description of the category object */
  description?: InputMaybe<Scalars['String']>;
  /** The ID of the category object to update */
  id: Scalars['ID'];
  /** The name of the category object to mutate */
  name?: InputMaybe<Scalars['String']>;
  /** The ID of the category that should be set as the parent */
  parentId?: InputMaybe<Scalars['ID']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']>;
};

/** The payload for the UpdateCategory mutation */
export type WpUpdateCategoryPayload = {
  __typename?: 'WPUpdateCategoryPayload';
  /** The created category */
  category?: Maybe<WpCategory>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Input for the updateComment mutation */
export type WpUpdateCommentInput = {
  /** The approval status of the comment. */
  approved?: InputMaybe<Scalars['String']>;
  /** The name of the comment's author. */
  author?: InputMaybe<Scalars['String']>;
  /** The email of the comment's author. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** The url of the comment's author. */
  authorUrl?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The database ID of the post object the comment belongs to. */
  commentOn?: InputMaybe<Scalars['Int']>;
  /** Content of the comment. */
  content?: InputMaybe<Scalars['String']>;
  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']>;
  /** The ID of the comment being updated. */
  id: Scalars['ID'];
  /** Parent comment ID of current comment. */
  parent?: InputMaybe<Scalars['ID']>;
  /** Type of comment. */
  type?: InputMaybe<Scalars['String']>;
};

/** The payload for the updateComment mutation */
export type WpUpdateCommentPayload = {
  __typename?: 'WPUpdateCommentPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The comment that was created */
  comment?: Maybe<WpComment>;
  /** Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache */
  success?: Maybe<Scalars['Boolean']>;
};

/** Input for the updateMediaItem mutation */
export type WpUpdateMediaItemInput = {
  /** Alternative text to display when mediaItem is not displayed */
  altText?: InputMaybe<Scalars['String']>;
  /** The userId to assign as the author of the mediaItem */
  authorId?: InputMaybe<Scalars['ID']>;
  /** The caption for the mediaItem */
  caption?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The comment status for the mediaItem */
  commentStatus?: InputMaybe<Scalars['String']>;
  /** The date of the mediaItem */
  date?: InputMaybe<Scalars['String']>;
  /** The date (in GMT zone) of the mediaItem */
  dateGmt?: InputMaybe<Scalars['String']>;
  /** Description of the mediaItem */
  description?: InputMaybe<Scalars['String']>;
  /** The file name of the mediaItem */
  filePath?: InputMaybe<Scalars['String']>;
  /** The file type of the mediaItem */
  fileType?: InputMaybe<WpMimeTypeEnum>;
  /** The ID of the mediaItem object */
  id: Scalars['ID'];
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']>;
  /** The ping status for the mediaItem */
  pingStatus?: InputMaybe<Scalars['String']>;
  /** The slug of the mediaItem */
  slug?: InputMaybe<Scalars['String']>;
  /** The status of the mediaItem */
  status?: InputMaybe<WpMediaItemStatusEnum>;
  /** The title of the mediaItem */
  title?: InputMaybe<Scalars['String']>;
};

/** The payload for the updateMediaItem mutation */
export type WpUpdateMediaItemPayload = {
  __typename?: 'WPUpdateMediaItemPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The MediaItem object mutation type. */
  mediaItem?: Maybe<WpMediaItem>;
};

/** Input for the updatePage mutation */
export type WpUpdatePageInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars['String']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']>;
  /** The ID of the page object */
  id: Scalars['ID'];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars['ID']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']>;
  /** The status of the object */
  status?: InputMaybe<WpPostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** The payload for the updatePage mutation */
export type WpUpdatePagePayload = {
  __typename?: 'WPUpdatePagePayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The Post object mutation type. */
  page?: Maybe<WpPage>;
};

/** Input for the UpdatePostFormat mutation */
export type WpUpdatePostFormatInput = {
  /** The slug that the post_format will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The description of the post_format object */
  description?: InputMaybe<Scalars['String']>;
  /** The ID of the postFormat object to update */
  id: Scalars['ID'];
  /** The name of the post_format object to mutate */
  name?: InputMaybe<Scalars['String']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']>;
};

/** The payload for the UpdatePostFormat mutation */
export type WpUpdatePostFormatPayload = {
  __typename?: 'WPUpdatePostFormatPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The created post_format */
  postFormat?: Maybe<WpPostFormat>;
};

/** Input for the updatePost mutation */
export type WpUpdatePostInput = {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars['ID']>;
  /** Set connections between the post and categories */
  categories?: InputMaybe<WpPostCategoriesInput>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars['String']>;
  /** The content of the object */
  content?: InputMaybe<Scalars['String']>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars['String']>;
  /** The excerpt of the object */
  excerpt?: InputMaybe<Scalars['String']>;
  /** The ID of the post object */
  id: Scalars['ID'];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars['Int']>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars['String']>;
  /** The ping status for the object */
  pingStatus?: InputMaybe<Scalars['String']>;
  /** URLs that have been pinged. */
  pinged?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Set connections between the post and postFormats */
  postFormats?: InputMaybe<WpPostPostFormatsInput>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars['String']>;
  /** The status of the object */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Set connections between the post and tags */
  tags?: InputMaybe<WpPostTagsInput>;
  /** The title of the object */
  title?: InputMaybe<Scalars['String']>;
  /** URLs queued to be pinged. */
  toPing?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

/** The payload for the updatePost mutation */
export type WpUpdatePostPayload = {
  __typename?: 'WPUpdatePostPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The Post object mutation type. */
  post?: Maybe<WpPost>;
};

/** Input for the updateSettings mutation */
export type WpUpdateSettingsInput = {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** Allow people to submit comments on new posts. */
  discussionSettingsDefaultCommentStatus?: InputMaybe<Scalars['String']>;
  /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */
  discussionSettingsDefaultPingStatus?: InputMaybe<Scalars['String']>;
  /** A date format for all date strings. */
  generalSettingsDateFormat?: InputMaybe<Scalars['String']>;
  /** Site tagline. */
  generalSettingsDescription?: InputMaybe<Scalars['String']>;
  /** This address is used for admin purposes, like new user notification. */
  generalSettingsEmail?: InputMaybe<Scalars['String']>;
  /** WordPress locale code. */
  generalSettingsLanguage?: InputMaybe<Scalars['String']>;
  /** A day number of the week that the week should start on. */
  generalSettingsStartOfWeek?: InputMaybe<Scalars['Int']>;
  /** A time format for all time strings. */
  generalSettingsTimeFormat?: InputMaybe<Scalars['String']>;
  /** A city in the same timezone as you. */
  generalSettingsTimezone?: InputMaybe<Scalars['String']>;
  /** Site title. */
  generalSettingsTitle?: InputMaybe<Scalars['String']>;
  /** Site URL. */
  generalSettingsUrl?: InputMaybe<Scalars['String']>;
  /** The ID of the page that should display the latest posts */
  readingSettingsPageForPosts?: InputMaybe<Scalars['Int']>;
  /** The ID of the page that should be displayed on the front page */
  readingSettingsPageOnFront?: InputMaybe<Scalars['Int']>;
  /** Blog pages show at most. */
  readingSettingsPostsPerPage?: InputMaybe<Scalars['Int']>;
  /** What to show on the front page */
  readingSettingsShowOnFront?: InputMaybe<Scalars['String']>;
  /** Default post category. */
  writingSettingsDefaultCategory?: InputMaybe<Scalars['Int']>;
  /** Default post format. */
  writingSettingsDefaultPostFormat?: InputMaybe<Scalars['String']>;
  /** Convert emoticons like :-) and :-P to graphics on display. */
  writingSettingsUseSmilies?: InputMaybe<Scalars['Boolean']>;
};

/** The payload for the updateSettings mutation */
export type WpUpdateSettingsPayload = {
  __typename?: 'WPUpdateSettingsPayload';
  /** Update all settings. */
  allSettings?: Maybe<WpSettings>;
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** Update the DiscussionSettings setting. */
  discussionSettings?: Maybe<WpDiscussionSettings>;
  /** Update the GeneralSettings setting. */
  generalSettings?: Maybe<WpGeneralSettings>;
  /** Update the ReadingSettings setting. */
  readingSettings?: Maybe<WpReadingSettings>;
  /** Update the WritingSettings setting. */
  writingSettings?: Maybe<WpWritingSettings>;
};

/** Input for the UpdateTag mutation */
export type WpUpdateTagInput = {
  /** The slug that the post_tag will be an alias of */
  aliasOf?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** The description of the post_tag object */
  description?: InputMaybe<Scalars['String']>;
  /** The ID of the tag object to update */
  id: Scalars['ID'];
  /** The name of the post_tag object to mutate */
  name?: InputMaybe<Scalars['String']>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars['String']>;
};

/** The payload for the UpdateTag mutation */
export type WpUpdateTagPayload = {
  __typename?: 'WPUpdateTagPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The created post_tag */
  tag?: Maybe<WpTag>;
};

/** Input for the updateUser mutation */
export type WpUpdateUserInput = {
  /** User's AOL IM account. */
  aim?: InputMaybe<Scalars['String']>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  /** A string containing content about the user. */
  description?: InputMaybe<Scalars['String']>;
  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */
  displayName?: InputMaybe<Scalars['String']>;
  /** A string containing the user's email address. */
  email?: InputMaybe<Scalars['String']>;
  /** 	The user's first name. */
  firstName?: InputMaybe<Scalars['String']>;
  /** The ID of the user */
  id: Scalars['ID'];
  /** User's Jabber account. */
  jabber?: InputMaybe<Scalars['String']>;
  /** The user's last name. */
  lastName?: InputMaybe<Scalars['String']>;
  /** User's locale. */
  locale?: InputMaybe<Scalars['String']>;
  /** A string that contains a URL-friendly name for the user. The default is the user's username. */
  nicename?: InputMaybe<Scalars['String']>;
  /** The user's nickname, defaults to the user's username. */
  nickname?: InputMaybe<Scalars['String']>;
  /** A string that contains the plain text password for the user. */
  password?: InputMaybe<Scalars['String']>;
  /** The date the user registered. Format is Y-m-d H:i:s. */
  registered?: InputMaybe<Scalars['String']>;
  /** A string for whether to enable the rich editor or not. False if not empty. */
  richEditing?: InputMaybe<Scalars['String']>;
  /** An array of roles to be assigned to the user. */
  roles?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** A string containing the user's URL for the user's web site. */
  websiteUrl?: InputMaybe<Scalars['String']>;
  /** User's Yahoo IM account. */
  yim?: InputMaybe<Scalars['String']>;
};

/** The payload for the updateUser mutation */
export type WpUpdateUserPayload = {
  __typename?: 'WPUpdateUserPayload';
  /** If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The User object mutation type. */
  user?: Maybe<WpUser>;
};

/** A User object */
export type WpUser = WpCommenter & WpDatabaseIdentifier & WpNode & WpUniformResourceIdentifiable & {
  __typename?: 'WPUser';
  /** Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument. */
  avatar?: Maybe<WpAvatar>;
  /** User metadata option name. Usually it will be &quot;wp_capabilities&quot;. */
  capKey?: Maybe<Scalars['String']>;
  /** A list of capabilities (permissions) granted to the user */
  capabilities?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Connection between the User type and the Comment type */
  comments?: Maybe<WpUserToCommentConnection>;
  /** Identifies the primary key from the database. */
  databaseId: Scalars['Int'];
  /** Description of the user. */
  description?: Maybe<Scalars['String']>;
  /** Email address of the user. This is equivalent to the WP_User-&gt;user_email property. */
  email?: Maybe<Scalars['String']>;
  /** Connection between the User type and the EnqueuedScript type */
  enqueuedScripts?: Maybe<WpUserToEnqueuedScriptConnection>;
  /** Connection between the User type and the EnqueuedStylesheet type */
  enqueuedStylesheets?: Maybe<WpUserToEnqueuedStylesheetConnection>;
  /** A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps. */
  extraCapabilities?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** First name of the user. This is equivalent to the WP_User-&gt;user_first_name property. */
  firstName?: Maybe<Scalars['String']>;
  /** The globally unique identifier for the user object. */
  id: Scalars['ID'];
  /** Whether the node is a Content Node */
  isContentNode: Scalars['Boolean'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** Whether the node is a Term */
  isTermNode: Scalars['Boolean'];
  /** Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property. */
  lastName?: Maybe<Scalars['String']>;
  /** The preferred language locale set for the user. Value derived from get_user_locale(). */
  locale?: Maybe<Scalars['String']>;
  /** Connection between the User type and the mediaItem type */
  mediaItems?: Maybe<WpUserToMediaItemConnection>;
  /** Display name of the user. This is equivalent to the WP_User-&gt;dispaly_name property. */
  name?: Maybe<Scalars['String']>;
  /** The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename */
  nicename?: Maybe<Scalars['String']>;
  /** Nickname of the user. */
  nickname?: Maybe<Scalars['String']>;
  /** Connection between the User type and the page type */
  pages?: Maybe<WpUserToPageConnection>;
  /** Connection between the User type and the post type */
  posts?: Maybe<WpUserToPostConnection>;
  /** The date the user registered or was created. The field follows a full ISO8601 date string format. */
  registeredDate?: Maybe<Scalars['String']>;
  /** Connection between the User and Revisions authored by the user */
  revisions?: Maybe<WpUserToContentRevisionUnionConnection>;
  /** Connection between the User type and the UserRole type */
  roles?: Maybe<WpUserToUserRoleConnection>;
  /** The slug for the user. This field is equivalent to WP_User-&gt;user_nicename */
  slug?: Maybe<Scalars['String']>;
  /** The unique resource identifier path */
  uri?: Maybe<Scalars['String']>;
  /** A website url that is associated with the user. */
  url?: Maybe<Scalars['String']>;
  /**
   * The Id of the user. Equivalent to WP_User-&gt;ID
   * @deprecated Deprecated in favor of the databaseId field
   */
  userId?: Maybe<Scalars['Int']>;
  /** Username for the user. This field is equivalent to WP_User-&gt;user_login. */
  username?: Maybe<Scalars['String']>;
};


/** A User object */
export type WpUserAvatarArgs = {
  forceDefault?: InputMaybe<Scalars['Boolean']>;
  rating?: InputMaybe<WpAvatarRatingEnum>;
  size?: InputMaybe<Scalars['Int']>;
};


/** A User object */
export type WpUserCommentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpUserToCommentConnectionWhereArgs>;
};


/** A User object */
export type WpUserEnqueuedScriptsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A User object */
export type WpUserEnqueuedStylesheetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};


/** A User object */
export type WpUserMediaItemsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpUserToMediaItemConnectionWhereArgs>;
};


/** A User object */
export type WpUserPagesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpUserToPageConnectionWhereArgs>;
};


/** A User object */
export type WpUserPostsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpUserToPostConnectionWhereArgs>;
};


/** A User object */
export type WpUserRevisionsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<WpUserToContentRevisionUnionConnectionWhereArgs>;
};


/** A User object */
export type WpUserRolesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
};

/** The Type of Identifier used to fetch a single User node. To be used along with the "id" field. Default is "ID". */
export enum WpUserNodeIdTypeEnum {
  /** The Database ID for the node */
  DatabaseId = 'DATABASE_ID',
  /** The Email of the User */
  Email = 'EMAIL',
  /** The hashed Global ID */
  Id = 'ID',
  /** The slug of the User */
  Slug = 'SLUG',
  /** The URI for the node */
  Uri = 'URI',
  /** The username the User uses to login with */
  Username = 'USERNAME'
}

/** A user role object */
export type WpUserRole = WpNode & {
  __typename?: 'WPUserRole';
  /** The capabilities that belong to this role */
  capabilities?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The display name of the role */
  displayName?: Maybe<Scalars['String']>;
  /** The globally unique identifier for the user role object. */
  id: Scalars['ID'];
  /** Whether the object is restricted from the current viewer */
  isRestricted?: Maybe<Scalars['Boolean']>;
  /** The registered name of the role */
  name?: Maybe<Scalars['String']>;
};

/** Names of available user roles */
export enum WpUserRoleEnum {
  /** User role with specific capabilities */
  Administrator = 'ADMINISTRATOR',
  /** User role with specific capabilities */
  Author = 'AUTHOR',
  /** User role with specific capabilities */
  Contributor = 'CONTRIBUTOR',
  /** User role with specific capabilities */
  Editor = 'EDITOR',
  /** User role with specific capabilities */
  Subscriber = 'SUBSCRIBER'
}

/** Connection between the User type and the Comment type */
export type WpUserToCommentConnection = {
  __typename?: 'WPUserToCommentConnection';
  /** Edges for the UserToCommentConnection connection */
  edges?: Maybe<Array<Maybe<WpUserToCommentConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpComment>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpUserToCommentConnectionEdge = {
  __typename?: 'WPUserToCommentConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpComment>;
};

/** Arguments for filtering the UserToCommentConnection connection */
export type WpUserToCommentConnectionWhereArgs = {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars['String']>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars['String']>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars['String']>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars['String']>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars['ID']>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars['String']>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars['Int']>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<WpContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars['Int']>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<WpOrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<WpCommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars['Int']>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars['String']>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars['String']>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars['ID']>;
};

/** Connection between the User type and the ContentRevisionUnion type */
export type WpUserToContentRevisionUnionConnection = {
  __typename?: 'WPUserToContentRevisionUnionConnection';
  /** Edges for the UserToContentRevisionUnionConnection connection */
  edges?: Maybe<Array<Maybe<WpUserToContentRevisionUnionConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpContentRevisionUnion>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpUserToContentRevisionUnionConnectionEdge = {
  __typename?: 'WPUserToContentRevisionUnionConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpContentRevisionUnion>;
};

/** Arguments for filtering the UserToContentRevisionUnionConnection connection */
export type WpUserToContentRevisionUnionConnectionWhereArgs = {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<WpContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the User type and the EnqueuedScript type */
export type WpUserToEnqueuedScriptConnection = {
  __typename?: 'WPUserToEnqueuedScriptConnection';
  /** Edges for the UserToEnqueuedScriptConnection connection */
  edges?: Maybe<Array<Maybe<WpUserToEnqueuedScriptConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpEnqueuedScript>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpUserToEnqueuedScriptConnectionEdge = {
  __typename?: 'WPUserToEnqueuedScriptConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpEnqueuedScript>;
};

/** Connection between the User type and the EnqueuedStylesheet type */
export type WpUserToEnqueuedStylesheetConnection = {
  __typename?: 'WPUserToEnqueuedStylesheetConnection';
  /** Edges for the UserToEnqueuedStylesheetConnection connection */
  edges?: Maybe<Array<Maybe<WpUserToEnqueuedStylesheetConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpEnqueuedStylesheet>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpUserToEnqueuedStylesheetConnectionEdge = {
  __typename?: 'WPUserToEnqueuedStylesheetConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpEnqueuedStylesheet>;
};

/** Connection between the User type and the mediaItem type */
export type WpUserToMediaItemConnection = {
  __typename?: 'WPUserToMediaItemConnection';
  /** Edges for the UserToMediaItemConnection connection */
  edges?: Maybe<Array<Maybe<WpUserToMediaItemConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpMediaItem>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpUserToMediaItemConnectionEdge = {
  __typename?: 'WPUserToMediaItemConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpMediaItem>;
};

/** Arguments for filtering the UserToMediaItemConnection connection */
export type WpUserToMediaItemConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the User type and the page type */
export type WpUserToPageConnection = {
  __typename?: 'WPUserToPageConnection';
  /** Edges for the UserToPageConnection connection */
  edges?: Maybe<Array<Maybe<WpUserToPageConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpPage>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpUserToPageConnectionEdge = {
  __typename?: 'WPUserToPageConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpPage>;
};

/** Arguments for filtering the UserToPageConnection connection */
export type WpUserToPageConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the User type and the post type */
export type WpUserToPostConnection = {
  __typename?: 'WPUserToPostConnection';
  /** Edges for the UserToPostConnection connection */
  edges?: Maybe<Array<Maybe<WpUserToPostConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpPost>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpUserToPostConnectionEdge = {
  __typename?: 'WPUserToPostConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpPost>;
};

/** Arguments for filtering the UserToPostConnection connection */
export type WpUserToPostConnectionWhereArgs = {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars['Int']>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars['String']>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars['Int']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars['String']>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<WpDateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars['Boolean']>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars['Int']>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<WpMimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars['String']>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<WpPostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars['ID']>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars['String']>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars['String']>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<WpPostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<WpPostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars['String']>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars['String']>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars['String']>;
};

/** Connection between the User type and the UserRole type */
export type WpUserToUserRoleConnection = {
  __typename?: 'WPUserToUserRoleConnection';
  /** Edges for the UserToUserRoleConnection connection */
  edges?: Maybe<Array<Maybe<WpUserToUserRoleConnectionEdge>>>;
  /** The nodes of the connection, without the edges */
  nodes?: Maybe<Array<Maybe<WpUserRole>>>;
  /** Information about pagination in a connection. */
  pageInfo?: Maybe<WpwpPageInfo>;
};

/** An edge in a connection */
export type WpUserToUserRoleConnectionEdge = {
  __typename?: 'WPUserToUserRoleConnectionEdge';
  /** A cursor for use in pagination */
  cursor?: Maybe<Scalars['String']>;
  /** The item at the end of the edge */
  node?: Maybe<WpUserRole>;
};

/** Field to order the connection by */
export enum WpUsersConnectionOrderbyEnum {
  /** Order by display name */
  DisplayName = 'DISPLAY_NAME',
  /** Order by email address */
  Email = 'EMAIL',
  /** Order by login */
  Login = 'LOGIN',
  /** Preserve the login order given in the LOGIN_IN array */
  LoginIn = 'LOGIN_IN',
  /** Order by nice name */
  NiceName = 'NICE_NAME',
  /** Preserve the nice name order given in the NICE_NAME_IN array */
  NiceNameIn = 'NICE_NAME_IN',
  /** Order by registration date */
  Registered = 'REGISTERED',
  /** Order by URL */
  Url = 'URL'
}

/** Options for ordering the connection */
export type WpUsersConnectionOrderbyInput = {
  /** The field name used to sort the results. */
  field: WpUsersConnectionOrderbyEnum;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<WpOrderEnum>;
};

/** Column used for searching for users. */
export enum WpUsersConnectionSearchColumnEnum {
  /** The user's email address. */
  Email = 'EMAIL',
  /** The globally unique ID. */
  Id = 'ID',
  /** The username the User uses to login with. */
  Login = 'LOGIN',
  /** A URL-friendly name for the user. The default is the user's username. */
  Nicename = 'NICENAME',
  /** The URL of the user\s website. */
  Url = 'URL'
}

/** Information about pagination in a connection. */
export type WpwpPageInfo = {
  __typename?: 'WPWPPageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

/** The writing setting type */
export type WpWritingSettings = {
  __typename?: 'WPWritingSettings';
  /** Default post category. */
  defaultCategory?: Maybe<Scalars['Int']>;
  /** Default post format. */
  defaultPostFormat?: Maybe<Scalars['String']>;
  /** Convert emoticons like :-) and :-P to graphics on display. */
  useSmilies?: Maybe<Scalars['Boolean']>;
};

/** Deprecated. It should not be used on the storefront. Contains information about a website. */
export type Website = {
  __typename?: 'Website';
  /**
   * A code assigned to the website to identify it.
   * @deprecated The field should not be used on the storefront.
   */
  code?: Maybe<Scalars['String']>;
  /**
   * The default group ID of the website.
   * @deprecated The field should not be used on the storefront.
   */
  default_group_id?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the website.
   * @deprecated The field should not be used on the storefront.
   */
  id?: Maybe<Scalars['Int']>;
  /**
   * Indicates whether this is the default website.
   * @deprecated The field should not be used on the storefront.
   */
  is_default?: Maybe<Scalars['Boolean']>;
  /**
   * The website name. Websites use this name to identify it easier.
   * @deprecated The field should not be used on the storefront.
   */
  name?: Maybe<Scalars['String']>;
  /**
   * The attribute to use for sorting websites.
   * @deprecated The field should not be used on the storefront.
   */
  sort_order?: Maybe<Scalars['Int']>;
};

/** An error encountered while performing operations with WishList. */
export type WishListUserInputError = {
  __typename?: 'WishListUserInputError';
  /** A wish list-specific error code. */
  code: WishListUserInputErrorType;
  /** A localized error message. */
  message: Scalars['String'];
};

/** A list of possible error types. */
export enum WishListUserInputErrorType {
  /** @deprecated  */
  ProductNotFound = 'PRODUCT_NOT_FOUND',
  /** @deprecated  */
  Undefined = 'UNDEFINED'
}

/** Contains a customer wish list. */
export type Wishlist = {
  __typename?: 'Wishlist';
  /** The unique ID for a `Wishlist` object. */
  id?: Maybe<Scalars['ID']>;
  /** @deprecated Use the `items_v2` field instead. */
  items?: Maybe<Array<Maybe<WishlistItem>>>;
  /** The number of items in the wish list. */
  items_count?: Maybe<Scalars['Int']>;
  /** An array of items in the customer's wish list. */
  items_v2?: Maybe<WishlistItems>;
  /** An encrypted code that Magento uses to link to the wish list. */
  sharing_code?: Maybe<Scalars['String']>;
  /** The time of the last modification to the wish list. */
  updated_at?: Maybe<Scalars['String']>;
};


/** Contains a customer wish list. */
export type WishlistItems_V2Args = {
  currentPage?: InputMaybe<Scalars['Int']>;
  pageSize?: InputMaybe<Scalars['Int']>;
};

/** Contains details about errors encountered when a customer added wish list items to the cart. */
export type WishlistCartUserInputError = {
  __typename?: 'WishlistCartUserInputError';
  /** An error code that describes the error encountered. */
  code: WishlistCartUserInputErrorType;
  /** A localized error message. */
  message: Scalars['String'];
  /** The unique ID of the `Wishlist` object containing an error. */
  wishlistId: Scalars['ID'];
  /** The unique ID of the wish list item containing an error. */
  wishlistItemId: Scalars['ID'];
};

/** A list of possible error types. */
export enum WishlistCartUserInputErrorType {
  /** @deprecated  */
  InsufficientStock = 'INSUFFICIENT_STOCK',
  /** @deprecated  */
  NotSalable = 'NOT_SALABLE',
  /** @deprecated  */
  ProductNotFound = 'PRODUCT_NOT_FOUND',
  /** @deprecated  */
  Undefined = 'UNDEFINED'
}

/** Contains details about a wish list item. */
export type WishlistItem = {
  __typename?: 'WishlistItem';
  /** The time when the customer added the item to the wish list. */
  added_at?: Maybe<Scalars['String']>;
  /** The customer's comment about this item. */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItem` object. */
  id?: Maybe<Scalars['Int']>;
  /** Details about the wish list item. */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item */
  qty?: Maybe<Scalars['Float']>;
};

/** Defines the items to add to a wish list. */
export type WishlistItemInput = {
  /** An array of options that the customer entered. */
  entered_options?: InputMaybe<Array<InputMaybe<EnteredOptionInput>>>;
  /** For complex product types, the SKU of the parent product. */
  parent_sku?: InputMaybe<Scalars['String']>;
  /** The amount or number of items to add. */
  quantity: Scalars['Float'];
  /** An array of strings corresponding to options the customer selected. */
  selected_options?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** The SKU of the product to add. For complex product types, specify the child product SKU. */
  sku: Scalars['String'];
};

/** The interface for wish list items. */
export type WishlistItemInterface = {
  /** The date and time the item was added to the wish list. */
  added_at: Scalars['String'];
  /** Custom options selected for the wish list item. */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item. */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object. */
  id: Scalars['ID'];
  /** Product details of the wish list item. */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item. */
  quantity: Scalars['Float'];
};

/** Defines updates to items in a wish list. */
export type WishlistItemUpdateInput = {
  /** Customer-entered comments about the item. */
  description?: InputMaybe<Scalars['String']>;
  /** An array of options that the customer entered. */
  entered_options?: InputMaybe<Array<InputMaybe<EnteredOptionInput>>>;
  /** The new amount or number of this item. */
  quantity?: InputMaybe<Scalars['Float']>;
  /** An array of strings corresponding to options the customer selected. */
  selected_options?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** The unique ID for a `WishlistItemInterface` object. */
  wishlist_item_id: Scalars['ID'];
};

/** Contains an array of items in a wish list. */
export type WishlistItems = {
  __typename?: 'WishlistItems';
  /** A list of items in the wish list. */
  items: Array<Maybe<WishlistItemInterface>>;
  /** Contains pagination metadata. */
  page_info?: Maybe<SearchResultPageInfo>;
};

/** Deprecated: Use the `Wishlist` type instead. */
export type WishlistOutput = {
  __typename?: 'WishlistOutput';
  /**
   * An array of items in the customer's wish list
   * @deprecated Use the `Wishlist.items` field instead.
   */
  items?: Maybe<Array<Maybe<WishlistItem>>>;
  /**
   * The number of items in the wish list.
   * @deprecated Use the `Wishlist.items_count` field instead.
   */
  items_count?: Maybe<Scalars['Int']>;
  /**
   * When multiple wish lists are enabled, the name the customer assigns to the wishlist.
   * @deprecated This field is related to Commerce functionality and is always `null` in Open Source.
   */
  name?: Maybe<Scalars['String']>;
  /**
   * An encrypted code that links to the wish list.
   * @deprecated Use the `Wishlist.sharing_code` field instead.
   */
  sharing_code?: Maybe<Scalars['String']>;
  /**
   * The time of the last modification to the wish list.
   * @deprecated Use the `Wishlist.updated_at` field instead.
   */
  updated_at?: Maybe<Scalars['String']>;
};

/** Assigns a specific `cart_id` to the empty cart. */
export type CreateEmptyCartInput = {
  /** The ID to assign to the cart. */
  cart_id?: InputMaybe<Scalars['String']>;
};

/** One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string. */
export type __EnumValue = {
  __typename?: '__EnumValue';
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  isDeprecated: Scalars['Boolean'];
  deprecationReason?: Maybe<Scalars['String']>;
};

/** Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type. */
export type __Field = {
  __typename?: '__Field';
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  args: Array<__InputValue>;
  type: __Type;
  isDeprecated: Scalars['Boolean'];
  deprecationReason?: Maybe<Scalars['String']>;
};


/** Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type. */
export type __FieldArgsArgs = {
  includeDeprecated?: InputMaybe<Scalars['Boolean']>;
};

/** Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value. */
export type __InputValue = {
  __typename?: '__InputValue';
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  type: __Type;
  /** A GraphQL-formatted string representing the default value for this input value. */
  defaultValue?: Maybe<Scalars['String']>;
  isDeprecated: Scalars['Boolean'];
  deprecationReason?: Maybe<Scalars['String']>;
};

/**
 * The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.
 *
 * Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
 */
export type __Type = {
  __typename?: '__Type';
  kind: __TypeKind;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  specifiedByURL?: Maybe<Scalars['String']>;
  fields?: Maybe<Array<__Field>>;
  interfaces?: Maybe<Array<__Type>>;
  possibleTypes?: Maybe<Array<__Type>>;
  enumValues?: Maybe<Array<__EnumValue>>;
  inputFields?: Maybe<Array<__InputValue>>;
  ofType?: Maybe<__Type>;
};


/**
 * The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.
 *
 * Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
 */
export type __TypeFieldsArgs = {
  includeDeprecated?: InputMaybe<Scalars['Boolean']>;
};


/**
 * The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.
 *
 * Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
 */
export type __TypeEnumValuesArgs = {
  includeDeprecated?: InputMaybe<Scalars['Boolean']>;
};


/**
 * The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.
 *
 * Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
 */
export type __TypeInputFieldsArgs = {
  includeDeprecated?: InputMaybe<Scalars['Boolean']>;
};

/** An enum describing what kind of type a given `__Type` is. */
export enum __TypeKind {
  /** Indicates this type is a scalar. */
  Scalar = 'SCALAR',
  /** Indicates this type is an object. `fields` and `interfaces` are valid fields. */
  Object = 'OBJECT',
  /** Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields. */
  Interface = 'INTERFACE',
  /** Indicates this type is a union. `possibleTypes` is a valid field. */
  Union = 'UNION',
  /** Indicates this type is an enum. `enumValues` is a valid field. */
  Enum = 'ENUM',
  /** Indicates this type is an input object. `inputFields` is a valid field. */
  InputObject = 'INPUT_OBJECT',
  /** Indicates this type is a list. `ofType` is a valid field. */
  List = 'LIST',
  /** Indicates this type is a non-null. `ofType` is a valid field. */
  NonNull = 'NON_NULL'
}

export type GetCategoriesShortQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCategoriesShortQuery = { __typename?: 'Query', categories?: { __typename?: 'CategoryResult', items?: Array<{ __typename?: 'CategoryTree', children?: Array<{ __typename?: 'CategoryTree', name?: string | null, uid: string, url_key?: string | null } | null> | null } | null> | null } | null };

export type GetCategoryByUrlKeysQueryVariables = Exact<{
  urlKeys: Array<InputMaybe<Scalars['String']>> | InputMaybe<Scalars['String']>;
}>;


export type GetCategoryByUrlKeysQuery = { __typename?: 'Query', categories?: { __typename?: 'CategoryResult', items?: Array<{ __typename?: 'CategoryTree', name?: string | null, uid: string, url_key?: string | null, children?: Array<{ __typename?: 'CategoryTree', name?: string | null, uid: string, url_key?: string | null } | null> | null } | null> | null } | null };

export type GetCategoriesQueryVariables = Exact<{
  id: Scalars['String'];
  pageSize: Scalars['Int'];
  currentPage: Scalars['Int'];
  filters: ProductAttributeFilterInput;
  sort?: InputMaybe<ProductAttributeSortInput>;
}>;


export type GetCategoriesQuery = { __typename?: 'Query', categories?: { __typename: 'CategoryResult', items?: Array<{ __typename: 'CategoryTree', uid: string, meta_title?: string | null, meta_keywords?: string | null, meta_description?: string | null } | null> | null } | null, products?: { __typename: 'Products', total_count?: number | null, items?: Array<{ __typename: 'BundleProduct', id?: number | null, uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, rating_summary: number, url_key?: string | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, regular_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null }, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', id?: number | null, uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, rating_summary: number, url_key?: string | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, regular_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null }, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', id?: number | null, uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, rating_summary: number, url_key?: string | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, regular_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null }, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', id?: number | null, uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, rating_summary: number, url_key?: string | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, regular_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null }, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', id?: number | null, uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, rating_summary: number, url_key?: string | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, regular_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null }, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', id?: number | null, uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, rating_summary: number, url_key?: string | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, regular_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null }, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null> | null, page_info?: { __typename: 'SearchResultPageInfo', total_pages?: number | null } | null } | null };

export type CategoryFragmentFragment = { __typename: 'CategoryTree', uid: string, meta_title?: string | null, meta_keywords?: string | null, meta_description?: string | null };

export type ProductsFragmentFragment = { __typename: 'Products', total_count?: number | null, items?: Array<{ __typename: 'BundleProduct', id?: number | null, uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, rating_summary: number, url_key?: string | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, regular_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null }, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', id?: number | null, uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, rating_summary: number, url_key?: string | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, regular_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null }, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', id?: number | null, uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, rating_summary: number, url_key?: string | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, regular_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null }, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', id?: number | null, uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, rating_summary: number, url_key?: string | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, regular_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null }, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', id?: number | null, uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, rating_summary: number, url_key?: string | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, regular_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null }, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', id?: number | null, uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, rating_summary: number, url_key?: string | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, regular_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null }, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null> | null, page_info?: { __typename: 'SearchResultPageInfo', total_pages?: number | null } | null };

export type GetProductFiltersByCategoryQueryVariables = Exact<{
  categoryIdFilter: FilterEqualTypeInput;
}>;


export type GetProductFiltersByCategoryQuery = { __typename?: 'Query', products?: { __typename: 'Products', aggregations?: Array<{ __typename: 'Aggregation', label?: string | null, count?: number | null, attribute_code: string, position?: number | null, options?: Array<{ __typename: 'AggregationOption', label?: string | null, value: string } | null> | null } | null> | null } | null };

export type GetCategoryAvailableSortMethodsQueryVariables = Exact<{
  categoryIdFilter: FilterEqualTypeInput;
}>;


export type GetCategoryAvailableSortMethodsQuery = { __typename?: 'Query', products?: { __typename: 'Products', sort_fields?: { __typename: 'SortFields', options?: Array<{ __typename: 'SortField', label?: string | null, value?: string | null } | null> | null } | null } | null };

export type GetFilterInputsForCategoryQueryVariables = Exact<{ [key: string]: never; }>;


export type GetFilterInputsForCategoryQuery = { __typename?: 'Query', __type?: { __typename: '__Type', inputFields?: Array<{ __typename: '__InputValue', name: string, type: { __typename: '__Type', name?: string | null } }> | null } | null };

export type GetFilterInputsForModalQueryVariables = Exact<{ [key: string]: never; }>;


export type GetFilterInputsForModalQuery = { __typename?: 'Query', __type?: { __typename: '__Type', inputFields?: Array<{ __typename: '__InputValue', name: string, type: { __typename: '__Type', name?: string | null } }> | null } | null };

export type SetBillingAddressMutationVariables = Exact<{
  cartId: Scalars['String'];
  firstname: Scalars['String'];
  lastname: Scalars['String'];
  street: Array<InputMaybe<Scalars['String']>> | InputMaybe<Scalars['String']>;
  city: Scalars['String'];
  regionCode: Scalars['String'];
  postcode: Scalars['String'];
  countryCode: Scalars['String'];
  telephone: Scalars['String'];
}>;


export type SetBillingAddressMutation = { __typename?: 'Mutation', setBillingAddressOnCart?: { __typename: 'SetBillingAddressOnCartOutput', cart: { __typename: 'Cart', id: string, billing_address?: { __typename: 'BillingCartAddress', firstname: string, lastname: string, street: Array<string | null>, city: string, postcode?: string | null, telephone?: string | null, country: { __typename: 'CartAddressCountry', code: string }, region?: { __typename: 'CartAddressRegion', code?: string | null } | null } | null, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number } | { __typename: 'DownloadableCartItem', uid: string, quantity: number } | { __typename: 'SimpleCartItem', uid: string, quantity: number } | { __typename: 'VirtualCartItem', uid: string, quantity: number } | null> | null, prices?: { __typename: 'CartPrices', subtotal_excluding_tax?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null, subtotal_including_tax?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null, applied_taxes?: Array<{ __typename: 'CartTaxItem', amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null, discounts?: Array<{ __typename: 'Discount', label: string, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null, grand_total?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null } | null, available_payment_methods?: Array<{ __typename: 'AvailablePaymentMethod', code: string, title: string } | null> | null, shipping_addresses: Array<{ __typename: 'ShippingCartAddress', street: Array<string | null>, selected_shipping_method?: { __typename: 'SelectedShippingMethod', amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null } | null> } } | null };

export type PriceSummaryFragmentFragment = { __typename: 'Cart', id: string, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number } | { __typename: 'DownloadableCartItem', uid: string, quantity: number } | { __typename: 'SimpleCartItem', uid: string, quantity: number } | { __typename: 'VirtualCartItem', uid: string, quantity: number } | null> | null, prices?: { __typename: 'CartPrices', subtotal_excluding_tax?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null, subtotal_including_tax?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null, applied_taxes?: Array<{ __typename: 'CartTaxItem', amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null, discounts?: Array<{ __typename: 'Discount', label: string, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null, grand_total?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null } | null, shipping_addresses: Array<{ __typename: 'ShippingCartAddress', street: Array<string | null>, selected_shipping_method?: { __typename: 'SelectedShippingMethod', amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null } | null> };

export type DiscountSummaryFragmentFragment = { __typename: 'CartPrices', discounts?: Array<{ __typename: 'Discount', label: string, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null };

export type GrandTotalFragmentFragment = { __typename: 'CartPrices', grand_total?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null };

export type ShippingSummaryFragmentFragment = { __typename: 'Cart', id: string, shipping_addresses: Array<{ __typename: 'ShippingCartAddress', street: Array<string | null>, selected_shipping_method?: { __typename: 'SelectedShippingMethod', amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null } | null> };

export type TaxSummaryFragmentFragment = { __typename: 'CartPrices', applied_taxes?: Array<{ __typename: 'CartTaxItem', amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null };

export type AvailablePaymentMethodsFragmentFragment = { __typename: 'Cart', id: string, available_payment_methods?: Array<{ __typename: 'AvailablePaymentMethod', code: string, title: string } | null> | null };

export type GetCustomerAddressesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCustomerAddressesQuery = { __typename?: 'Query', customer?: { __typename: 'Customer', addresses?: Array<{ __typename: 'CustomerAddress', id?: number | null, city?: string | null, country_code?: CountryCodeEnum | null, default_shipping?: boolean | null, firstname?: string | null, lastname?: string | null, postcode?: string | null, street?: Array<string | null> | null, telephone?: string | null, region?: { __typename: 'CustomerAddressRegion', region?: string | null, region_code?: string | null, region_id?: number | null } | null } | null> | null } | null };

export type CustomerAddressFragmentFragment = { __typename: 'CustomerAddress', id?: number | null, city?: string | null, country_code?: CountryCodeEnum | null, default_shipping?: boolean | null, firstname?: string | null, lastname?: string | null, postcode?: string | null, street?: Array<string | null> | null, telephone?: string | null, region?: { __typename: 'CustomerAddressRegion', region?: string | null, region_code?: string | null, region_id?: number | null } | null };

export type CreateCustomerAddressMutationVariables = Exact<{
  address: CustomerAddressInput;
}>;


export type CreateCustomerAddressMutation = { __typename?: 'Mutation', createCustomerAddress?: { __typename: 'CustomerAddress', id?: number | null, city?: string | null, country_code?: CountryCodeEnum | null, default_shipping?: boolean | null, firstname?: string | null, lastname?: string | null, postcode?: string | null, street?: Array<string | null> | null, telephone?: string | null, region?: { __typename: 'CustomerAddressRegion', region?: string | null, region_code?: string | null, region_id?: number | null } | null } | null };

export type UpdateCustomerAddressMutationVariables = Exact<{
  addressId: Scalars['Int'];
  address: CustomerAddressInput;
}>;


export type UpdateCustomerAddressMutation = { __typename?: 'Mutation', updateCustomerAddress?: { __typename: 'CustomerAddress', id?: number | null } | null };

export type GetCustomerCartAddressQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCustomerCartAddressQuery = { __typename?: 'Query', customerCart: { __typename: 'Cart', id: string, email?: string | null, shipping_addresses: Array<{ __typename: 'ShippingCartAddress', city: string, firstname: string, lastname: string, postcode?: string | null, street: Array<string | null>, telephone?: string | null, country: { __typename: 'CartAddressCountry', code: string, label: string }, region?: { __typename: 'CartAddressRegion', code?: string | null, label?: string | null, region_id?: number | null } | null } | null> } };

export type ShippingInformationFragmentFragment = { __typename: 'Cart', id: string, email?: string | null, shipping_addresses: Array<{ __typename: 'ShippingCartAddress', city: string, firstname: string, lastname: string, postcode?: string | null, street: Array<string | null>, telephone?: string | null, country: { __typename: 'CartAddressCountry', code: string, label: string }, region?: { __typename: 'CartAddressRegion', code?: string | null, label?: string | null, region_id?: number | null } | null } | null> };

export type SetCustomerAddressOnCartMutationVariables = Exact<{
  cartId: Scalars['String'];
  addressId: Scalars['Int'];
}>;


export type SetCustomerAddressOnCartMutation = { __typename?: 'Mutation', setShippingAddressesOnCart?: { __typename: 'SetShippingAddressesOnCartOutput', cart: { __typename: 'Cart', id: string, email?: string | null, shipping_addresses: Array<{ __typename: 'ShippingCartAddress', city: string, firstname: string, lastname: string, postcode?: string | null, street: Array<string | null>, telephone?: string | null, country: { __typename: 'CartAddressCountry', code: string, label: string }, region?: { __typename: 'CartAddressRegion', code?: string | null, label?: string | null, region_id?: number | null } | null, available_shipping_methods?: Array<{ __typename: 'AvailableShippingMethod', available: boolean, carrier_code: string, carrier_title: string, method_code?: string | null, method_title?: string | null, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null, selected_shipping_method?: { __typename: 'SelectedShippingMethod', carrier_code: string, method_code: string, method_title: string, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null } | null>, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number } | { __typename: 'DownloadableCartItem', uid: string, quantity: number } | { __typename: 'SimpleCartItem', uid: string, quantity: number } | { __typename: 'VirtualCartItem', uid: string, quantity: number } | null> | null, prices?: { __typename: 'CartPrices', subtotal_excluding_tax?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null, subtotal_including_tax?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null, applied_taxes?: Array<{ __typename: 'CartTaxItem', amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null, discounts?: Array<{ __typename: 'Discount', label: string, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null, grand_total?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null } | null, available_payment_methods?: Array<{ __typename: 'AvailablePaymentMethod', code: string, title: string } | null> | null } } | null };

export type ShippingMethodsCheckoutFragmentFragment = { __typename: 'Cart', id: string, shipping_addresses: Array<{ __typename: 'ShippingCartAddress', postcode?: string | null, street: Array<string | null>, country: { __typename: 'CartAddressCountry', code: string }, region?: { __typename: 'CartAddressRegion', code?: string | null } | null, available_shipping_methods?: Array<{ __typename: 'AvailableShippingMethod', available: boolean, carrier_code: string, carrier_title: string, method_code?: string | null, method_title?: string | null, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null, selected_shipping_method?: { __typename: 'SelectedShippingMethod', carrier_code: string, method_code: string, method_title: string, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null } | null> };

export type AvailableShippingMethodsCheckoutFragmentFragment = { __typename: 'Cart', id: string, shipping_addresses: Array<{ __typename: 'ShippingCartAddress', street: Array<string | null>, available_shipping_methods?: Array<{ __typename: 'AvailableShippingMethod', available: boolean, carrier_code: string, carrier_title: string, method_code?: string | null, method_title?: string | null, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null } | null> };

export type SelectedShippingMethodCheckoutFragmentFragment = { __typename: 'Cart', id: string, shipping_addresses: Array<{ __typename: 'ShippingCartAddress', street: Array<string | null>, selected_shipping_method?: { __typename: 'SelectedShippingMethod', carrier_code: string, method_code: string, method_title: string, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null } | null> };

export type GetItemCountQueryVariables = Exact<{
  cartId: Scalars['String'];
}>;


export type GetItemCountQuery = { __typename?: 'Query', cart?: { __typename: 'Cart', id: string, total_quantity: number } | null };

export type CartTriggerFragmentFragment = { __typename: 'Cart', id: string, total_quantity: number };

export type CreateCartMutationVariables = Exact<{ [key: string]: never; }>;


export type CreateCartMutation = { __typename?: 'Mutation', cartId?: string | null };

export type MiniCartQueryQueryVariables = Exact<{
  cartId: Scalars['String'];
}>;


export type MiniCartQueryQuery = { __typename?: 'Query', cart?: { __typename: 'Cart', id: string, total_quantity: number, prices?: { __typename: 'CartPrices', subtotal_excluding_tax?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null, subtotal_including_tax?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null } | null, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number, configurable_options: Array<{ __typename: 'SelectedConfigurableOption', configurable_product_option_uid: string, option_label: string, configurable_product_option_value_uid: string, value_label: string } | null>, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | { __typename: 'DownloadableCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | { __typename: 'SimpleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | { __typename: 'VirtualCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | null> | null } | null };

export type MiniCartFragmentFragment = { __typename: 'Cart', id: string, total_quantity: number, prices?: { __typename: 'CartPrices', subtotal_excluding_tax?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null, subtotal_including_tax?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null } | null, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number, configurable_options: Array<{ __typename: 'SelectedConfigurableOption', configurable_product_option_uid: string, option_label: string, configurable_product_option_value_uid: string, value_label: string } | null>, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | { __typename: 'DownloadableCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | { __typename: 'SimpleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | { __typename: 'VirtualCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | null> | null };

export type ProductListFragmentFragment = { __typename: 'Cart', id: string, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number, configurable_options: Array<{ __typename: 'SelectedConfigurableOption', configurable_product_option_uid: string, option_label: string, configurable_product_option_value_uid: string, value_label: string } | null>, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | { __typename: 'DownloadableCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | { __typename: 'SimpleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | { __typename: 'VirtualCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | null> | null };

export type GetItemsInCartQueryVariables = Exact<{
  cartId: Scalars['String'];
}>;


export type GetItemsInCartQuery = { __typename?: 'Query', cart?: { __typename: 'Cart', id: string, total_quantity: number, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number, configurable_options: Array<{ __typename: 'SelectedConfigurableOption', configurable_product_option_uid: string, option_label: string, configurable_product_option_value_uid: string, value_label: string } | null>, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'DownloadableCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'SimpleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'VirtualCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | null> | null } | null };

export type ItemsReviewFragmentFragment = { __typename: 'Cart', id: string, total_quantity: number, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number, configurable_options: Array<{ __typename: 'SelectedConfigurableOption', configurable_product_option_uid: string, option_label: string, configurable_product_option_value_uid: string, value_label: string } | null>, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'DownloadableCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'SimpleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'VirtualCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | null> | null };

export type AddProductToCartMutationVariables = Exact<{
  cartId: Scalars['String'];
  product: CartItemInput;
}>;


export type AddProductToCartMutation = { __typename?: 'Mutation', addProductsToCart?: { __typename: 'AddProductsToCartOutput', cart: { __typename: 'Cart', id: string, total_quantity: number, prices?: { __typename: 'CartPrices', subtotal_excluding_tax?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null, subtotal_including_tax?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null } | null, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number, configurable_options: Array<{ __typename: 'SelectedConfigurableOption', configurable_product_option_uid: string, option_label: string, configurable_product_option_value_uid: string, value_label: string } | null>, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | { __typename: 'DownloadableCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | { __typename: 'SimpleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | { __typename: 'VirtualCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_item_discount?: { __typename: 'Money', value?: number | null } | null } | null } | null> | null } } | null };

export type UpdateItemQuantityMutationVariables = Exact<{
  cartId: Scalars['String'];
  itemId: Scalars['ID'];
  quantity: Scalars['Float'];
}>;


export type UpdateItemQuantityMutation = { __typename?: 'Mutation', updateCartItems?: { __typename: 'UpdateCartItemsOutput', cart: { __typename: 'Cart', id: string, total_quantity: number, shipping_addresses: Array<{ __typename: 'ShippingCartAddress', street: Array<string | null>, available_shipping_methods?: Array<{ __typename: 'AvailableShippingMethod', available: boolean, carrier_code: string, carrier_title: string, method_code?: string | null, method_title?: string | null, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null } | null>, applied_coupons?: Array<{ __typename: 'AppliedCoupon', code: string } | null> | null, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number, configurable_options: Array<{ __typename: 'SelectedConfigurableOption', id: number, configurable_product_option_uid: string, option_label: string, configurable_product_option_value_uid: string, value_label: string } | null>, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | { __typename: 'DownloadableCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | { __typename: 'SimpleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | { __typename: 'VirtualCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | null> | null } } | null };

export type CartPageFragmentFragment = { __typename: 'Cart', id: string, total_quantity: number, applied_coupons?: Array<{ __typename: 'AppliedCoupon', code: string } | null> | null, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number, configurable_options: Array<{ __typename: 'SelectedConfigurableOption', id: number, configurable_product_option_uid: string, option_label: string, configurable_product_option_value_uid: string, value_label: string } | null>, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | { __typename: 'DownloadableCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | { __typename: 'SimpleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | { __typename: 'VirtualCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | null> | null };

export type AppliedCouponsFragmentFragment = { __typename: 'Cart', id: string, applied_coupons?: Array<{ __typename: 'AppliedCoupon', code: string } | null> | null };

export type ProductListingFragmentFragment = { __typename: 'Cart', id: string, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number, configurable_options: Array<{ __typename: 'SelectedConfigurableOption', id: number, configurable_product_option_uid: string, option_label: string, configurable_product_option_value_uid: string, value_label: string } | null>, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | { __typename: 'DownloadableCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | { __typename: 'SimpleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | { __typename: 'VirtualCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | null> | null };

export type AvailableShippingMethodsCartFragmentFragment = { __typename: 'Cart', id: string, shipping_addresses: Array<{ __typename: 'ShippingCartAddress', street: Array<string | null>, available_shipping_methods?: Array<{ __typename: 'AvailableShippingMethod', available: boolean, carrier_code: string, carrier_title: string, method_code?: string | null, method_title?: string | null, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null } | null> };

export type CheckUserIsAuthedQueryVariables = Exact<{
  cartId: Scalars['String'];
}>;


export type CheckUserIsAuthedQuery = { __typename?: 'Query', cart?: { __typename: 'Cart', id: string } | null };

export type CreateAccountAfterCheckoutMutationVariables = Exact<{
  email: Scalars['String'];
  firstname: Scalars['String'];
  lastname: Scalars['String'];
  password: Scalars['String'];
  is_subscribed: Scalars['Boolean'];
}>;


export type CreateAccountAfterCheckoutMutation = { __typename?: 'Mutation', createCustomer?: { __typename: 'CustomerOutput', customer: { __typename: 'Customer', email?: string | null } } | null };

export type SignInAfterCheckoutMutationVariables = Exact<{
  email: Scalars['String'];
  password: Scalars['String'];
}>;


export type SignInAfterCheckoutMutation = { __typename?: 'Mutation', generateCustomerToken?: { __typename: 'CustomerToken', token?: string | null } | null };

export type AccountChipQueryQueryVariables = Exact<{ [key: string]: never; }>;


export type AccountChipQueryQuery = { __typename?: 'Query', customer?: { __typename: 'Customer', firstname?: string | null } | null };

export type GetCustomerForCheckoutQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCustomerForCheckoutQuery = { __typename?: 'Query', customer?: { __typename: 'Customer', default_shipping?: string | null, firstname?: string | null } | null };

export type CreateCartAfterCheckoutMutationVariables = Exact<{ [key: string]: never; }>;


export type CreateCartAfterCheckoutMutation = { __typename?: 'Mutation', cartId?: string | null };

export type GetCartDetailsAfterCheckoutQueryVariables = Exact<{
  cartId: Scalars['String'];
}>;


export type GetCartDetailsAfterCheckoutQuery = { __typename?: 'Query', cart?: { __typename: 'Cart', id: string, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', value?: number | null } } | null, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number, configurable_options: Array<{ __typename: 'SelectedConfigurableOption', configurable_product_option_uid: string, option_label: string, configurable_product_option_value_uid: string, value_label: string } | null>, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', value?: number | null } } | null, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } } | { __typename: 'DownloadableCartItem', uid: string, quantity: number, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', value?: number | null } } | null, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } } | { __typename: 'SimpleCartItem', uid: string, quantity: number, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', value?: number | null } } | null, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } } | { __typename: 'VirtualCartItem', uid: string, quantity: number, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', value?: number | null } } | null, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null } } | null> | null, prices?: { __typename: 'CartPrices', grand_total?: { __typename: 'Money', value?: number | null, currency?: CurrencyEnum | null } | null } | null } | null };

export type GetCustomerAfterCheckoutQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCustomerAfterCheckoutQuery = { __typename?: 'Query', customer?: { __typename: 'Customer', email?: string | null, firstname?: string | null, lastname?: string | null, is_subscribed?: boolean | null } | null };

export type SetGuestShippingMutationVariables = Exact<{
  cartId: Scalars['String'];
  email: Scalars['String'];
  address: CartAddressInput;
}>;


export type SetGuestShippingMutation = { __typename?: 'Mutation', setGuestEmailOnCart?: { __typename: 'SetGuestEmailOnCartOutput', cart: { __typename: 'Cart', id: string } } | null, setShippingAddressesOnCart?: { __typename: 'SetShippingAddressesOnCartOutput', cart: { __typename: 'Cart', id: string, email?: string | null, shipping_addresses: Array<{ __typename: 'ShippingCartAddress', city: string, firstname: string, lastname: string, postcode?: string | null, street: Array<string | null>, telephone?: string | null, country: { __typename: 'CartAddressCountry', code: string, label: string }, region?: { __typename: 'CartAddressRegion', code?: string | null, label?: string | null, region_id?: number | null } | null, available_shipping_methods?: Array<{ __typename: 'AvailableShippingMethod', available: boolean, carrier_code: string, carrier_title: string, method_code?: string | null, method_title?: string | null, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null, selected_shipping_method?: { __typename: 'SelectedShippingMethod', carrier_code: string, method_code: string, method_title: string, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null } | null>, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number } | { __typename: 'DownloadableCartItem', uid: string, quantity: number } | { __typename: 'SimpleCartItem', uid: string, quantity: number } | { __typename: 'VirtualCartItem', uid: string, quantity: number } | null> | null, prices?: { __typename: 'CartPrices', subtotal_excluding_tax?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null, subtotal_including_tax?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null, applied_taxes?: Array<{ __typename: 'CartTaxItem', amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null, discounts?: Array<{ __typename: 'Discount', label: string, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null, grand_total?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null } | null, available_payment_methods?: Array<{ __typename: 'AvailablePaymentMethod', code: string, title: string } | null> | null } } | null };

export type GetOrderDetailsQueryVariables = Exact<{
  cartId: Scalars['String'];
}>;


export type GetOrderDetailsQuery = { __typename?: 'Query', cart?: { __typename: 'Cart', id: string, email?: string | null, total_quantity: number, shipping_addresses: Array<{ __typename: 'ShippingCartAddress', firstname: string, lastname: string, street: Array<string | null>, city: string, postcode?: string | null, region?: { __typename: 'CartAddressRegion', label?: string | null } | null, country: { __typename: 'CartAddressCountry', label: string }, selected_shipping_method?: { __typename: 'SelectedShippingMethod', carrier_title: string, method_title: string } | null } | null>, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number, configurable_options: Array<{ __typename: 'SelectedConfigurableOption', configurable_product_option_uid: string, option_label: string, configurable_product_option_value_uid: string, value_label: string } | null>, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'DownloadableCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'SimpleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'VirtualCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | null> | null } | null };

export type GetCheckoutDetailsQueryVariables = Exact<{
  cartId: Scalars['String'];
}>;


export type GetCheckoutDetailsQuery = { __typename?: 'Query', cart?: { __typename: 'Cart', id: string, total_quantity: number, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number, configurable_options: Array<{ __typename: 'SelectedConfigurableOption', configurable_product_option_uid: string, option_label: string, configurable_product_option_value_uid: string, value_label: string } | null>, product: { __typename: 'BundleProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'DownloadableCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'SimpleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'VirtualCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, stock_status?: ProductStockStatus | null, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | null> | null, available_payment_methods?: Array<{ __typename: 'AvailablePaymentMethod', code: string } | null> | null } | null };

export type CheckoutPageFragmentFragment = { __typename: 'Cart', id: string, total_quantity: number, items?: Array<{ __typename: 'BundleCartItem', uid: string, product: { __typename: 'BundleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'ConfigurableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'DownloadableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'GroupedProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'SimpleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'VirtualProduct', uid: string, stock_status?: ProductStockStatus | null } } | { __typename: 'ConfigurableCartItem', uid: string, product: { __typename: 'BundleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'ConfigurableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'DownloadableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'GroupedProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'SimpleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'VirtualProduct', uid: string, stock_status?: ProductStockStatus | null } } | { __typename: 'DownloadableCartItem', uid: string, product: { __typename: 'BundleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'ConfigurableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'DownloadableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'GroupedProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'SimpleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'VirtualProduct', uid: string, stock_status?: ProductStockStatus | null } } | { __typename: 'SimpleCartItem', uid: string, product: { __typename: 'BundleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'ConfigurableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'DownloadableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'GroupedProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'SimpleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'VirtualProduct', uid: string, stock_status?: ProductStockStatus | null } } | { __typename: 'VirtualCartItem', uid: string, product: { __typename: 'BundleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'ConfigurableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'DownloadableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'GroupedProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'SimpleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'VirtualProduct', uid: string, stock_status?: ProductStockStatus | null } } | null> | null, available_payment_methods?: Array<{ __typename: 'AvailablePaymentMethod', code: string } | null> | null };

export type OrderConfirmationPageFragmentFragment = { __typename: 'Cart', id: string, email?: string | null, total_quantity: number, shipping_addresses: Array<{ __typename: 'ShippingCartAddress', firstname: string, lastname: string, street: Array<string | null>, city: string, postcode?: string | null, region?: { __typename: 'CartAddressRegion', label?: string | null } | null, country: { __typename: 'CartAddressCountry', label: string }, selected_shipping_method?: { __typename: 'SelectedShippingMethod', carrier_title: string, method_title: string } | null } | null>, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number, configurable_options: Array<{ __typename: 'SelectedConfigurableOption', configurable_product_option_uid: string, option_label: string, configurable_product_option_value_uid: string, value_label: string } | null>, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'DownloadableCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'SimpleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | { __typename: 'VirtualCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } } | null> | null };

export type PlaceOrderMutationVariables = Exact<{
  cartId: Scalars['String'];
}>;


export type PlaceOrderMutation = { __typename?: 'Mutation', placeOrder?: { __typename: 'PlaceOrderOutput', order: { __typename: 'Order', order_number: string } } | null };

export type SetPaymentMethodOnCartMutationVariables = Exact<{
  cartId: Scalars['String'];
  paymentMethod: Scalars['String'];
}>;


export type SetPaymentMethodOnCartMutation = { __typename?: 'Mutation', setPaymentMethodOnCart?: { __typename: 'SetPaymentMethodOnCartOutput', cart: { __typename: 'Cart', id: string, selected_payment_method?: { __typename: 'SelectedPaymentMethod', code: string, title: string } | null } } | null };

export type GetPaymentInformationQueryVariables = Exact<{
  cartId: Scalars['String'];
}>;


export type GetPaymentInformationQuery = { __typename?: 'Query', cart?: { __typename: 'Cart', id: string, selected_payment_method?: { __typename: 'SelectedPaymentMethod', code: string } | null, shipping_addresses: Array<{ __typename: 'ShippingCartAddress', firstname: string, lastname: string, street: Array<string | null>, city: string, postcode?: string | null, telephone?: string | null, region?: { __typename: 'CartAddressRegion', code?: string | null } | null, country: { __typename: 'CartAddressCountry', code: string } } | null>, available_payment_methods?: Array<{ __typename: 'AvailablePaymentMethod', code: string, title: string } | null> | null } | null };

export type GetPriceSummaryQueryVariables = Exact<{
  cartId: Scalars['String'];
}>;


export type GetPriceSummaryQuery = { __typename?: 'Query', cart?: { __typename: 'Cart', id: string, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number } | { __typename: 'DownloadableCartItem', uid: string, quantity: number } | { __typename: 'SimpleCartItem', uid: string, quantity: number } | { __typename: 'VirtualCartItem', uid: string, quantity: number } | null> | null, prices?: { __typename: 'CartPrices', subtotal_excluding_tax?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null, subtotal_including_tax?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null, applied_taxes?: Array<{ __typename: 'CartTaxItem', amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null, discounts?: Array<{ __typename: 'Discount', label: string, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null, grand_total?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null } | null, shipping_addresses: Array<{ __typename: 'ShippingCartAddress', street: Array<string | null>, selected_shipping_method?: { __typename: 'SelectedShippingMethod', amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null } | null> } | null };

export type SetShippingMethodMutationVariables = Exact<{
  cartId: Scalars['String'];
  shippingMethod: ShippingMethodInput;
}>;


export type SetShippingMethodMutation = { __typename?: 'Mutation', setShippingMethodsOnCart?: { __typename: 'SetShippingMethodsOnCartOutput', cart: { __typename: 'Cart', id: string, email?: string | null, available_payment_methods?: Array<{ __typename: 'AvailablePaymentMethod', code: string, title: string } | null> | null, shipping_addresses: Array<{ __typename: 'ShippingCartAddress', street: Array<string | null>, city: string, firstname: string, lastname: string, postcode?: string | null, telephone?: string | null, selected_shipping_method?: { __typename: 'SelectedShippingMethod', carrier_code: string, method_code: string, method_title: string, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, country: { __typename: 'CartAddressCountry', code: string, label: string }, region?: { __typename: 'CartAddressRegion', code?: string | null, label?: string | null, region_id?: number | null } | null, available_shipping_methods?: Array<{ __typename: 'AvailableShippingMethod', available: boolean, carrier_code: string, carrier_title: string, method_code?: string | null, method_title?: string | null, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null } | null>, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number } | { __typename: 'DownloadableCartItem', uid: string, quantity: number } | { __typename: 'SimpleCartItem', uid: string, quantity: number } | { __typename: 'VirtualCartItem', uid: string, quantity: number } | null> | null, prices?: { __typename: 'CartPrices', subtotal_excluding_tax?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null, subtotal_including_tax?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null, applied_taxes?: Array<{ __typename: 'CartTaxItem', amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null, discounts?: Array<{ __typename: 'Discount', label: string, amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null, grand_total?: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } | null } | null } } | null };

export type GetBreadcrumbsQueryVariables = Exact<{
  category_id: Scalars['String'];
}>;


export type GetBreadcrumbsQuery = { __typename?: 'Query', categories?: { __typename: 'CategoryResult', items?: Array<{ __typename: 'CategoryTree', uid: string, name?: string | null, url_path?: string | null, breadcrumbs?: Array<{ __typename: 'Breadcrumb', category_uid: string, category_level?: number | null, category_name?: string | null, category_url_path?: string | null } | null> | null } | null> | null } | null };

export type GetStoreConfigForBreadcrumbsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetStoreConfigForBreadcrumbsQuery = { __typename?: 'Query', storeConfig?: { __typename: 'StoreConfig', store_code?: string | null, category_url_suffix?: string | null } | null };

export type GetCategoryDataQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GetCategoryDataQuery = { __typename?: 'Query', categories?: { __typename: 'CategoryResult', items?: Array<{ __typename: 'CategoryTree', uid: string, name?: string | null, description?: string | null, url_key?: string | null, url_path?: string | null } | null> | null } | null };

export type GetCmsPageQueryVariables = Exact<{
  identifier: Scalars['String'];
}>;


export type GetCmsPageQuery = { __typename?: 'Query', cmsPage?: { __typename: 'CmsPage', url_key?: string | null, content?: string | null, content_heading?: string | null, title?: string | null, page_layout?: string | null, meta_title?: string | null, meta_keywords?: string | null, meta_description?: string | null } | null };

export type GetCmsBlocksQueryVariables = Exact<{
  identifiers: Array<InputMaybe<Scalars['String']>> | InputMaybe<Scalars['String']>;
}>;


export type GetCmsBlocksQuery = { __typename?: 'Query', cmsBlocks?: { __typename: 'CmsBlocks', items?: Array<{ __typename: 'CmsBlock', content?: string | null, title?: string | null, identifier?: string | null } | null> | null } | null };

export type GetStoreConfigDataQueryVariables = Exact<{ [key: string]: never; }>;


export type GetStoreConfigDataQuery = { __typename?: 'Query', storeConfig?: { __typename: 'StoreConfig', store_code?: string | null, store_name?: string | null, store_group_name?: string | null } | null };

export type GetAvailableStoresDataQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAvailableStoresDataQuery = { __typename?: 'Query', availableStores?: Array<{ __typename: 'StoreConfig', category_url_suffix?: string | null, default_display_currency_code?: string | null, locale?: string | null, product_url_suffix?: string | null, secure_base_media_url?: string | null, store_code?: string | null, store_group_code?: string | null, store_group_name?: string | null, store_name?: string | null, store_sort_order?: number | null } | null> | null };

export type GetCurrencyDataQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCurrencyDataQuery = { __typename?: 'Query', currency?: { __typename: 'Currency', default_display_currency_code?: string | null, available_currency_codes?: Array<string | null> | null } | null };

export type GetStoreConfigForMegaMenuQueryVariables = Exact<{ [key: string]: never; }>;


export type GetStoreConfigForMegaMenuQuery = { __typename?: 'Query', storeConfig?: { __typename: 'StoreConfig', store_code?: string | null, category_url_suffix?: string | null } | null };

export type GetStoreConfigForCategoryTreeQueryVariables = Exact<{ [key: string]: never; }>;


export type GetStoreConfigForCategoryTreeQuery = { __typename?: 'Query', storeConfig?: { __typename: 'StoreConfig', store_code?: string | null, category_url_suffix?: string | null } | null };

export type GetRootCategoryIdQueryVariables = Exact<{ [key: string]: never; }>;


export type GetRootCategoryIdQuery = { __typename?: 'Query', storeConfig?: { __typename: 'StoreConfig', store_code?: string | null, root_category_uid?: string | null } | null };

export type GetLocaleQueryVariables = Exact<{ [key: string]: never; }>;


export type GetLocaleQuery = { __typename?: 'Query', storeConfig?: { __typename: 'StoreConfig', store_code?: string | null, locale?: string | null } | null };

export type GetPageSizeQueryVariables = Exact<{ [key: string]: never; }>;


export type GetPageSizeQuery = { __typename?: 'Query', storeConfig?: { __typename: 'StoreConfig', store_code?: string | null, grid_per_page?: number | null } | null };

export type GetStoreConfigDataForGalleryAcQueryVariables = Exact<{ [key: string]: never; }>;


export type GetStoreConfigDataForGalleryAcQuery = { __typename?: 'Query', storeConfig?: { __typename: 'StoreConfig', store_code?: string | null, product_url_suffix?: string | null, magento_wishlist_general_is_enabled?: string | null } | null };

export type GetMegaMenuQueryVariables = Exact<{ [key: string]: never; }>;


export type GetMegaMenuQuery = { __typename?: 'Query', categoryList?: Array<{ __typename: 'CategoryTree', uid: string, name?: string | null, children?: Array<{ __typename: 'CategoryTree', uid: string, include_in_menu?: number | null, name?: string | null, position?: number | null, url_path?: string | null, children?: Array<{ __typename: 'CategoryTree', uid: string, include_in_menu?: number | null, name?: string | null, position?: number | null, url_path?: string | null, children?: Array<{ __typename: 'CategoryTree', uid: string, include_in_menu?: number | null, name?: string | null, position?: number | null, url_path?: string | null } | null> | null } | null> | null } | null> | null } | null> | null };

export type GetNavigationMenuQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GetNavigationMenuQuery = { __typename?: 'Query', categories?: { __typename: 'CategoryResult', items?: Array<{ __typename: 'CategoryTree', uid: string, name?: string | null, children_count?: string | null, include_in_menu?: number | null, url_path?: string | null, children?: Array<{ __typename: 'CategoryTree', children_count?: string | null, uid: string, include_in_menu?: number | null, name?: string | null, position?: number | null, url_path?: string | null, url_suffix?: string | null } | null> | null } | null> | null } | null };

export type GetAutocompleteResultsQueryVariables = Exact<{
  inputText: Scalars['String'];
}>;


export type GetAutocompleteResultsQuery = { __typename?: 'Query', products?: { __typename: 'Products', total_count?: number | null, aggregations?: Array<{ __typename: 'Aggregation', label?: string | null, count?: number | null, attribute_code: string, position?: number | null, options?: Array<{ __typename: 'AggregationOption', label?: string | null, value: string } | null> | null } | null> | null, items?: Array<{ __typename: 'BundleProduct', id?: number | null, uid: string, name?: string | null, sku?: string | null, url_key?: string | null, url_suffix?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null, currency?: CurrencyEnum | null } | null } | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null } } | { __typename: 'ConfigurableProduct', id?: number | null, uid: string, name?: string | null, sku?: string | null, url_key?: string | null, url_suffix?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null, currency?: CurrencyEnum | null } | null } | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null } } | { __typename: 'DownloadableProduct', id?: number | null, uid: string, name?: string | null, sku?: string | null, url_key?: string | null, url_suffix?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null, currency?: CurrencyEnum | null } | null } | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null } } | { __typename: 'GroupedProduct', id?: number | null, uid: string, name?: string | null, sku?: string | null, url_key?: string | null, url_suffix?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null, currency?: CurrencyEnum | null } | null } | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null } } | { __typename: 'SimpleProduct', id?: number | null, uid: string, name?: string | null, sku?: string | null, url_key?: string | null, url_suffix?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null, currency?: CurrencyEnum | null } | null } | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null } } | { __typename: 'VirtualProduct', id?: number | null, uid: string, name?: string | null, sku?: string | null, url_key?: string | null, url_suffix?: string | null, small_image?: { __typename: 'ProductImage', url?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null, currency?: CurrencyEnum | null } | null } | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null } } | null> | null, page_info?: { __typename: 'SearchResultPageInfo', total_pages?: number | null } | null } | null };

export type GetCmsBlockQueryVariables = Exact<{
  identifiers: Array<InputMaybe<Scalars['String']>> | InputMaybe<Scalars['String']>;
}>;


export type GetCmsBlockQuery = { __typename?: 'Query', cmsBlocks?: { __typename: 'CmsBlocks', items?: Array<{ __typename?: 'CmsBlock', title?: string | null, content?: string | null, identifier?: string | null } | null> | null } | null };

export type GetHomeProductsQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GetHomeProductsQuery = { __typename?: 'Query', products?: { __typename?: 'Products', items?: Array<{ __typename?: 'BundleProduct', url_key?: string | null, uid: string, id?: number | null, sku?: string | null, name?: string | null, price_range: { __typename?: 'PriceRange', maximum_price?: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } | null, minimum_price: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } }, media_gallery?: Array<{ __typename?: 'ProductImage', url?: string | null, position?: number | null, disabled?: boolean | null } | { __typename?: 'ProductVideo', url?: string | null, position?: number | null, disabled?: boolean | null } | null> | null, image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, small_image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, description?: { __typename?: 'ComplexTextValue', html: string } | null, short_description?: { __typename?: 'ComplexTextValue', html: string } | null } | { __typename?: 'ConfigurableProduct', url_key?: string | null, uid: string, id?: number | null, sku?: string | null, name?: string | null, price_range: { __typename?: 'PriceRange', maximum_price?: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } | null, minimum_price: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } }, media_gallery?: Array<{ __typename?: 'ProductImage', url?: string | null, position?: number | null, disabled?: boolean | null } | { __typename?: 'ProductVideo', url?: string | null, position?: number | null, disabled?: boolean | null } | null> | null, image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, small_image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, description?: { __typename?: 'ComplexTextValue', html: string } | null, short_description?: { __typename?: 'ComplexTextValue', html: string } | null } | { __typename?: 'DownloadableProduct', url_key?: string | null, uid: string, id?: number | null, sku?: string | null, name?: string | null, price_range: { __typename?: 'PriceRange', maximum_price?: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } | null, minimum_price: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } }, media_gallery?: Array<{ __typename?: 'ProductImage', url?: string | null, position?: number | null, disabled?: boolean | null } | { __typename?: 'ProductVideo', url?: string | null, position?: number | null, disabled?: boolean | null } | null> | null, image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, small_image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, description?: { __typename?: 'ComplexTextValue', html: string } | null, short_description?: { __typename?: 'ComplexTextValue', html: string } | null } | { __typename?: 'GroupedProduct', url_key?: string | null, uid: string, id?: number | null, sku?: string | null, name?: string | null, price_range: { __typename?: 'PriceRange', maximum_price?: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } | null, minimum_price: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } }, media_gallery?: Array<{ __typename?: 'ProductImage', url?: string | null, position?: number | null, disabled?: boolean | null } | { __typename?: 'ProductVideo', url?: string | null, position?: number | null, disabled?: boolean | null } | null> | null, image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, small_image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, description?: { __typename?: 'ComplexTextValue', html: string } | null, short_description?: { __typename?: 'ComplexTextValue', html: string } | null } | { __typename?: 'SimpleProduct', url_key?: string | null, uid: string, id?: number | null, sku?: string | null, name?: string | null, price_range: { __typename?: 'PriceRange', maximum_price?: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } | null, minimum_price: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } }, media_gallery?: Array<{ __typename?: 'ProductImage', url?: string | null, position?: number | null, disabled?: boolean | null } | { __typename?: 'ProductVideo', url?: string | null, position?: number | null, disabled?: boolean | null } | null> | null, image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, small_image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, description?: { __typename?: 'ComplexTextValue', html: string } | null, short_description?: { __typename?: 'ComplexTextValue', html: string } | null } | { __typename?: 'VirtualProduct', url_key?: string | null, uid: string, id?: number | null, sku?: string | null, name?: string | null, price_range: { __typename?: 'PriceRange', maximum_price?: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } | null, minimum_price: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } }, media_gallery?: Array<{ __typename?: 'ProductImage', url?: string | null, position?: number | null, disabled?: boolean | null } | { __typename?: 'ProductVideo', url?: string | null, position?: number | null, disabled?: boolean | null } | null> | null, image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, small_image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, description?: { __typename?: 'ComplexTextValue', html: string } | null, short_description?: { __typename?: 'ComplexTextValue', html: string } | null } | null> | null } | null };

export type GetProductsByCategoryQueryVariables = Exact<{
  id: Scalars['String'];
}>;


export type GetProductsByCategoryQuery = { __typename?: 'Query', products?: { __typename?: 'Products', items?: Array<{ __typename?: 'BundleProduct', url_key?: string | null, id?: number | null, sku?: string | null, uid: string, name?: string | null, price_range: { __typename?: 'PriceRange', maximum_price?: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } | null, minimum_price: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } }, media_gallery?: Array<{ __typename?: 'ProductImage', url?: string | null, position?: number | null, disabled?: boolean | null } | { __typename?: 'ProductVideo', url?: string | null, position?: number | null, disabled?: boolean | null } | null> | null, image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, small_image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, description?: { __typename?: 'ComplexTextValue', html: string } | null, short_description?: { __typename?: 'ComplexTextValue', html: string } | null } | { __typename?: 'ConfigurableProduct', url_key?: string | null, id?: number | null, sku?: string | null, uid: string, name?: string | null, price_range: { __typename?: 'PriceRange', maximum_price?: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } | null, minimum_price: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } }, media_gallery?: Array<{ __typename?: 'ProductImage', url?: string | null, position?: number | null, disabled?: boolean | null } | { __typename?: 'ProductVideo', url?: string | null, position?: number | null, disabled?: boolean | null } | null> | null, image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, small_image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, description?: { __typename?: 'ComplexTextValue', html: string } | null, short_description?: { __typename?: 'ComplexTextValue', html: string } | null } | { __typename?: 'DownloadableProduct', url_key?: string | null, id?: number | null, sku?: string | null, uid: string, name?: string | null, price_range: { __typename?: 'PriceRange', maximum_price?: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } | null, minimum_price: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } }, media_gallery?: Array<{ __typename?: 'ProductImage', url?: string | null, position?: number | null, disabled?: boolean | null } | { __typename?: 'ProductVideo', url?: string | null, position?: number | null, disabled?: boolean | null } | null> | null, image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, small_image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, description?: { __typename?: 'ComplexTextValue', html: string } | null, short_description?: { __typename?: 'ComplexTextValue', html: string } | null } | { __typename?: 'GroupedProduct', url_key?: string | null, id?: number | null, sku?: string | null, uid: string, name?: string | null, price_range: { __typename?: 'PriceRange', maximum_price?: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } | null, minimum_price: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } }, media_gallery?: Array<{ __typename?: 'ProductImage', url?: string | null, position?: number | null, disabled?: boolean | null } | { __typename?: 'ProductVideo', url?: string | null, position?: number | null, disabled?: boolean | null } | null> | null, image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, small_image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, description?: { __typename?: 'ComplexTextValue', html: string } | null, short_description?: { __typename?: 'ComplexTextValue', html: string } | null } | { __typename?: 'SimpleProduct', url_key?: string | null, id?: number | null, sku?: string | null, uid: string, name?: string | null, price_range: { __typename?: 'PriceRange', maximum_price?: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } | null, minimum_price: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } }, media_gallery?: Array<{ __typename?: 'ProductImage', url?: string | null, position?: number | null, disabled?: boolean | null } | { __typename?: 'ProductVideo', url?: string | null, position?: number | null, disabled?: boolean | null } | null> | null, image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, small_image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, description?: { __typename?: 'ComplexTextValue', html: string } | null, short_description?: { __typename?: 'ComplexTextValue', html: string } | null } | { __typename?: 'VirtualProduct', url_key?: string | null, id?: number | null, sku?: string | null, uid: string, name?: string | null, price_range: { __typename?: 'PriceRange', maximum_price?: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } | null, minimum_price: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } }, media_gallery?: Array<{ __typename?: 'ProductImage', url?: string | null, position?: number | null, disabled?: boolean | null } | { __typename?: 'ProductVideo', url?: string | null, position?: number | null, disabled?: boolean | null } | null> | null, image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, small_image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, description?: { __typename?: 'ComplexTextValue', html: string } | null, short_description?: { __typename?: 'ComplexTextValue', html: string } | null } | null> | null } | null };

export type GetProductDetailsByUrlKeyQueryVariables = Exact<{
  urlKey: Scalars['String'];
}>;


export type GetProductDetailsByUrlKeyQuery = { __typename?: 'Query', products?: { __typename?: 'Products', items?: Array<{ __typename?: 'BundleProduct', id?: number | null, sku?: string | null, url_key?: string | null, uid: string, name?: string | null, categories?: Array<{ __typename?: 'CategoryTree', uid: string, name?: string | null, url_key?: string | null } | null> | null, price_range: { __typename?: 'PriceRange', maximum_price?: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } | null, minimum_price: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } }, media_gallery?: Array<{ __typename?: 'ProductImage', url?: string | null, position?: number | null, disabled?: boolean | null } | { __typename?: 'ProductVideo', url?: string | null, position?: number | null, disabled?: boolean | null } | null> | null, image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, small_image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, description?: { __typename?: 'ComplexTextValue', html: string } | null, short_description?: { __typename?: 'ComplexTextValue', html: string } | null } | { __typename?: 'ConfigurableProduct', id?: number | null, sku?: string | null, url_key?: string | null, uid: string, name?: string | null, categories?: Array<{ __typename?: 'CategoryTree', uid: string, name?: string | null, url_key?: string | null } | null> | null, price_range: { __typename?: 'PriceRange', maximum_price?: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } | null, minimum_price: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } }, media_gallery?: Array<{ __typename?: 'ProductImage', url?: string | null, position?: number | null, disabled?: boolean | null } | { __typename?: 'ProductVideo', url?: string | null, position?: number | null, disabled?: boolean | null } | null> | null, image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, small_image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, description?: { __typename?: 'ComplexTextValue', html: string } | null, short_description?: { __typename?: 'ComplexTextValue', html: string } | null } | { __typename?: 'DownloadableProduct', id?: number | null, sku?: string | null, url_key?: string | null, uid: string, name?: string | null, categories?: Array<{ __typename?: 'CategoryTree', uid: string, name?: string | null, url_key?: string | null } | null> | null, price_range: { __typename?: 'PriceRange', maximum_price?: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } | null, minimum_price: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } }, media_gallery?: Array<{ __typename?: 'ProductImage', url?: string | null, position?: number | null, disabled?: boolean | null } | { __typename?: 'ProductVideo', url?: string | null, position?: number | null, disabled?: boolean | null } | null> | null, image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, small_image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, description?: { __typename?: 'ComplexTextValue', html: string } | null, short_description?: { __typename?: 'ComplexTextValue', html: string } | null } | { __typename?: 'GroupedProduct', id?: number | null, sku?: string | null, url_key?: string | null, uid: string, name?: string | null, categories?: Array<{ __typename?: 'CategoryTree', uid: string, name?: string | null, url_key?: string | null } | null> | null, price_range: { __typename?: 'PriceRange', maximum_price?: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } | null, minimum_price: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } }, media_gallery?: Array<{ __typename?: 'ProductImage', url?: string | null, position?: number | null, disabled?: boolean | null } | { __typename?: 'ProductVideo', url?: string | null, position?: number | null, disabled?: boolean | null } | null> | null, image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, small_image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, description?: { __typename?: 'ComplexTextValue', html: string } | null, short_description?: { __typename?: 'ComplexTextValue', html: string } | null } | { __typename?: 'SimpleProduct', id?: number | null, sku?: string | null, url_key?: string | null, uid: string, name?: string | null, categories?: Array<{ __typename?: 'CategoryTree', uid: string, name?: string | null, url_key?: string | null } | null> | null, price_range: { __typename?: 'PriceRange', maximum_price?: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } | null, minimum_price: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } }, media_gallery?: Array<{ __typename?: 'ProductImage', url?: string | null, position?: number | null, disabled?: boolean | null } | { __typename?: 'ProductVideo', url?: string | null, position?: number | null, disabled?: boolean | null } | null> | null, image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, small_image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, description?: { __typename?: 'ComplexTextValue', html: string } | null, short_description?: { __typename?: 'ComplexTextValue', html: string } | null } | { __typename?: 'VirtualProduct', id?: number | null, sku?: string | null, url_key?: string | null, uid: string, name?: string | null, categories?: Array<{ __typename?: 'CategoryTree', uid: string, name?: string | null, url_key?: string | null } | null> | null, price_range: { __typename?: 'PriceRange', maximum_price?: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } | null, minimum_price: { __typename?: 'ProductPrice', regular_price: { __typename?: 'Money', value?: number | null }, final_price: { __typename?: 'Money', value?: number | null }, discount?: { __typename?: 'ProductDiscount', amount_off?: number | null } | null } }, media_gallery?: Array<{ __typename?: 'ProductImage', url?: string | null, position?: number | null, disabled?: boolean | null } | { __typename?: 'ProductVideo', url?: string | null, position?: number | null, disabled?: boolean | null } | null> | null, image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, small_image?: { __typename?: 'ProductImage', disabled?: boolean | null, label?: string | null, position?: number | null, url?: string | null } | null, description?: { __typename?: 'ComplexTextValue', html: string } | null, short_description?: { __typename?: 'ComplexTextValue', html: string } | null } | null> | null } | null };

export type CreateAccountMutationVariables = Exact<{
  email: Scalars['String'];
  firstname: Scalars['String'];
  lastname: Scalars['String'];
  password: Scalars['String'];
  is_subscribed: Scalars['Boolean'];
}>;


export type CreateAccountMutation = { __typename?: 'Mutation', createCustomer?: { __typename: 'CustomerOutput', customer: { __typename: 'Customer', email?: string | null } } | null };

export type SignInMutationVariables = Exact<{
  email: Scalars['String'];
  password: Scalars['String'];
}>;


export type SignInMutation = { __typename?: 'Mutation', generateCustomerToken?: { __typename: 'CustomerToken', token?: string | null } | null };

export type CreateCartAfterSignInMutationVariables = Exact<{ [key: string]: never; }>;


export type CreateCartAfterSignInMutation = { __typename?: 'Mutation', cartId?: string | null };

export type MergeCartsAfterSignInMutationVariables = Exact<{
  sourceCartId: Scalars['String'];
  destinationCartId: Scalars['String'];
}>;


export type MergeCartsAfterSignInMutation = { __typename?: 'Mutation', mergeCarts: { __typename: 'Cart', id: string, total_quantity: number, items?: Array<{ __typename: 'BundleCartItem', uid: string, product: { __typename: 'BundleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'ConfigurableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'DownloadableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'GroupedProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'SimpleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'VirtualProduct', uid: string, stock_status?: ProductStockStatus | null } } | { __typename: 'ConfigurableCartItem', uid: string, product: { __typename: 'BundleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'ConfigurableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'DownloadableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'GroupedProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'SimpleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'VirtualProduct', uid: string, stock_status?: ProductStockStatus | null } } | { __typename: 'DownloadableCartItem', uid: string, product: { __typename: 'BundleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'ConfigurableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'DownloadableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'GroupedProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'SimpleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'VirtualProduct', uid: string, stock_status?: ProductStockStatus | null } } | { __typename: 'SimpleCartItem', uid: string, product: { __typename: 'BundleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'ConfigurableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'DownloadableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'GroupedProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'SimpleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'VirtualProduct', uid: string, stock_status?: ProductStockStatus | null } } | { __typename: 'VirtualCartItem', uid: string, product: { __typename: 'BundleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'ConfigurableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'DownloadableProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'GroupedProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'SimpleProduct', uid: string, stock_status?: ProductStockStatus | null } | { __typename: 'VirtualProduct', uid: string, stock_status?: ProductStockStatus | null } } | null> | null, available_payment_methods?: Array<{ __typename: 'AvailablePaymentMethod', code: string } | null> | null } };

export type GetCartDetailsAfterSignInQueryVariables = Exact<{
  cartId: Scalars['String'];
}>;


export type GetCartDetailsAfterSignInQuery = { __typename?: 'Query', cart?: { __typename: 'Cart', id: string, total_quantity: number, items?: Array<{ __typename: 'BundleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | { __typename: 'ConfigurableCartItem', uid: string, quantity: number, configurable_options: Array<{ __typename: 'SelectedConfigurableOption', configurable_product_option_uid: string, option_label: string, configurable_product_option_value_uid: string, value_label: string, id: number } | null>, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | { __typename: 'DownloadableCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | { __typename: 'SimpleCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | { __typename: 'VirtualCartItem', uid: string, quantity: number, product: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, variants?: Array<{ __typename: 'ConfigurableVariant', attributes?: Array<{ __typename: 'ConfigurableAttributeOption', uid: string } | null> | null, product?: { __typename: 'SimpleProduct', uid: string, small_image?: { __typename: 'ProductImage', url?: string | null } | null } | null } | null> | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, url_key?: string | null, stock_status?: ProductStockStatus | null, small_image?: { __typename: 'ProductImage', url?: string | null, label?: string | null } | null, price?: { __typename: 'ProductPrices', regularPrice?: { __typename: 'Price', amount?: { __typename: 'Money', value?: number | null } | null } | null } | null, thumbnail?: { __typename: 'ProductImage', url?: string | null } | null }, prices?: { __typename: 'CartItemPrices', price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null, errors?: Array<{ __typename: 'CartItemError', code: CartItemErrorType, message: string } | null> | null } | null> | null, prices?: { __typename: 'CartPrices', grand_total?: { __typename: 'Money', value?: number | null, currency?: CurrencyEnum | null } | null } | null, applied_coupons?: Array<{ __typename: 'AppliedCoupon', code: string } | null> | null } | null };

export type GetCustomerOrdersQueryVariables = Exact<{
  filter?: InputMaybe<CustomerOrdersFilterInput>;
  pageSize: Scalars['Int'];
}>;


export type GetCustomerOrdersQuery = { __typename?: 'Query', customer?: { __typename: 'Customer', orders?: { __typename: 'CustomerOrders', total_count?: number | null, items: Array<{ __typename: 'CustomerOrder', id: string, number: string, order_date: string, shipping_method?: string | null, status: string, billing_address?: { __typename: 'OrderAddress', city: string, country_code?: CountryCodeEnum | null, firstname: string, lastname: string, postcode?: string | null, region?: string | null, street: Array<string | null>, telephone?: string | null } | null, invoices: Array<{ __typename: 'Invoice', id: string } | null>, items?: Array<{ __typename: 'BundleOrderItem', id: string, product_name?: string | null, product_sku: string, product_url_key?: string | null, quantity_ordered?: number | null, product_sale_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, selected_options?: Array<{ __typename: 'OrderItemOption', label: string, value: string } | null> | null } | { __typename: 'DownloadableOrderItem', id: string, product_name?: string | null, product_sku: string, product_url_key?: string | null, quantity_ordered?: number | null, product_sale_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, selected_options?: Array<{ __typename: 'OrderItemOption', label: string, value: string } | null> | null } | { __typename: 'OrderItem', id: string, product_name?: string | null, product_sku: string, product_url_key?: string | null, quantity_ordered?: number | null, product_sale_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, selected_options?: Array<{ __typename: 'OrderItemOption', label: string, value: string } | null> | null } | null> | null, payment_methods?: Array<{ __typename: 'OrderPaymentMethod', name: string, type: string, additional_data?: Array<{ __typename: 'KeyValue', name?: string | null, value?: string | null } | null> | null } | null> | null, shipments?: Array<{ __typename: 'OrderShipment', id: string, tracking?: Array<{ __typename: 'ShipmentTracking', number?: string | null } | null> | null } | null> | null, shipping_address?: { __typename: 'OrderAddress', city: string, country_code?: CountryCodeEnum | null, firstname: string, lastname: string, postcode?: string | null, region?: string | null, street: Array<string | null>, telephone?: string | null } | null, total?: { __typename: 'OrderTotal', discounts?: Array<{ __typename: 'Discount', amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null, grand_total: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, subtotal: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_shipping: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_tax: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null } | null>, page_info?: { __typename: 'SearchResultPageInfo', current_page?: number | null, total_pages?: number | null } | null } | null } | null };

export type IsEmailAvailableQueryVariables = Exact<{
  email: Scalars['String'];
}>;


export type IsEmailAvailableQuery = { __typename?: 'Query', isEmailAvailable?: { __typename: 'IsEmailAvailableOutput', is_email_available?: boolean | null } | null };

export type CustomerOrdersFragmentFragment = { __typename: 'CustomerOrders', total_count?: number | null, items: Array<{ __typename: 'CustomerOrder', id: string, number: string, order_date: string, shipping_method?: string | null, status: string, billing_address?: { __typename: 'OrderAddress', city: string, country_code?: CountryCodeEnum | null, firstname: string, lastname: string, postcode?: string | null, region?: string | null, street: Array<string | null>, telephone?: string | null } | null, invoices: Array<{ __typename: 'Invoice', id: string } | null>, items?: Array<{ __typename: 'BundleOrderItem', id: string, product_name?: string | null, product_sku: string, product_url_key?: string | null, quantity_ordered?: number | null, product_sale_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, selected_options?: Array<{ __typename: 'OrderItemOption', label: string, value: string } | null> | null } | { __typename: 'DownloadableOrderItem', id: string, product_name?: string | null, product_sku: string, product_url_key?: string | null, quantity_ordered?: number | null, product_sale_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, selected_options?: Array<{ __typename: 'OrderItemOption', label: string, value: string } | null> | null } | { __typename: 'OrderItem', id: string, product_name?: string | null, product_sku: string, product_url_key?: string | null, quantity_ordered?: number | null, product_sale_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, selected_options?: Array<{ __typename: 'OrderItemOption', label: string, value: string } | null> | null } | null> | null, payment_methods?: Array<{ __typename: 'OrderPaymentMethod', name: string, type: string, additional_data?: Array<{ __typename: 'KeyValue', name?: string | null, value?: string | null } | null> | null } | null> | null, shipments?: Array<{ __typename: 'OrderShipment', id: string, tracking?: Array<{ __typename: 'ShipmentTracking', number?: string | null } | null> | null } | null> | null, shipping_address?: { __typename: 'OrderAddress', city: string, country_code?: CountryCodeEnum | null, firstname: string, lastname: string, postcode?: string | null, region?: string | null, street: Array<string | null>, telephone?: string | null } | null, total?: { __typename: 'OrderTotal', discounts?: Array<{ __typename: 'Discount', amount: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null> | null, grand_total: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, subtotal: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_shipping: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, total_tax: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null } } | null } | null>, page_info?: { __typename: 'SearchResultPageInfo', current_page?: number | null, total_pages?: number | null } | null };

export type GetCustomerInformationQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCustomerInformationQuery = { __typename?: 'Query', customer?: { __typename: 'Customer', id?: number | null, firstname?: string | null, lastname?: string | null, email?: string | null } | null };

export type AccountInformationPageFragmentFragment = { __typename: 'Customer', id?: number | null, firstname?: string | null, lastname?: string | null, email?: string | null };

export type SetCustomerInformationMutationVariables = Exact<{
  customerInput: CustomerInput;
}>;


export type SetCustomerInformationMutation = { __typename?: 'Mutation', updateCustomer?: { __typename: 'CustomerOutput', customer: { __typename: 'Customer', id?: number | null, firstname?: string | null, lastname?: string | null, email?: string | null } } | null };

export type AddProductToWishlistFromGalleryMutationVariables = Exact<{
  wishlistId: Scalars['ID'];
  itemOptions: WishlistItemInput;
}>;


export type AddProductToWishlistFromGalleryMutation = { __typename?: 'Mutation', addProductsToWishlist?: { __typename: 'AddProductsToWishlistOutput', user_errors: Array<{ __typename: 'WishListUserInputError', code: WishListUserInputErrorType, message: string } | null> } | null };

export type GetCustomerWishlistQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCustomerWishlistQuery = { __typename?: 'Query', customer?: { __typename: 'Customer', wishlists: Array<{ __typename: 'Wishlist', id?: string | null, items_count?: number | null, sharing_code?: string | null } | null> } | null };

export type WishlistPageFragmentFragment = { __typename: 'Wishlist', id?: string | null, items_count?: number | null, sharing_code?: string | null };

export type GetCustomerWishlistPageWiseQueryVariables = Exact<{
  id: Scalars['ID'];
  currentPage?: InputMaybe<Scalars['Int']>;
}>;


export type GetCustomerWishlistPageWiseQuery = { __typename?: 'Query', customer?: { __typename: 'Customer', wishlist_v2?: { __typename: 'Wishlist', id?: string | null, items_v2?: { __typename: 'WishlistItems', items: Array<{ __typename: 'BundleWishlistItem', id: string, product?: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, configurable_options?: Array<{ __typename: 'ConfigurableProductOptions', uid: string, attribute_code?: string | null, attribute_id?: string | null, attribute_id_v2?: number | null, label?: string | null, values?: Array<{ __typename: 'ConfigurableProductOptionsValues', uid?: string | null, default_label?: string | null, label?: string | null, store_label?: string | null, use_default_value?: boolean | null, value_index?: number | null, swatch_data?: { __typename: 'ColorSwatchData', value?: string | null } | { __typename: 'ImageSwatchData', thumbnail?: string | null, value?: string | null } | { __typename: 'TextSwatchData', value?: string | null } | null } | null> | null } | null> | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | null } | { __typename: 'ConfigurableWishlistItem', id: string, configurable_options?: Array<{ __typename: 'SelectedConfigurableOption', id: number, option_label: string, value_id: number, value_label: string } | null> | null, product?: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, configurable_options?: Array<{ __typename: 'ConfigurableProductOptions', uid: string, attribute_code?: string | null, attribute_id?: string | null, attribute_id_v2?: number | null, label?: string | null, values?: Array<{ __typename: 'ConfigurableProductOptionsValues', uid?: string | null, default_label?: string | null, label?: string | null, store_label?: string | null, use_default_value?: boolean | null, value_index?: number | null, swatch_data?: { __typename: 'ColorSwatchData', value?: string | null } | { __typename: 'ImageSwatchData', thumbnail?: string | null, value?: string | null } | { __typename: 'TextSwatchData', value?: string | null } | null } | null> | null } | null> | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | null } | { __typename: 'DownloadableWishlistItem', id: string, product?: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, configurable_options?: Array<{ __typename: 'ConfigurableProductOptions', uid: string, attribute_code?: string | null, attribute_id?: string | null, attribute_id_v2?: number | null, label?: string | null, values?: Array<{ __typename: 'ConfigurableProductOptionsValues', uid?: string | null, default_label?: string | null, label?: string | null, store_label?: string | null, use_default_value?: boolean | null, value_index?: number | null, swatch_data?: { __typename: 'ColorSwatchData', value?: string | null } | { __typename: 'ImageSwatchData', thumbnail?: string | null, value?: string | null } | { __typename: 'TextSwatchData', value?: string | null } | null } | null> | null } | null> | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | null } | { __typename: 'GroupedProductWishlistItem', id: string, product?: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, configurable_options?: Array<{ __typename: 'ConfigurableProductOptions', uid: string, attribute_code?: string | null, attribute_id?: string | null, attribute_id_v2?: number | null, label?: string | null, values?: Array<{ __typename: 'ConfigurableProductOptionsValues', uid?: string | null, default_label?: string | null, label?: string | null, store_label?: string | null, use_default_value?: boolean | null, value_index?: number | null, swatch_data?: { __typename: 'ColorSwatchData', value?: string | null } | { __typename: 'ImageSwatchData', thumbnail?: string | null, value?: string | null } | { __typename: 'TextSwatchData', value?: string | null } | null } | null> | null } | null> | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | null } | { __typename: 'SimpleWishlistItem', id: string, product?: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, configurable_options?: Array<{ __typename: 'ConfigurableProductOptions', uid: string, attribute_code?: string | null, attribute_id?: string | null, attribute_id_v2?: number | null, label?: string | null, values?: Array<{ __typename: 'ConfigurableProductOptionsValues', uid?: string | null, default_label?: string | null, label?: string | null, store_label?: string | null, use_default_value?: boolean | null, value_index?: number | null, swatch_data?: { __typename: 'ColorSwatchData', value?: string | null } | { __typename: 'ImageSwatchData', thumbnail?: string | null, value?: string | null } | { __typename: 'TextSwatchData', value?: string | null } | null } | null> | null } | null> | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | null } | { __typename: 'VirtualWishlistItem', id: string, product?: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, configurable_options?: Array<{ __typename: 'ConfigurableProductOptions', uid: string, attribute_code?: string | null, attribute_id?: string | null, attribute_id_v2?: number | null, label?: string | null, values?: Array<{ __typename: 'ConfigurableProductOptionsValues', uid?: string | null, default_label?: string | null, label?: string | null, store_label?: string | null, use_default_value?: boolean | null, value_index?: number | null, swatch_data?: { __typename: 'ColorSwatchData', value?: string | null } | { __typename: 'ImageSwatchData', thumbnail?: string | null, value?: string | null } | { __typename: 'TextSwatchData', value?: string | null } | null } | null> | null } | null> | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | null } | null> } | null } | null } | null };

type WishlistItemFragment_BundleWishlistItem_Fragment = { __typename: 'BundleWishlistItem', id: string, product?: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, configurable_options?: Array<{ __typename: 'ConfigurableProductOptions', uid: string, attribute_code?: string | null, attribute_id?: string | null, attribute_id_v2?: number | null, label?: string | null, values?: Array<{ __typename: 'ConfigurableProductOptionsValues', uid?: string | null, default_label?: string | null, label?: string | null, store_label?: string | null, use_default_value?: boolean | null, value_index?: number | null, swatch_data?: { __typename: 'ColorSwatchData', value?: string | null } | { __typename: 'ImageSwatchData', thumbnail?: string | null, value?: string | null } | { __typename: 'TextSwatchData', value?: string | null } | null } | null> | null } | null> | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | null };

type WishlistItemFragment_ConfigurableWishlistItem_Fragment = { __typename: 'ConfigurableWishlistItem', id: string, configurable_options?: Array<{ __typename: 'SelectedConfigurableOption', id: number, option_label: string, value_id: number, value_label: string } | null> | null, product?: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, configurable_options?: Array<{ __typename: 'ConfigurableProductOptions', uid: string, attribute_code?: string | null, attribute_id?: string | null, attribute_id_v2?: number | null, label?: string | null, values?: Array<{ __typename: 'ConfigurableProductOptionsValues', uid?: string | null, default_label?: string | null, label?: string | null, store_label?: string | null, use_default_value?: boolean | null, value_index?: number | null, swatch_data?: { __typename: 'ColorSwatchData', value?: string | null } | { __typename: 'ImageSwatchData', thumbnail?: string | null, value?: string | null } | { __typename: 'TextSwatchData', value?: string | null } | null } | null> | null } | null> | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | null };

type WishlistItemFragment_DownloadableWishlistItem_Fragment = { __typename: 'DownloadableWishlistItem', id: string, product?: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, configurable_options?: Array<{ __typename: 'ConfigurableProductOptions', uid: string, attribute_code?: string | null, attribute_id?: string | null, attribute_id_v2?: number | null, label?: string | null, values?: Array<{ __typename: 'ConfigurableProductOptionsValues', uid?: string | null, default_label?: string | null, label?: string | null, store_label?: string | null, use_default_value?: boolean | null, value_index?: number | null, swatch_data?: { __typename: 'ColorSwatchData', value?: string | null } | { __typename: 'ImageSwatchData', thumbnail?: string | null, value?: string | null } | { __typename: 'TextSwatchData', value?: string | null } | null } | null> | null } | null> | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | null };

type WishlistItemFragment_GroupedProductWishlistItem_Fragment = { __typename: 'GroupedProductWishlistItem', id: string, product?: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, configurable_options?: Array<{ __typename: 'ConfigurableProductOptions', uid: string, attribute_code?: string | null, attribute_id?: string | null, attribute_id_v2?: number | null, label?: string | null, values?: Array<{ __typename: 'ConfigurableProductOptionsValues', uid?: string | null, default_label?: string | null, label?: string | null, store_label?: string | null, use_default_value?: boolean | null, value_index?: number | null, swatch_data?: { __typename: 'ColorSwatchData', value?: string | null } | { __typename: 'ImageSwatchData', thumbnail?: string | null, value?: string | null } | { __typename: 'TextSwatchData', value?: string | null } | null } | null> | null } | null> | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | null };

type WishlistItemFragment_SimpleWishlistItem_Fragment = { __typename: 'SimpleWishlistItem', id: string, product?: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, configurable_options?: Array<{ __typename: 'ConfigurableProductOptions', uid: string, attribute_code?: string | null, attribute_id?: string | null, attribute_id_v2?: number | null, label?: string | null, values?: Array<{ __typename: 'ConfigurableProductOptionsValues', uid?: string | null, default_label?: string | null, label?: string | null, store_label?: string | null, use_default_value?: boolean | null, value_index?: number | null, swatch_data?: { __typename: 'ColorSwatchData', value?: string | null } | { __typename: 'ImageSwatchData', thumbnail?: string | null, value?: string | null } | { __typename: 'TextSwatchData', value?: string | null } | null } | null> | null } | null> | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | null };

type WishlistItemFragment_VirtualWishlistItem_Fragment = { __typename: 'VirtualWishlistItem', id: string, product?: { __typename: 'BundleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'ConfigurableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, configurable_options?: Array<{ __typename: 'ConfigurableProductOptions', uid: string, attribute_code?: string | null, attribute_id?: string | null, attribute_id_v2?: number | null, label?: string | null, values?: Array<{ __typename: 'ConfigurableProductOptionsValues', uid?: string | null, default_label?: string | null, label?: string | null, store_label?: string | null, use_default_value?: boolean | null, value_index?: number | null, swatch_data?: { __typename: 'ColorSwatchData', value?: string | null } | { __typename: 'ImageSwatchData', thumbnail?: string | null, value?: string | null } | { __typename: 'TextSwatchData', value?: string | null } | null } | null> | null } | null> | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'DownloadableProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'GroupedProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'SimpleProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | { __typename: 'VirtualProduct', uid: string, name?: string | null, sku?: string | null, stock_status?: ProductStockStatus | null, image?: { __typename: 'ProductImage', label?: string | null, url?: string | null } | null, price_range: { __typename: 'PriceRange', maximum_price?: { __typename: 'ProductPrice', final_price: { __typename: 'Money', currency?: CurrencyEnum | null, value?: number | null }, discount?: { __typename: 'ProductDiscount', amount_off?: number | null } | null } | null } } | null };

export type WishlistItemFragmentFragment = WishlistItemFragment_BundleWishlistItem_Fragment | WishlistItemFragment_ConfigurableWishlistItem_Fragment | WishlistItemFragment_DownloadableWishlistItem_Fragment | WishlistItemFragment_GroupedProductWishlistItem_Fragment | WishlistItemFragment_SimpleWishlistItem_Fragment | WishlistItemFragment_VirtualWishlistItem_Fragment;

export type GetMultipleWishlistsEnabledQueryVariables = Exact<{ [key: string]: never; }>;


export type GetMultipleWishlistsEnabledQuery = { __typename?: 'Query', storeConfig?: { __typename: 'StoreConfig', store_code?: string | null } | null };

export type GetWishlistConfigForWishlistPageAcQueryVariables = Exact<{ [key: string]: never; }>;


export type GetWishlistConfigForWishlistPageAcQuery = { __typename?: 'Query', storeConfig?: { __typename: 'StoreConfig', store_code?: string | null, magento_wishlist_general_is_enabled?: string | null } | null };

export type GetWishlistItemsForLocalFieldQueryVariables = Exact<{
  currentPage: Scalars['Int'];
}>;


export type GetWishlistItemsForLocalFieldQuery = { __typename?: 'Query', customer?: { __typename: 'Customer', wishlists: Array<{ __typename: 'Wishlist', id?: string | null, items_v2?: { __typename: 'WishlistItems', items: Array<{ __typename: 'BundleWishlistItem', id: string, product?: { __typename: 'BundleProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'ConfigurableProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'DownloadableProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'GroupedProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'SimpleProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'VirtualProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | null } | { __typename: 'ConfigurableWishlistItem', id: string, product?: { __typename: 'BundleProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'ConfigurableProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'DownloadableProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'GroupedProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'SimpleProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'VirtualProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | null } | { __typename: 'DownloadableWishlistItem', id: string, product?: { __typename: 'BundleProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'ConfigurableProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'DownloadableProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'GroupedProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'SimpleProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'VirtualProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | null } | { __typename: 'GroupedProductWishlistItem', id: string, product?: { __typename: 'BundleProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'ConfigurableProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'DownloadableProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'GroupedProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'SimpleProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'VirtualProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | null } | { __typename: 'SimpleWishlistItem', id: string, product?: { __typename: 'BundleProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'ConfigurableProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'DownloadableProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'GroupedProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'SimpleProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'VirtualProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | null } | { __typename: 'VirtualWishlistItem', id: string, product?: { __typename: 'BundleProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'ConfigurableProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'DownloadableProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'GroupedProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'SimpleProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | { __typename: 'VirtualProduct', uid: string, sku?: string | null, name?: string | null, url_key?: string | null, small_image?: { __typename?: 'ProductImage', url?: string | null } | null, price_range: { __typename?: 'PriceRange', minimum_price: { __typename?: 'ProductPrice', final_price: { __typename?: 'Money', value?: number | null } } } } | null } | null>, page_info?: { __typename: 'SearchResultPageInfo', current_page?: number | null, total_pages?: number | null } | null } | null } | null> } | null };

export const CategoryFragmentFragmentDoc = gql`
    fragment CategoryFragment on CategoryTree {
  uid
  meta_title
  meta_keywords
  meta_description
  __typename
}
    `;
export const ProductsFragmentFragmentDoc = gql`
    fragment ProductsFragment on Products {
  items {
    id
    uid
    name
    price_range {
      maximum_price {
        final_price {
          currency
          value
          __typename
        }
        regular_price {
          currency
          value
          __typename
        }
        __typename
      }
      __typename
    }
    sku
    small_image {
      url
      __typename
    }
    stock_status
    rating_summary
    __typename
    url_key
  }
  page_info {
    total_pages
    __typename
  }
  total_count
  __typename
}
    `;
export const ShippingSummaryFragmentFragmentDoc = gql`
    fragment ShippingSummaryFragment on Cart {
  id
  shipping_addresses {
    selected_shipping_method {
      amount {
        currency
        value
        __typename
      }
      __typename
    }
    street
    __typename
  }
  __typename
}
    `;
export const TaxSummaryFragmentFragmentDoc = gql`
    fragment TaxSummaryFragment on CartPrices {
  applied_taxes {
    amount {
      currency
      value
      __typename
    }
    __typename
  }
  __typename
}
    `;
export const DiscountSummaryFragmentFragmentDoc = gql`
    fragment DiscountSummaryFragment on CartPrices {
  discounts {
    amount {
      currency
      value
      __typename
    }
    label
    __typename
  }
  __typename
}
    `;
export const GrandTotalFragmentFragmentDoc = gql`
    fragment GrandTotalFragment on CartPrices {
  grand_total {
    currency
    value
    __typename
  }
  __typename
}
    `;
export const PriceSummaryFragmentFragmentDoc = gql`
    fragment PriceSummaryFragment on Cart {
  id
  items {
    uid
    quantity
    __typename
  }
  ...ShippingSummaryFragment
  prices {
    ...TaxSummaryFragment
    ...DiscountSummaryFragment
    ...GrandTotalFragment
    subtotal_excluding_tax {
      currency
      value
      __typename
    }
    subtotal_including_tax {
      currency
      value
      __typename
    }
    __typename
  }
  __typename
}
    ${ShippingSummaryFragmentFragmentDoc}
${TaxSummaryFragmentFragmentDoc}
${DiscountSummaryFragmentFragmentDoc}
${GrandTotalFragmentFragmentDoc}`;
export const AvailablePaymentMethodsFragmentFragmentDoc = gql`
    fragment AvailablePaymentMethodsFragment on Cart {
  id
  available_payment_methods {
    code
    title
    __typename
  }
  __typename
}
    `;
export const CustomerAddressFragmentFragmentDoc = gql`
    fragment CustomerAddressFragment on CustomerAddress {
  id
  city
  country_code
  default_shipping
  firstname
  lastname
  postcode
  region {
    region
    region_code
    region_id
    __typename
  }
  street
  telephone
  __typename
}
    `;
export const ShippingInformationFragmentFragmentDoc = gql`
    fragment ShippingInformationFragment on Cart {
  id
  email
  shipping_addresses {
    city
    country {
      code
      label
      __typename
    }
    firstname
    lastname
    postcode
    region {
      code
      label
      region_id
      __typename
    }
    street
    telephone
    __typename
  }
  __typename
}
    `;
export const AvailableShippingMethodsCheckoutFragmentFragmentDoc = gql`
    fragment AvailableShippingMethodsCheckoutFragment on Cart {
  id
  shipping_addresses {
    available_shipping_methods {
      amount {
        currency
        value
        __typename
      }
      available
      carrier_code
      carrier_title
      method_code
      method_title
      __typename
    }
    street
    __typename
  }
  __typename
}
    `;
export const SelectedShippingMethodCheckoutFragmentFragmentDoc = gql`
    fragment SelectedShippingMethodCheckoutFragment on Cart {
  id
  shipping_addresses {
    selected_shipping_method {
      amount {
        currency
        value
        __typename
      }
      carrier_code
      method_code
      method_title
      __typename
    }
    street
    __typename
  }
  __typename
}
    `;
export const ShippingMethodsCheckoutFragmentFragmentDoc = gql`
    fragment ShippingMethodsCheckoutFragment on Cart {
  id
  ...AvailableShippingMethodsCheckoutFragment
  ...SelectedShippingMethodCheckoutFragment
  shipping_addresses {
    country {
      code
      __typename
    }
    postcode
    region {
      code
      __typename
    }
    street
    __typename
  }
  __typename
}
    ${AvailableShippingMethodsCheckoutFragmentFragmentDoc}
${SelectedShippingMethodCheckoutFragmentFragmentDoc}`;
export const CartTriggerFragmentFragmentDoc = gql`
    fragment CartTriggerFragment on Cart {
  id
  total_quantity
  __typename
}
    `;
export const ProductListFragmentFragmentDoc = gql`
    fragment ProductListFragment on Cart {
  id
  items {
    uid
    product {
      uid
      name
      sku
      url_key
      thumbnail {
        url
        __typename
      }
      stock_status
      ... on ConfigurableProduct {
        variants {
          attributes {
            uid
            __typename
          }
          product {
            uid
            thumbnail {
              url
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
    prices {
      price {
        currency
        value
        __typename
      }
      total_item_discount {
        value
        __typename
      }
      __typename
    }
    quantity
    ... on ConfigurableCartItem {
      configurable_options {
        configurable_product_option_uid
        option_label
        configurable_product_option_value_uid
        value_label
        __typename
      }
      __typename
    }
    __typename
  }
  __typename
}
    `;
export const MiniCartFragmentFragmentDoc = gql`
    fragment MiniCartFragment on Cart {
  id
  total_quantity
  prices {
    subtotal_excluding_tax {
      currency
      value
      __typename
    }
    subtotal_including_tax {
      currency
      value
      __typename
    }
    __typename
  }
  ...ProductListFragment
  __typename
}
    ${ProductListFragmentFragmentDoc}`;
export const AppliedCouponsFragmentFragmentDoc = gql`
    fragment AppliedCouponsFragment on Cart {
  id
  applied_coupons {
    code
    __typename
  }
  __typename
}
    `;
export const ProductListingFragmentFragmentDoc = gql`
    fragment ProductListingFragment on Cart {
  id
  items {
    uid
    product {
      uid
      name
      sku
      url_key
      thumbnail {
        url
        __typename
      }
      small_image {
        url
        __typename
      }
      stock_status
      ... on ConfigurableProduct {
        variants {
          attributes {
            uid
            __typename
          }
          product {
            uid
            small_image {
              url
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
    prices {
      price {
        currency
        value
        __typename
      }
      __typename
    }
    quantity
    errors {
      code
      message
      __typename
    }
    ... on ConfigurableCartItem {
      configurable_options {
        id
        configurable_product_option_uid
        option_label
        configurable_product_option_value_uid
        value_label
        __typename
      }
      __typename
    }
    __typename
  }
  __typename
}
    `;
export const CartPageFragmentFragmentDoc = gql`
    fragment CartPageFragment on Cart {
  id
  total_quantity
  ...AppliedCouponsFragment
  ...ProductListingFragment
  __typename
}
    ${AppliedCouponsFragmentFragmentDoc}
${ProductListingFragmentFragmentDoc}`;
export const AvailableShippingMethodsCartFragmentFragmentDoc = gql`
    fragment AvailableShippingMethodsCartFragment on Cart {
  id
  shipping_addresses {
    available_shipping_methods {
      amount {
        currency
        value
        __typename
      }
      available
      carrier_code
      carrier_title
      method_code
      method_title
      __typename
    }
    street
    __typename
  }
  __typename
}
    `;
export const CheckoutPageFragmentFragmentDoc = gql`
    fragment CheckoutPageFragment on Cart {
  id
  items {
    uid
    product {
      uid
      stock_status
      __typename
    }
    __typename
  }
  total_quantity
  available_payment_methods {
    code
    __typename
  }
  __typename
}
    `;
export const ItemsReviewFragmentFragmentDoc = gql`
    fragment ItemsReviewFragment on Cart {
  id
  total_quantity
  items {
    uid
    product {
      uid
      name
      thumbnail {
        url
        __typename
      }
      ... on ConfigurableProduct {
        variants {
          attributes {
            uid
            __typename
          }
          product {
            uid
            thumbnail {
              url
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
    quantity
    ... on ConfigurableCartItem {
      configurable_options {
        configurable_product_option_uid
        option_label
        configurable_product_option_value_uid
        value_label
        __typename
      }
      __typename
    }
    __typename
  }
  __typename
}
    `;
export const OrderConfirmationPageFragmentFragmentDoc = gql`
    fragment OrderConfirmationPageFragment on Cart {
  id
  email
  total_quantity
  shipping_addresses {
    firstname
    lastname
    street
    city
    region {
      label
      __typename
    }
    postcode
    country {
      label
      __typename
    }
    selected_shipping_method {
      carrier_title
      method_title
      __typename
    }
    __typename
  }
  ...ItemsReviewFragment
  __typename
}
    ${ItemsReviewFragmentFragmentDoc}`;
export const CustomerOrdersFragmentFragmentDoc = gql`
    fragment CustomerOrdersFragment on CustomerOrders {
  items {
    billing_address {
      city
      country_code
      firstname
      lastname
      postcode
      region
      street
      telephone
      __typename
    }
    id
    invoices {
      id
      __typename
    }
    items {
      id
      product_name
      product_sale_price {
        currency
        value
        __typename
      }
      product_sku
      product_url_key
      selected_options {
        label
        value
        __typename
      }
      quantity_ordered
      __typename
    }
    number
    order_date
    payment_methods {
      name
      type
      additional_data {
        name
        value
        __typename
      }
      __typename
    }
    shipments {
      id
      tracking {
        number
        __typename
      }
      __typename
    }
    shipping_address {
      city
      country_code
      firstname
      lastname
      postcode
      region
      street
      telephone
      __typename
    }
    shipping_method
    status
    total {
      discounts {
        amount {
          currency
          value
          __typename
        }
        __typename
      }
      grand_total {
        currency
        value
        __typename
      }
      subtotal {
        currency
        value
        __typename
      }
      total_shipping {
        currency
        value
        __typename
      }
      total_tax {
        currency
        value
        __typename
      }
      __typename
    }
    __typename
  }
  page_info {
    current_page
    total_pages
    __typename
  }
  total_count
  __typename
}
    `;
export const AccountInformationPageFragmentFragmentDoc = gql`
    fragment AccountInformationPageFragment on Customer {
  id
  firstname
  lastname
  email
  __typename
}
    `;
export const WishlistPageFragmentFragmentDoc = gql`
    fragment WishlistPageFragment on Wishlist {
  id
  items_count
  sharing_code
  __typename
}
    `;
export const WishlistItemFragmentFragmentDoc = gql`
    fragment WishlistItemFragment on WishlistItemInterface {
  id
  product {
    uid
    image {
      label
      url
      __typename
    }
    name
    price_range {
      maximum_price {
        final_price {
          currency
          value
          __typename
        }
        discount {
          amount_off
          __typename
        }
        __typename
      }
      __typename
    }
    sku
    stock_status
    ... on ConfigurableProduct {
      configurable_options {
        uid
        attribute_code
        attribute_id
        attribute_id_v2
        label
        values {
          uid
          default_label
          label
          store_label
          use_default_value
          value_index
          swatch_data {
            ... on ImageSwatchData {
              thumbnail
              __typename
            }
            value
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
  ... on ConfigurableWishlistItem {
    configurable_options {
      id
      option_label
      value_id
      value_label
      __typename
    }
    __typename
  }
  __typename
}
    `;
export const GetCategoriesShortDocument = gql`
    query getCategoriesShort {
  categories {
    items {
      children {
        name
        uid
        url_key
      }
    }
  }
}
    `;

/**
 * __useGetCategoriesShortQuery__
 *
 * To run a query within a React component, call `useGetCategoriesShortQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCategoriesShortQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCategoriesShortQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCategoriesShortQuery(baseOptions?: Apollo.QueryHookOptions<GetCategoriesShortQuery, GetCategoriesShortQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCategoriesShortQuery, GetCategoriesShortQueryVariables>(GetCategoriesShortDocument, options);
      }
export function useGetCategoriesShortLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCategoriesShortQuery, GetCategoriesShortQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCategoriesShortQuery, GetCategoriesShortQueryVariables>(GetCategoriesShortDocument, options);
        }
export type GetCategoriesShortQueryHookResult = ReturnType<typeof useGetCategoriesShortQuery>;
export type GetCategoriesShortLazyQueryHookResult = ReturnType<typeof useGetCategoriesShortLazyQuery>;
export type GetCategoriesShortQueryResult = Apollo.QueryResult<GetCategoriesShortQuery, GetCategoriesShortQueryVariables>;
export const GetCategoryByUrlKeysDocument = gql`
    query getCategoryByUrlKeys($urlKeys: [String]!) {
  categories(filters: {url_key: {in: $urlKeys}}) {
    items {
      name
      uid
      url_key
      children {
        name
        uid
        url_key
      }
    }
  }
}
    `;

/**
 * __useGetCategoryByUrlKeysQuery__
 *
 * To run a query within a React component, call `useGetCategoryByUrlKeysQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCategoryByUrlKeysQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCategoryByUrlKeysQuery({
 *   variables: {
 *      urlKeys: // value for 'urlKeys'
 *   },
 * });
 */
export function useGetCategoryByUrlKeysQuery(baseOptions: Apollo.QueryHookOptions<GetCategoryByUrlKeysQuery, GetCategoryByUrlKeysQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCategoryByUrlKeysQuery, GetCategoryByUrlKeysQueryVariables>(GetCategoryByUrlKeysDocument, options);
      }
export function useGetCategoryByUrlKeysLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCategoryByUrlKeysQuery, GetCategoryByUrlKeysQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCategoryByUrlKeysQuery, GetCategoryByUrlKeysQueryVariables>(GetCategoryByUrlKeysDocument, options);
        }
export type GetCategoryByUrlKeysQueryHookResult = ReturnType<typeof useGetCategoryByUrlKeysQuery>;
export type GetCategoryByUrlKeysLazyQueryHookResult = ReturnType<typeof useGetCategoryByUrlKeysLazyQuery>;
export type GetCategoryByUrlKeysQueryResult = Apollo.QueryResult<GetCategoryByUrlKeysQuery, GetCategoryByUrlKeysQueryVariables>;
export const GetCategoriesDocument = gql`
    query GetCategories($id: String!, $pageSize: Int!, $currentPage: Int!, $filters: ProductAttributeFilterInput!, $sort: ProductAttributeSortInput) {
  categories(filters: {category_uid: {in: [$id]}}) {
    items {
      uid
      ...CategoryFragment
      __typename
    }
    __typename
  }
  products(
    pageSize: $pageSize
    currentPage: $currentPage
    filter: $filters
    sort: $sort
  ) {
    ...ProductsFragment
    __typename
  }
}
    ${CategoryFragmentFragmentDoc}
${ProductsFragmentFragmentDoc}`;

/**
 * __useGetCategoriesQuery__
 *
 * To run a query within a React component, call `useGetCategoriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCategoriesQuery({
 *   variables: {
 *      id: // value for 'id'
 *      pageSize: // value for 'pageSize'
 *      currentPage: // value for 'currentPage'
 *      filters: // value for 'filters'
 *      sort: // value for 'sort'
 *   },
 * });
 */
export function useGetCategoriesQuery(baseOptions: Apollo.QueryHookOptions<GetCategoriesQuery, GetCategoriesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCategoriesQuery, GetCategoriesQueryVariables>(GetCategoriesDocument, options);
      }
export function useGetCategoriesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCategoriesQuery, GetCategoriesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCategoriesQuery, GetCategoriesQueryVariables>(GetCategoriesDocument, options);
        }
export type GetCategoriesQueryHookResult = ReturnType<typeof useGetCategoriesQuery>;
export type GetCategoriesLazyQueryHookResult = ReturnType<typeof useGetCategoriesLazyQuery>;
export type GetCategoriesQueryResult = Apollo.QueryResult<GetCategoriesQuery, GetCategoriesQueryVariables>;
export const GetProductFiltersByCategoryDocument = gql`
    query getProductFiltersByCategory($categoryIdFilter: FilterEqualTypeInput!) {
  products(filter: {category_uid: $categoryIdFilter}) {
    aggregations {
      label
      count
      attribute_code
      options {
        label
        value
        __typename
      }
      position
      __typename
    }
    __typename
  }
}
    `;

/**
 * __useGetProductFiltersByCategoryQuery__
 *
 * To run a query within a React component, call `useGetProductFiltersByCategoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProductFiltersByCategoryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProductFiltersByCategoryQuery({
 *   variables: {
 *      categoryIdFilter: // value for 'categoryIdFilter'
 *   },
 * });
 */
export function useGetProductFiltersByCategoryQuery(baseOptions: Apollo.QueryHookOptions<GetProductFiltersByCategoryQuery, GetProductFiltersByCategoryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetProductFiltersByCategoryQuery, GetProductFiltersByCategoryQueryVariables>(GetProductFiltersByCategoryDocument, options);
      }
export function useGetProductFiltersByCategoryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductFiltersByCategoryQuery, GetProductFiltersByCategoryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetProductFiltersByCategoryQuery, GetProductFiltersByCategoryQueryVariables>(GetProductFiltersByCategoryDocument, options);
        }
export type GetProductFiltersByCategoryQueryHookResult = ReturnType<typeof useGetProductFiltersByCategoryQuery>;
export type GetProductFiltersByCategoryLazyQueryHookResult = ReturnType<typeof useGetProductFiltersByCategoryLazyQuery>;
export type GetProductFiltersByCategoryQueryResult = Apollo.QueryResult<GetProductFiltersByCategoryQuery, GetProductFiltersByCategoryQueryVariables>;
export const GetCategoryAvailableSortMethodsDocument = gql`
    query getCategoryAvailableSortMethods($categoryIdFilter: FilterEqualTypeInput!) {
  products(filter: {category_uid: $categoryIdFilter}) {
    sort_fields {
      options {
        label
        value
        __typename
      }
      __typename
    }
    __typename
  }
}
    `;

/**
 * __useGetCategoryAvailableSortMethodsQuery__
 *
 * To run a query within a React component, call `useGetCategoryAvailableSortMethodsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCategoryAvailableSortMethodsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCategoryAvailableSortMethodsQuery({
 *   variables: {
 *      categoryIdFilter: // value for 'categoryIdFilter'
 *   },
 * });
 */
export function useGetCategoryAvailableSortMethodsQuery(baseOptions: Apollo.QueryHookOptions<GetCategoryAvailableSortMethodsQuery, GetCategoryAvailableSortMethodsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCategoryAvailableSortMethodsQuery, GetCategoryAvailableSortMethodsQueryVariables>(GetCategoryAvailableSortMethodsDocument, options);
      }
export function useGetCategoryAvailableSortMethodsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCategoryAvailableSortMethodsQuery, GetCategoryAvailableSortMethodsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCategoryAvailableSortMethodsQuery, GetCategoryAvailableSortMethodsQueryVariables>(GetCategoryAvailableSortMethodsDocument, options);
        }
export type GetCategoryAvailableSortMethodsQueryHookResult = ReturnType<typeof useGetCategoryAvailableSortMethodsQuery>;
export type GetCategoryAvailableSortMethodsLazyQueryHookResult = ReturnType<typeof useGetCategoryAvailableSortMethodsLazyQuery>;
export type GetCategoryAvailableSortMethodsQueryResult = Apollo.QueryResult<GetCategoryAvailableSortMethodsQuery, GetCategoryAvailableSortMethodsQueryVariables>;
export const GetFilterInputsForCategoryDocument = gql`
    query GetFilterInputsForCategory {
  __type(name: "ProductAttributeFilterInput") {
    inputFields {
      name
      type {
        name
        __typename
      }
      __typename
    }
    __typename
  }
}
    `;

/**
 * __useGetFilterInputsForCategoryQuery__
 *
 * To run a query within a React component, call `useGetFilterInputsForCategoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFilterInputsForCategoryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFilterInputsForCategoryQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetFilterInputsForCategoryQuery(baseOptions?: Apollo.QueryHookOptions<GetFilterInputsForCategoryQuery, GetFilterInputsForCategoryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetFilterInputsForCategoryQuery, GetFilterInputsForCategoryQueryVariables>(GetFilterInputsForCategoryDocument, options);
      }
export function useGetFilterInputsForCategoryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFilterInputsForCategoryQuery, GetFilterInputsForCategoryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetFilterInputsForCategoryQuery, GetFilterInputsForCategoryQueryVariables>(GetFilterInputsForCategoryDocument, options);
        }
export type GetFilterInputsForCategoryQueryHookResult = ReturnType<typeof useGetFilterInputsForCategoryQuery>;
export type GetFilterInputsForCategoryLazyQueryHookResult = ReturnType<typeof useGetFilterInputsForCategoryLazyQuery>;
export type GetFilterInputsForCategoryQueryResult = Apollo.QueryResult<GetFilterInputsForCategoryQuery, GetFilterInputsForCategoryQueryVariables>;
export const GetFilterInputsForModalDocument = gql`
    query GetFilterInputsForModal {
  __type(name: "ProductAttributeFilterInput") {
    inputFields {
      name
      type {
        name
        __typename
      }
      __typename
    }
    __typename
  }
}
    `;

/**
 * __useGetFilterInputsForModalQuery__
 *
 * To run a query within a React component, call `useGetFilterInputsForModalQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFilterInputsForModalQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFilterInputsForModalQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetFilterInputsForModalQuery(baseOptions?: Apollo.QueryHookOptions<GetFilterInputsForModalQuery, GetFilterInputsForModalQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetFilterInputsForModalQuery, GetFilterInputsForModalQueryVariables>(GetFilterInputsForModalDocument, options);
      }
export function useGetFilterInputsForModalLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFilterInputsForModalQuery, GetFilterInputsForModalQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetFilterInputsForModalQuery, GetFilterInputsForModalQueryVariables>(GetFilterInputsForModalDocument, options);
        }
export type GetFilterInputsForModalQueryHookResult = ReturnType<typeof useGetFilterInputsForModalQuery>;
export type GetFilterInputsForModalLazyQueryHookResult = ReturnType<typeof useGetFilterInputsForModalLazyQuery>;
export type GetFilterInputsForModalQueryResult = Apollo.QueryResult<GetFilterInputsForModalQuery, GetFilterInputsForModalQueryVariables>;
export const SetBillingAddressDocument = gql`
    mutation setBillingAddress($cartId: String!, $firstname: String!, $lastname: String!, $street: [String]!, $city: String!, $regionCode: String!, $postcode: String!, $countryCode: String!, $telephone: String!) {
  setBillingAddressOnCart(
    input: {cart_id: $cartId, billing_address: {address: {firstname: $firstname, lastname: $lastname, street: $street, city: $city, region: $regionCode, postcode: $postcode, country_code: $countryCode, telephone: $telephone, save_in_address_book: false}}}
  ) {
    cart {
      id
      billing_address {
        firstname
        lastname
        country {
          code
          __typename
        }
        street
        city
        region {
          code
          __typename
        }
        postcode
        telephone
        __typename
      }
      ...PriceSummaryFragment
      ...AvailablePaymentMethodsFragment
      __typename
    }
    __typename
  }
}
    ${PriceSummaryFragmentFragmentDoc}
${AvailablePaymentMethodsFragmentFragmentDoc}`;
export type SetBillingAddressMutationFn = Apollo.MutationFunction<SetBillingAddressMutation, SetBillingAddressMutationVariables>;

/**
 * __useSetBillingAddressMutation__
 *
 * To run a mutation, you first call `useSetBillingAddressMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetBillingAddressMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setBillingAddressMutation, { data, loading, error }] = useSetBillingAddressMutation({
 *   variables: {
 *      cartId: // value for 'cartId'
 *      firstname: // value for 'firstname'
 *      lastname: // value for 'lastname'
 *      street: // value for 'street'
 *      city: // value for 'city'
 *      regionCode: // value for 'regionCode'
 *      postcode: // value for 'postcode'
 *      countryCode: // value for 'countryCode'
 *      telephone: // value for 'telephone'
 *   },
 * });
 */
export function useSetBillingAddressMutation(baseOptions?: Apollo.MutationHookOptions<SetBillingAddressMutation, SetBillingAddressMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SetBillingAddressMutation, SetBillingAddressMutationVariables>(SetBillingAddressDocument, options);
      }
export type SetBillingAddressMutationHookResult = ReturnType<typeof useSetBillingAddressMutation>;
export type SetBillingAddressMutationResult = Apollo.MutationResult<SetBillingAddressMutation>;
export type SetBillingAddressMutationOptions = Apollo.BaseMutationOptions<SetBillingAddressMutation, SetBillingAddressMutationVariables>;
export const GetCustomerAddressesDocument = gql`
    query GetCustomerAddresses {
  customer {
    addresses {
      id
      ...CustomerAddressFragment
      __typename
    }
    __typename
  }
}
    ${CustomerAddressFragmentFragmentDoc}`;

/**
 * __useGetCustomerAddressesQuery__
 *
 * To run a query within a React component, call `useGetCustomerAddressesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerAddressesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerAddressesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCustomerAddressesQuery(baseOptions?: Apollo.QueryHookOptions<GetCustomerAddressesQuery, GetCustomerAddressesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCustomerAddressesQuery, GetCustomerAddressesQueryVariables>(GetCustomerAddressesDocument, options);
      }
export function useGetCustomerAddressesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCustomerAddressesQuery, GetCustomerAddressesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCustomerAddressesQuery, GetCustomerAddressesQueryVariables>(GetCustomerAddressesDocument, options);
        }
export type GetCustomerAddressesQueryHookResult = ReturnType<typeof useGetCustomerAddressesQuery>;
export type GetCustomerAddressesLazyQueryHookResult = ReturnType<typeof useGetCustomerAddressesLazyQuery>;
export type GetCustomerAddressesQueryResult = Apollo.QueryResult<GetCustomerAddressesQuery, GetCustomerAddressesQueryVariables>;
export const CreateCustomerAddressDocument = gql`
    mutation CreateCustomerAddress($address: CustomerAddressInput!) {
  createCustomerAddress(input: $address) {
    id
    ...CustomerAddressFragment
    __typename
  }
}
    ${CustomerAddressFragmentFragmentDoc}`;
export type CreateCustomerAddressMutationFn = Apollo.MutationFunction<CreateCustomerAddressMutation, CreateCustomerAddressMutationVariables>;

/**
 * __useCreateCustomerAddressMutation__
 *
 * To run a mutation, you first call `useCreateCustomerAddressMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCustomerAddressMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCustomerAddressMutation, { data, loading, error }] = useCreateCustomerAddressMutation({
 *   variables: {
 *      address: // value for 'address'
 *   },
 * });
 */
export function useCreateCustomerAddressMutation(baseOptions?: Apollo.MutationHookOptions<CreateCustomerAddressMutation, CreateCustomerAddressMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCustomerAddressMutation, CreateCustomerAddressMutationVariables>(CreateCustomerAddressDocument, options);
      }
export type CreateCustomerAddressMutationHookResult = ReturnType<typeof useCreateCustomerAddressMutation>;
export type CreateCustomerAddressMutationResult = Apollo.MutationResult<CreateCustomerAddressMutation>;
export type CreateCustomerAddressMutationOptions = Apollo.BaseMutationOptions<CreateCustomerAddressMutation, CreateCustomerAddressMutationVariables>;
export const UpdateCustomerAddressDocument = gql`
    mutation UpdateCustomerAddress($addressId: Int!, $address: CustomerAddressInput!) {
  updateCustomerAddress(id: $addressId, input: $address) {
    id
    __typename
  }
}
    `;
export type UpdateCustomerAddressMutationFn = Apollo.MutationFunction<UpdateCustomerAddressMutation, UpdateCustomerAddressMutationVariables>;

/**
 * __useUpdateCustomerAddressMutation__
 *
 * To run a mutation, you first call `useUpdateCustomerAddressMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCustomerAddressMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCustomerAddressMutation, { data, loading, error }] = useUpdateCustomerAddressMutation({
 *   variables: {
 *      addressId: // value for 'addressId'
 *      address: // value for 'address'
 *   },
 * });
 */
export function useUpdateCustomerAddressMutation(baseOptions?: Apollo.MutationHookOptions<UpdateCustomerAddressMutation, UpdateCustomerAddressMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateCustomerAddressMutation, UpdateCustomerAddressMutationVariables>(UpdateCustomerAddressDocument, options);
      }
export type UpdateCustomerAddressMutationHookResult = ReturnType<typeof useUpdateCustomerAddressMutation>;
export type UpdateCustomerAddressMutationResult = Apollo.MutationResult<UpdateCustomerAddressMutation>;
export type UpdateCustomerAddressMutationOptions = Apollo.BaseMutationOptions<UpdateCustomerAddressMutation, UpdateCustomerAddressMutationVariables>;
export const GetCustomerCartAddressDocument = gql`
    query GetCustomerCartAddress {
  customerCart {
    id
    ...ShippingInformationFragment
    __typename
  }
}
    ${ShippingInformationFragmentFragmentDoc}`;

/**
 * __useGetCustomerCartAddressQuery__
 *
 * To run a query within a React component, call `useGetCustomerCartAddressQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerCartAddressQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerCartAddressQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCustomerCartAddressQuery(baseOptions?: Apollo.QueryHookOptions<GetCustomerCartAddressQuery, GetCustomerCartAddressQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCustomerCartAddressQuery, GetCustomerCartAddressQueryVariables>(GetCustomerCartAddressDocument, options);
      }
export function useGetCustomerCartAddressLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCustomerCartAddressQuery, GetCustomerCartAddressQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCustomerCartAddressQuery, GetCustomerCartAddressQueryVariables>(GetCustomerCartAddressDocument, options);
        }
export type GetCustomerCartAddressQueryHookResult = ReturnType<typeof useGetCustomerCartAddressQuery>;
export type GetCustomerCartAddressLazyQueryHookResult = ReturnType<typeof useGetCustomerCartAddressLazyQuery>;
export type GetCustomerCartAddressQueryResult = Apollo.QueryResult<GetCustomerCartAddressQuery, GetCustomerCartAddressQueryVariables>;
export const SetCustomerAddressOnCartDocument = gql`
    mutation SetCustomerAddressOnCart($cartId: String!, $addressId: Int!) {
  setShippingAddressesOnCart(
    input: {cart_id: $cartId, shipping_addresses: [{customer_address_id: $addressId}]}
  ) {
    cart {
      id
      ...ShippingInformationFragment
      ...ShippingMethodsCheckoutFragment
      ...PriceSummaryFragment
      ...AvailablePaymentMethodsFragment
      __typename
    }
    __typename
  }
}
    ${ShippingInformationFragmentFragmentDoc}
${ShippingMethodsCheckoutFragmentFragmentDoc}
${PriceSummaryFragmentFragmentDoc}
${AvailablePaymentMethodsFragmentFragmentDoc}`;
export type SetCustomerAddressOnCartMutationFn = Apollo.MutationFunction<SetCustomerAddressOnCartMutation, SetCustomerAddressOnCartMutationVariables>;

/**
 * __useSetCustomerAddressOnCartMutation__
 *
 * To run a mutation, you first call `useSetCustomerAddressOnCartMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetCustomerAddressOnCartMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setCustomerAddressOnCartMutation, { data, loading, error }] = useSetCustomerAddressOnCartMutation({
 *   variables: {
 *      cartId: // value for 'cartId'
 *      addressId: // value for 'addressId'
 *   },
 * });
 */
export function useSetCustomerAddressOnCartMutation(baseOptions?: Apollo.MutationHookOptions<SetCustomerAddressOnCartMutation, SetCustomerAddressOnCartMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SetCustomerAddressOnCartMutation, SetCustomerAddressOnCartMutationVariables>(SetCustomerAddressOnCartDocument, options);
      }
export type SetCustomerAddressOnCartMutationHookResult = ReturnType<typeof useSetCustomerAddressOnCartMutation>;
export type SetCustomerAddressOnCartMutationResult = Apollo.MutationResult<SetCustomerAddressOnCartMutation>;
export type SetCustomerAddressOnCartMutationOptions = Apollo.BaseMutationOptions<SetCustomerAddressOnCartMutation, SetCustomerAddressOnCartMutationVariables>;
export const GetItemCountDocument = gql`
    query getItemCount($cartId: String!) {
  cart(cart_id: $cartId) {
    id
    ...CartTriggerFragment
    __typename
  }
}
    ${CartTriggerFragmentFragmentDoc}`;

/**
 * __useGetItemCountQuery__
 *
 * To run a query within a React component, call `useGetItemCountQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetItemCountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetItemCountQuery({
 *   variables: {
 *      cartId: // value for 'cartId'
 *   },
 * });
 */
export function useGetItemCountQuery(baseOptions: Apollo.QueryHookOptions<GetItemCountQuery, GetItemCountQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetItemCountQuery, GetItemCountQueryVariables>(GetItemCountDocument, options);
      }
export function useGetItemCountLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetItemCountQuery, GetItemCountQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetItemCountQuery, GetItemCountQueryVariables>(GetItemCountDocument, options);
        }
export type GetItemCountQueryHookResult = ReturnType<typeof useGetItemCountQuery>;
export type GetItemCountLazyQueryHookResult = ReturnType<typeof useGetItemCountLazyQuery>;
export type GetItemCountQueryResult = Apollo.QueryResult<GetItemCountQuery, GetItemCountQueryVariables>;
export const CreateCartDocument = gql`
    mutation createCart {
  cartId: createEmptyCart
}
    `;
export type CreateCartMutationFn = Apollo.MutationFunction<CreateCartMutation, CreateCartMutationVariables>;

/**
 * __useCreateCartMutation__
 *
 * To run a mutation, you first call `useCreateCartMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCartMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCartMutation, { data, loading, error }] = useCreateCartMutation({
 *   variables: {
 *   },
 * });
 */
export function useCreateCartMutation(baseOptions?: Apollo.MutationHookOptions<CreateCartMutation, CreateCartMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCartMutation, CreateCartMutationVariables>(CreateCartDocument, options);
      }
export type CreateCartMutationHookResult = ReturnType<typeof useCreateCartMutation>;
export type CreateCartMutationResult = Apollo.MutationResult<CreateCartMutation>;
export type CreateCartMutationOptions = Apollo.BaseMutationOptions<CreateCartMutation, CreateCartMutationVariables>;
export const MiniCartQueryDocument = gql`
    query MiniCartQuery($cartId: String!) {
  cart(cart_id: $cartId) {
    id
    ...MiniCartFragment
    __typename
  }
}
    ${MiniCartFragmentFragmentDoc}`;

/**
 * __useMiniCartQueryQuery__
 *
 * To run a query within a React component, call `useMiniCartQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useMiniCartQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMiniCartQueryQuery({
 *   variables: {
 *      cartId: // value for 'cartId'
 *   },
 * });
 */
export function useMiniCartQueryQuery(baseOptions: Apollo.QueryHookOptions<MiniCartQueryQuery, MiniCartQueryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MiniCartQueryQuery, MiniCartQueryQueryVariables>(MiniCartQueryDocument, options);
      }
export function useMiniCartQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MiniCartQueryQuery, MiniCartQueryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MiniCartQueryQuery, MiniCartQueryQueryVariables>(MiniCartQueryDocument, options);
        }
export type MiniCartQueryQueryHookResult = ReturnType<typeof useMiniCartQueryQuery>;
export type MiniCartQueryLazyQueryHookResult = ReturnType<typeof useMiniCartQueryLazyQuery>;
export type MiniCartQueryQueryResult = Apollo.QueryResult<MiniCartQueryQuery, MiniCartQueryQueryVariables>;
export const GetItemsInCartDocument = gql`
    query getItemsInCart($cartId: String!) {
  cart(cart_id: $cartId) {
    id
    ...ItemsReviewFragment
    __typename
  }
}
    ${ItemsReviewFragmentFragmentDoc}`;

/**
 * __useGetItemsInCartQuery__
 *
 * To run a query within a React component, call `useGetItemsInCartQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetItemsInCartQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetItemsInCartQuery({
 *   variables: {
 *      cartId: // value for 'cartId'
 *   },
 * });
 */
export function useGetItemsInCartQuery(baseOptions: Apollo.QueryHookOptions<GetItemsInCartQuery, GetItemsInCartQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetItemsInCartQuery, GetItemsInCartQueryVariables>(GetItemsInCartDocument, options);
      }
export function useGetItemsInCartLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetItemsInCartQuery, GetItemsInCartQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetItemsInCartQuery, GetItemsInCartQueryVariables>(GetItemsInCartDocument, options);
        }
export type GetItemsInCartQueryHookResult = ReturnType<typeof useGetItemsInCartQuery>;
export type GetItemsInCartLazyQueryHookResult = ReturnType<typeof useGetItemsInCartLazyQuery>;
export type GetItemsInCartQueryResult = Apollo.QueryResult<GetItemsInCartQuery, GetItemsInCartQueryVariables>;
export const AddProductToCartDocument = gql`
    mutation AddProductToCart($cartId: String!, $product: CartItemInput!) {
  addProductsToCart(cartId: $cartId, cartItems: [$product]) {
    cart {
      id
      ...CartTriggerFragment
      ...MiniCartFragment
      __typename
    }
    __typename
  }
}
    ${CartTriggerFragmentFragmentDoc}
${MiniCartFragmentFragmentDoc}`;
export type AddProductToCartMutationFn = Apollo.MutationFunction<AddProductToCartMutation, AddProductToCartMutationVariables>;

/**
 * __useAddProductToCartMutation__
 *
 * To run a mutation, you first call `useAddProductToCartMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddProductToCartMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addProductToCartMutation, { data, loading, error }] = useAddProductToCartMutation({
 *   variables: {
 *      cartId: // value for 'cartId'
 *      product: // value for 'product'
 *   },
 * });
 */
export function useAddProductToCartMutation(baseOptions?: Apollo.MutationHookOptions<AddProductToCartMutation, AddProductToCartMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AddProductToCartMutation, AddProductToCartMutationVariables>(AddProductToCartDocument, options);
      }
export type AddProductToCartMutationHookResult = ReturnType<typeof useAddProductToCartMutation>;
export type AddProductToCartMutationResult = Apollo.MutationResult<AddProductToCartMutation>;
export type AddProductToCartMutationOptions = Apollo.BaseMutationOptions<AddProductToCartMutation, AddProductToCartMutationVariables>;
export const UpdateItemQuantityDocument = gql`
    mutation updateItemQuantity($cartId: String!, $itemId: ID!, $quantity: Float!) {
  updateCartItems(
    input: {cart_id: $cartId, cart_items: [{cart_item_uid: $itemId, quantity: $quantity}]}
  ) {
    cart {
      id
      ...CartPageFragment
      ...AvailableShippingMethodsCartFragment
      __typename
    }
    __typename
  }
}
    ${CartPageFragmentFragmentDoc}
${AvailableShippingMethodsCartFragmentFragmentDoc}`;
export type UpdateItemQuantityMutationFn = Apollo.MutationFunction<UpdateItemQuantityMutation, UpdateItemQuantityMutationVariables>;

/**
 * __useUpdateItemQuantityMutation__
 *
 * To run a mutation, you first call `useUpdateItemQuantityMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateItemQuantityMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateItemQuantityMutation, { data, loading, error }] = useUpdateItemQuantityMutation({
 *   variables: {
 *      cartId: // value for 'cartId'
 *      itemId: // value for 'itemId'
 *      quantity: // value for 'quantity'
 *   },
 * });
 */
export function useUpdateItemQuantityMutation(baseOptions?: Apollo.MutationHookOptions<UpdateItemQuantityMutation, UpdateItemQuantityMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateItemQuantityMutation, UpdateItemQuantityMutationVariables>(UpdateItemQuantityDocument, options);
      }
export type UpdateItemQuantityMutationHookResult = ReturnType<typeof useUpdateItemQuantityMutation>;
export type UpdateItemQuantityMutationResult = Apollo.MutationResult<UpdateItemQuantityMutation>;
export type UpdateItemQuantityMutationOptions = Apollo.BaseMutationOptions<UpdateItemQuantityMutation, UpdateItemQuantityMutationVariables>;
export const CheckUserIsAuthedDocument = gql`
    query checkUserIsAuthed($cartId: String!) {
  cart(cart_id: $cartId) {
    id
    __typename
  }
}
    `;

/**
 * __useCheckUserIsAuthedQuery__
 *
 * To run a query within a React component, call `useCheckUserIsAuthedQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckUserIsAuthedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckUserIsAuthedQuery({
 *   variables: {
 *      cartId: // value for 'cartId'
 *   },
 * });
 */
export function useCheckUserIsAuthedQuery(baseOptions: Apollo.QueryHookOptions<CheckUserIsAuthedQuery, CheckUserIsAuthedQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CheckUserIsAuthedQuery, CheckUserIsAuthedQueryVariables>(CheckUserIsAuthedDocument, options);
      }
export function useCheckUserIsAuthedLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CheckUserIsAuthedQuery, CheckUserIsAuthedQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CheckUserIsAuthedQuery, CheckUserIsAuthedQueryVariables>(CheckUserIsAuthedDocument, options);
        }
export type CheckUserIsAuthedQueryHookResult = ReturnType<typeof useCheckUserIsAuthedQuery>;
export type CheckUserIsAuthedLazyQueryHookResult = ReturnType<typeof useCheckUserIsAuthedLazyQuery>;
export type CheckUserIsAuthedQueryResult = Apollo.QueryResult<CheckUserIsAuthedQuery, CheckUserIsAuthedQueryVariables>;
export const CreateAccountAfterCheckoutDocument = gql`
    mutation CreateAccountAfterCheckout($email: String!, $firstname: String!, $lastname: String!, $password: String!, $is_subscribed: Boolean!) {
  createCustomer(
    input: {email: $email, firstname: $firstname, lastname: $lastname, password: $password, is_subscribed: $is_subscribed}
  ) {
    customer {
      email
      __typename
    }
    __typename
  }
}
    `;
export type CreateAccountAfterCheckoutMutationFn = Apollo.MutationFunction<CreateAccountAfterCheckoutMutation, CreateAccountAfterCheckoutMutationVariables>;

/**
 * __useCreateAccountAfterCheckoutMutation__
 *
 * To run a mutation, you first call `useCreateAccountAfterCheckoutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAccountAfterCheckoutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAccountAfterCheckoutMutation, { data, loading, error }] = useCreateAccountAfterCheckoutMutation({
 *   variables: {
 *      email: // value for 'email'
 *      firstname: // value for 'firstname'
 *      lastname: // value for 'lastname'
 *      password: // value for 'password'
 *      is_subscribed: // value for 'is_subscribed'
 *   },
 * });
 */
export function useCreateAccountAfterCheckoutMutation(baseOptions?: Apollo.MutationHookOptions<CreateAccountAfterCheckoutMutation, CreateAccountAfterCheckoutMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateAccountAfterCheckoutMutation, CreateAccountAfterCheckoutMutationVariables>(CreateAccountAfterCheckoutDocument, options);
      }
export type CreateAccountAfterCheckoutMutationHookResult = ReturnType<typeof useCreateAccountAfterCheckoutMutation>;
export type CreateAccountAfterCheckoutMutationResult = Apollo.MutationResult<CreateAccountAfterCheckoutMutation>;
export type CreateAccountAfterCheckoutMutationOptions = Apollo.BaseMutationOptions<CreateAccountAfterCheckoutMutation, CreateAccountAfterCheckoutMutationVariables>;
export const SignInAfterCheckoutDocument = gql`
    mutation SignInAfterCheckout($email: String!, $password: String!) {
  generateCustomerToken(email: $email, password: $password) {
    token
    __typename
  }
}
    `;
export type SignInAfterCheckoutMutationFn = Apollo.MutationFunction<SignInAfterCheckoutMutation, SignInAfterCheckoutMutationVariables>;

/**
 * __useSignInAfterCheckoutMutation__
 *
 * To run a mutation, you first call `useSignInAfterCheckoutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSignInAfterCheckoutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signInAfterCheckoutMutation, { data, loading, error }] = useSignInAfterCheckoutMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useSignInAfterCheckoutMutation(baseOptions?: Apollo.MutationHookOptions<SignInAfterCheckoutMutation, SignInAfterCheckoutMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SignInAfterCheckoutMutation, SignInAfterCheckoutMutationVariables>(SignInAfterCheckoutDocument, options);
      }
export type SignInAfterCheckoutMutationHookResult = ReturnType<typeof useSignInAfterCheckoutMutation>;
export type SignInAfterCheckoutMutationResult = Apollo.MutationResult<SignInAfterCheckoutMutation>;
export type SignInAfterCheckoutMutationOptions = Apollo.BaseMutationOptions<SignInAfterCheckoutMutation, SignInAfterCheckoutMutationVariables>;
export const AccountChipQueryDocument = gql`
    query accountChipQuery {
  customer {
    firstname
    __typename
  }
}
    `;

/**
 * __useAccountChipQueryQuery__
 *
 * To run a query within a React component, call `useAccountChipQueryQuery` and pass it any options that fit your needs.
 * When your component renders, `useAccountChipQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAccountChipQueryQuery({
 *   variables: {
 *   },
 * });
 */
export function useAccountChipQueryQuery(baseOptions?: Apollo.QueryHookOptions<AccountChipQueryQuery, AccountChipQueryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AccountChipQueryQuery, AccountChipQueryQueryVariables>(AccountChipQueryDocument, options);
      }
export function useAccountChipQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AccountChipQueryQuery, AccountChipQueryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AccountChipQueryQuery, AccountChipQueryQueryVariables>(AccountChipQueryDocument, options);
        }
export type AccountChipQueryQueryHookResult = ReturnType<typeof useAccountChipQueryQuery>;
export type AccountChipQueryLazyQueryHookResult = ReturnType<typeof useAccountChipQueryLazyQuery>;
export type AccountChipQueryQueryResult = Apollo.QueryResult<AccountChipQueryQuery, AccountChipQueryQueryVariables>;
export const GetCustomerForCheckoutDocument = gql`
    query GetCustomerForCheckout {
  customer {
    default_shipping
    firstname
    __typename
  }
}
    `;

/**
 * __useGetCustomerForCheckoutQuery__
 *
 * To run a query within a React component, call `useGetCustomerForCheckoutQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerForCheckoutQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerForCheckoutQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCustomerForCheckoutQuery(baseOptions?: Apollo.QueryHookOptions<GetCustomerForCheckoutQuery, GetCustomerForCheckoutQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCustomerForCheckoutQuery, GetCustomerForCheckoutQueryVariables>(GetCustomerForCheckoutDocument, options);
      }
export function useGetCustomerForCheckoutLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCustomerForCheckoutQuery, GetCustomerForCheckoutQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCustomerForCheckoutQuery, GetCustomerForCheckoutQueryVariables>(GetCustomerForCheckoutDocument, options);
        }
export type GetCustomerForCheckoutQueryHookResult = ReturnType<typeof useGetCustomerForCheckoutQuery>;
export type GetCustomerForCheckoutLazyQueryHookResult = ReturnType<typeof useGetCustomerForCheckoutLazyQuery>;
export type GetCustomerForCheckoutQueryResult = Apollo.QueryResult<GetCustomerForCheckoutQuery, GetCustomerForCheckoutQueryVariables>;
export const CreateCartAfterCheckoutDocument = gql`
    mutation CreateCartAfterCheckout {
  cartId: createEmptyCart
}
    `;
export type CreateCartAfterCheckoutMutationFn = Apollo.MutationFunction<CreateCartAfterCheckoutMutation, CreateCartAfterCheckoutMutationVariables>;

/**
 * __useCreateCartAfterCheckoutMutation__
 *
 * To run a mutation, you first call `useCreateCartAfterCheckoutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCartAfterCheckoutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCartAfterCheckoutMutation, { data, loading, error }] = useCreateCartAfterCheckoutMutation({
 *   variables: {
 *   },
 * });
 */
export function useCreateCartAfterCheckoutMutation(baseOptions?: Apollo.MutationHookOptions<CreateCartAfterCheckoutMutation, CreateCartAfterCheckoutMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCartAfterCheckoutMutation, CreateCartAfterCheckoutMutationVariables>(CreateCartAfterCheckoutDocument, options);
      }
export type CreateCartAfterCheckoutMutationHookResult = ReturnType<typeof useCreateCartAfterCheckoutMutation>;
export type CreateCartAfterCheckoutMutationResult = Apollo.MutationResult<CreateCartAfterCheckoutMutation>;
export type CreateCartAfterCheckoutMutationOptions = Apollo.BaseMutationOptions<CreateCartAfterCheckoutMutation, CreateCartAfterCheckoutMutationVariables>;
export const GetCartDetailsAfterCheckoutDocument = gql`
    query GetCartDetailsAfterCheckout($cartId: String!) {
  cart(cart_id: $cartId) {
    id
    items {
      uid
      prices {
        price {
          value
          __typename
        }
        __typename
      }
      product {
        uid
        name
        sku
        small_image {
          url
          label
          __typename
        }
        price {
          regularPrice {
            amount {
              value
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      quantity
      ... on ConfigurableCartItem {
        configurable_options {
          configurable_product_option_uid
          option_label
          configurable_product_option_value_uid
          value_label
          __typename
        }
        __typename
      }
      __typename
    }
    prices {
      grand_total {
        value
        currency
        __typename
      }
      __typename
    }
    __typename
  }
}
    `;

/**
 * __useGetCartDetailsAfterCheckoutQuery__
 *
 * To run a query within a React component, call `useGetCartDetailsAfterCheckoutQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCartDetailsAfterCheckoutQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCartDetailsAfterCheckoutQuery({
 *   variables: {
 *      cartId: // value for 'cartId'
 *   },
 * });
 */
export function useGetCartDetailsAfterCheckoutQuery(baseOptions: Apollo.QueryHookOptions<GetCartDetailsAfterCheckoutQuery, GetCartDetailsAfterCheckoutQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCartDetailsAfterCheckoutQuery, GetCartDetailsAfterCheckoutQueryVariables>(GetCartDetailsAfterCheckoutDocument, options);
      }
export function useGetCartDetailsAfterCheckoutLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCartDetailsAfterCheckoutQuery, GetCartDetailsAfterCheckoutQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCartDetailsAfterCheckoutQuery, GetCartDetailsAfterCheckoutQueryVariables>(GetCartDetailsAfterCheckoutDocument, options);
        }
export type GetCartDetailsAfterCheckoutQueryHookResult = ReturnType<typeof useGetCartDetailsAfterCheckoutQuery>;
export type GetCartDetailsAfterCheckoutLazyQueryHookResult = ReturnType<typeof useGetCartDetailsAfterCheckoutLazyQuery>;
export type GetCartDetailsAfterCheckoutQueryResult = Apollo.QueryResult<GetCartDetailsAfterCheckoutQuery, GetCartDetailsAfterCheckoutQueryVariables>;
export const GetCustomerAfterCheckoutDocument = gql`
    query GetCustomerAfterCheckout {
  customer {
    email
    firstname
    lastname
    is_subscribed
    __typename
  }
}
    `;

/**
 * __useGetCustomerAfterCheckoutQuery__
 *
 * To run a query within a React component, call `useGetCustomerAfterCheckoutQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerAfterCheckoutQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerAfterCheckoutQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCustomerAfterCheckoutQuery(baseOptions?: Apollo.QueryHookOptions<GetCustomerAfterCheckoutQuery, GetCustomerAfterCheckoutQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCustomerAfterCheckoutQuery, GetCustomerAfterCheckoutQueryVariables>(GetCustomerAfterCheckoutDocument, options);
      }
export function useGetCustomerAfterCheckoutLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCustomerAfterCheckoutQuery, GetCustomerAfterCheckoutQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCustomerAfterCheckoutQuery, GetCustomerAfterCheckoutQueryVariables>(GetCustomerAfterCheckoutDocument, options);
        }
export type GetCustomerAfterCheckoutQueryHookResult = ReturnType<typeof useGetCustomerAfterCheckoutQuery>;
export type GetCustomerAfterCheckoutLazyQueryHookResult = ReturnType<typeof useGetCustomerAfterCheckoutLazyQuery>;
export type GetCustomerAfterCheckoutQueryResult = Apollo.QueryResult<GetCustomerAfterCheckoutQuery, GetCustomerAfterCheckoutQueryVariables>;
export const SetGuestShippingDocument = gql`
    mutation SetGuestShipping($cartId: String!, $email: String!, $address: CartAddressInput!) {
  setGuestEmailOnCart(input: {cart_id: $cartId, email: $email}) {
    cart {
      id
      __typename
    }
    __typename
  }
  setShippingAddressesOnCart(
    input: {cart_id: $cartId, shipping_addresses: [{address: $address}]}
  ) {
    cart {
      id
      ...ShippingInformationFragment
      ...ShippingMethodsCheckoutFragment
      ...PriceSummaryFragment
      ...AvailablePaymentMethodsFragment
      __typename
    }
    __typename
  }
}
    ${ShippingInformationFragmentFragmentDoc}
${ShippingMethodsCheckoutFragmentFragmentDoc}
${PriceSummaryFragmentFragmentDoc}
${AvailablePaymentMethodsFragmentFragmentDoc}`;
export type SetGuestShippingMutationFn = Apollo.MutationFunction<SetGuestShippingMutation, SetGuestShippingMutationVariables>;

/**
 * __useSetGuestShippingMutation__
 *
 * To run a mutation, you first call `useSetGuestShippingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetGuestShippingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setGuestShippingMutation, { data, loading, error }] = useSetGuestShippingMutation({
 *   variables: {
 *      cartId: // value for 'cartId'
 *      email: // value for 'email'
 *      address: // value for 'address'
 *   },
 * });
 */
export function useSetGuestShippingMutation(baseOptions?: Apollo.MutationHookOptions<SetGuestShippingMutation, SetGuestShippingMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SetGuestShippingMutation, SetGuestShippingMutationVariables>(SetGuestShippingDocument, options);
      }
export type SetGuestShippingMutationHookResult = ReturnType<typeof useSetGuestShippingMutation>;
export type SetGuestShippingMutationResult = Apollo.MutationResult<SetGuestShippingMutation>;
export type SetGuestShippingMutationOptions = Apollo.BaseMutationOptions<SetGuestShippingMutation, SetGuestShippingMutationVariables>;
export const GetOrderDetailsDocument = gql`
    query getOrderDetails($cartId: String!) {
  cart(cart_id: $cartId) {
    id
    ...OrderConfirmationPageFragment
    __typename
  }
}
    ${OrderConfirmationPageFragmentFragmentDoc}`;

/**
 * __useGetOrderDetailsQuery__
 *
 * To run a query within a React component, call `useGetOrderDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOrderDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOrderDetailsQuery({
 *   variables: {
 *      cartId: // value for 'cartId'
 *   },
 * });
 */
export function useGetOrderDetailsQuery(baseOptions: Apollo.QueryHookOptions<GetOrderDetailsQuery, GetOrderDetailsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetOrderDetailsQuery, GetOrderDetailsQueryVariables>(GetOrderDetailsDocument, options);
      }
export function useGetOrderDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOrderDetailsQuery, GetOrderDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetOrderDetailsQuery, GetOrderDetailsQueryVariables>(GetOrderDetailsDocument, options);
        }
export type GetOrderDetailsQueryHookResult = ReturnType<typeof useGetOrderDetailsQuery>;
export type GetOrderDetailsLazyQueryHookResult = ReturnType<typeof useGetOrderDetailsLazyQuery>;
export type GetOrderDetailsQueryResult = Apollo.QueryResult<GetOrderDetailsQuery, GetOrderDetailsQueryVariables>;
export const GetCheckoutDetailsDocument = gql`
    query getCheckoutDetails($cartId: String!) {
  cart(cart_id: $cartId) {
    id
    ...CheckoutPageFragment
    ...ItemsReviewFragment
    __typename
  }
}
    ${CheckoutPageFragmentFragmentDoc}
${ItemsReviewFragmentFragmentDoc}`;

/**
 * __useGetCheckoutDetailsQuery__
 *
 * To run a query within a React component, call `useGetCheckoutDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCheckoutDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCheckoutDetailsQuery({
 *   variables: {
 *      cartId: // value for 'cartId'
 *   },
 * });
 */
export function useGetCheckoutDetailsQuery(baseOptions: Apollo.QueryHookOptions<GetCheckoutDetailsQuery, GetCheckoutDetailsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCheckoutDetailsQuery, GetCheckoutDetailsQueryVariables>(GetCheckoutDetailsDocument, options);
      }
export function useGetCheckoutDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCheckoutDetailsQuery, GetCheckoutDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCheckoutDetailsQuery, GetCheckoutDetailsQueryVariables>(GetCheckoutDetailsDocument, options);
        }
export type GetCheckoutDetailsQueryHookResult = ReturnType<typeof useGetCheckoutDetailsQuery>;
export type GetCheckoutDetailsLazyQueryHookResult = ReturnType<typeof useGetCheckoutDetailsLazyQuery>;
export type GetCheckoutDetailsQueryResult = Apollo.QueryResult<GetCheckoutDetailsQuery, GetCheckoutDetailsQueryVariables>;
export const PlaceOrderDocument = gql`
    mutation placeOrder($cartId: String!) {
  placeOrder(input: {cart_id: $cartId}) {
    order {
      order_number
      __typename
    }
    __typename
  }
}
    `;
export type PlaceOrderMutationFn = Apollo.MutationFunction<PlaceOrderMutation, PlaceOrderMutationVariables>;

/**
 * __usePlaceOrderMutation__
 *
 * To run a mutation, you first call `usePlaceOrderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `usePlaceOrderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [placeOrderMutation, { data, loading, error }] = usePlaceOrderMutation({
 *   variables: {
 *      cartId: // value for 'cartId'
 *   },
 * });
 */
export function usePlaceOrderMutation(baseOptions?: Apollo.MutationHookOptions<PlaceOrderMutation, PlaceOrderMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<PlaceOrderMutation, PlaceOrderMutationVariables>(PlaceOrderDocument, options);
      }
export type PlaceOrderMutationHookResult = ReturnType<typeof usePlaceOrderMutation>;
export type PlaceOrderMutationResult = Apollo.MutationResult<PlaceOrderMutation>;
export type PlaceOrderMutationOptions = Apollo.BaseMutationOptions<PlaceOrderMutation, PlaceOrderMutationVariables>;
export const SetPaymentMethodOnCartDocument = gql`
    mutation setPaymentMethodOnCart($cartId: String!, $paymentMethod: String!) {
  setPaymentMethodOnCart(
    input: {cart_id: $cartId, payment_method: {code: $paymentMethod}}
  ) {
    cart {
      id
      selected_payment_method {
        code
        title
        __typename
      }
      __typename
    }
    __typename
  }
}
    `;
export type SetPaymentMethodOnCartMutationFn = Apollo.MutationFunction<SetPaymentMethodOnCartMutation, SetPaymentMethodOnCartMutationVariables>;

/**
 * __useSetPaymentMethodOnCartMutation__
 *
 * To run a mutation, you first call `useSetPaymentMethodOnCartMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetPaymentMethodOnCartMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setPaymentMethodOnCartMutation, { data, loading, error }] = useSetPaymentMethodOnCartMutation({
 *   variables: {
 *      cartId: // value for 'cartId'
 *      paymentMethod: // value for 'paymentMethod'
 *   },
 * });
 */
export function useSetPaymentMethodOnCartMutation(baseOptions?: Apollo.MutationHookOptions<SetPaymentMethodOnCartMutation, SetPaymentMethodOnCartMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SetPaymentMethodOnCartMutation, SetPaymentMethodOnCartMutationVariables>(SetPaymentMethodOnCartDocument, options);
      }
export type SetPaymentMethodOnCartMutationHookResult = ReturnType<typeof useSetPaymentMethodOnCartMutation>;
export type SetPaymentMethodOnCartMutationResult = Apollo.MutationResult<SetPaymentMethodOnCartMutation>;
export type SetPaymentMethodOnCartMutationOptions = Apollo.BaseMutationOptions<SetPaymentMethodOnCartMutation, SetPaymentMethodOnCartMutationVariables>;
export const GetPaymentInformationDocument = gql`
    query getPaymentInformation($cartId: String!) {
  cart(cart_id: $cartId) {
    id
    selected_payment_method {
      code
      __typename
    }
    shipping_addresses {
      firstname
      lastname
      street
      city
      region {
        code
        __typename
      }
      postcode
      country {
        code
        __typename
      }
      telephone
      __typename
    }
    ...AvailablePaymentMethodsFragment
    __typename
  }
}
    ${AvailablePaymentMethodsFragmentFragmentDoc}`;

/**
 * __useGetPaymentInformationQuery__
 *
 * To run a query within a React component, call `useGetPaymentInformationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPaymentInformationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPaymentInformationQuery({
 *   variables: {
 *      cartId: // value for 'cartId'
 *   },
 * });
 */
export function useGetPaymentInformationQuery(baseOptions: Apollo.QueryHookOptions<GetPaymentInformationQuery, GetPaymentInformationQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPaymentInformationQuery, GetPaymentInformationQueryVariables>(GetPaymentInformationDocument, options);
      }
export function useGetPaymentInformationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPaymentInformationQuery, GetPaymentInformationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPaymentInformationQuery, GetPaymentInformationQueryVariables>(GetPaymentInformationDocument, options);
        }
export type GetPaymentInformationQueryHookResult = ReturnType<typeof useGetPaymentInformationQuery>;
export type GetPaymentInformationLazyQueryHookResult = ReturnType<typeof useGetPaymentInformationLazyQuery>;
export type GetPaymentInformationQueryResult = Apollo.QueryResult<GetPaymentInformationQuery, GetPaymentInformationQueryVariables>;
export const GetPriceSummaryDocument = gql`
    query getPriceSummary($cartId: String!) {
  cart(cart_id: $cartId) {
    id
    ...PriceSummaryFragment
    __typename
  }
}
    ${PriceSummaryFragmentFragmentDoc}`;

/**
 * __useGetPriceSummaryQuery__
 *
 * To run a query within a React component, call `useGetPriceSummaryQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPriceSummaryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPriceSummaryQuery({
 *   variables: {
 *      cartId: // value for 'cartId'
 *   },
 * });
 */
export function useGetPriceSummaryQuery(baseOptions: Apollo.QueryHookOptions<GetPriceSummaryQuery, GetPriceSummaryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPriceSummaryQuery, GetPriceSummaryQueryVariables>(GetPriceSummaryDocument, options);
      }
export function useGetPriceSummaryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPriceSummaryQuery, GetPriceSummaryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPriceSummaryQuery, GetPriceSummaryQueryVariables>(GetPriceSummaryDocument, options);
        }
export type GetPriceSummaryQueryHookResult = ReturnType<typeof useGetPriceSummaryQuery>;
export type GetPriceSummaryLazyQueryHookResult = ReturnType<typeof useGetPriceSummaryLazyQuery>;
export type GetPriceSummaryQueryResult = Apollo.QueryResult<GetPriceSummaryQuery, GetPriceSummaryQueryVariables>;
export const SetShippingMethodDocument = gql`
    mutation SetShippingMethod($cartId: String!, $shippingMethod: ShippingMethodInput!) {
  setShippingMethodsOnCart(
    input: {cart_id: $cartId, shipping_methods: [$shippingMethod]}
  ) {
    cart {
      id
      available_payment_methods {
        code
        title
        __typename
      }
      ...SelectedShippingMethodCheckoutFragment
      ...PriceSummaryFragment
      ...ShippingInformationFragment
      ...AvailableShippingMethodsCheckoutFragment
      __typename
    }
    __typename
  }
}
    ${SelectedShippingMethodCheckoutFragmentFragmentDoc}
${PriceSummaryFragmentFragmentDoc}
${ShippingInformationFragmentFragmentDoc}
${AvailableShippingMethodsCheckoutFragmentFragmentDoc}`;
export type SetShippingMethodMutationFn = Apollo.MutationFunction<SetShippingMethodMutation, SetShippingMethodMutationVariables>;

/**
 * __useSetShippingMethodMutation__
 *
 * To run a mutation, you first call `useSetShippingMethodMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetShippingMethodMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setShippingMethodMutation, { data, loading, error }] = useSetShippingMethodMutation({
 *   variables: {
 *      cartId: // value for 'cartId'
 *      shippingMethod: // value for 'shippingMethod'
 *   },
 * });
 */
export function useSetShippingMethodMutation(baseOptions?: Apollo.MutationHookOptions<SetShippingMethodMutation, SetShippingMethodMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SetShippingMethodMutation, SetShippingMethodMutationVariables>(SetShippingMethodDocument, options);
      }
export type SetShippingMethodMutationHookResult = ReturnType<typeof useSetShippingMethodMutation>;
export type SetShippingMethodMutationResult = Apollo.MutationResult<SetShippingMethodMutation>;
export type SetShippingMethodMutationOptions = Apollo.BaseMutationOptions<SetShippingMethodMutation, SetShippingMethodMutationVariables>;
export const GetBreadcrumbsDocument = gql`
    query GetBreadcrumbs($category_id: String!) {
  categories(filters: {category_uid: {in: [$category_id]}}) {
    items {
      breadcrumbs {
        category_uid
        category_level
        category_name
        category_url_path
        __typename
      }
      uid
      name
      url_path
      __typename
    }
    __typename
  }
}
    `;

/**
 * __useGetBreadcrumbsQuery__
 *
 * To run a query within a React component, call `useGetBreadcrumbsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBreadcrumbsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBreadcrumbsQuery({
 *   variables: {
 *      category_id: // value for 'category_id'
 *   },
 * });
 */
export function useGetBreadcrumbsQuery(baseOptions: Apollo.QueryHookOptions<GetBreadcrumbsQuery, GetBreadcrumbsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetBreadcrumbsQuery, GetBreadcrumbsQueryVariables>(GetBreadcrumbsDocument, options);
      }
export function useGetBreadcrumbsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetBreadcrumbsQuery, GetBreadcrumbsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetBreadcrumbsQuery, GetBreadcrumbsQueryVariables>(GetBreadcrumbsDocument, options);
        }
export type GetBreadcrumbsQueryHookResult = ReturnType<typeof useGetBreadcrumbsQuery>;
export type GetBreadcrumbsLazyQueryHookResult = ReturnType<typeof useGetBreadcrumbsLazyQuery>;
export type GetBreadcrumbsQueryResult = Apollo.QueryResult<GetBreadcrumbsQuery, GetBreadcrumbsQueryVariables>;
export const GetStoreConfigForBreadcrumbsDocument = gql`
    query GetStoreConfigForBreadcrumbs {
  storeConfig {
    store_code
    category_url_suffix
    __typename
  }
}
    `;

/**
 * __useGetStoreConfigForBreadcrumbsQuery__
 *
 * To run a query within a React component, call `useGetStoreConfigForBreadcrumbsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStoreConfigForBreadcrumbsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStoreConfigForBreadcrumbsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetStoreConfigForBreadcrumbsQuery(baseOptions?: Apollo.QueryHookOptions<GetStoreConfigForBreadcrumbsQuery, GetStoreConfigForBreadcrumbsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetStoreConfigForBreadcrumbsQuery, GetStoreConfigForBreadcrumbsQueryVariables>(GetStoreConfigForBreadcrumbsDocument, options);
      }
export function useGetStoreConfigForBreadcrumbsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetStoreConfigForBreadcrumbsQuery, GetStoreConfigForBreadcrumbsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetStoreConfigForBreadcrumbsQuery, GetStoreConfigForBreadcrumbsQueryVariables>(GetStoreConfigForBreadcrumbsDocument, options);
        }
export type GetStoreConfigForBreadcrumbsQueryHookResult = ReturnType<typeof useGetStoreConfigForBreadcrumbsQuery>;
export type GetStoreConfigForBreadcrumbsLazyQueryHookResult = ReturnType<typeof useGetStoreConfigForBreadcrumbsLazyQuery>;
export type GetStoreConfigForBreadcrumbsQueryResult = Apollo.QueryResult<GetStoreConfigForBreadcrumbsQuery, GetStoreConfigForBreadcrumbsQueryVariables>;
export const GetCategoryDataDocument = gql`
    query getCategoryData($id: String!) {
  categories(filters: {category_uid: {in: [$id]}}) {
    items {
      uid
      name
      description
      url_key
      url_path
      __typename
    }
    __typename
  }
}
    `;

/**
 * __useGetCategoryDataQuery__
 *
 * To run a query within a React component, call `useGetCategoryDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCategoryDataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCategoryDataQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCategoryDataQuery(baseOptions: Apollo.QueryHookOptions<GetCategoryDataQuery, GetCategoryDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCategoryDataQuery, GetCategoryDataQueryVariables>(GetCategoryDataDocument, options);
      }
export function useGetCategoryDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCategoryDataQuery, GetCategoryDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCategoryDataQuery, GetCategoryDataQueryVariables>(GetCategoryDataDocument, options);
        }
export type GetCategoryDataQueryHookResult = ReturnType<typeof useGetCategoryDataQuery>;
export type GetCategoryDataLazyQueryHookResult = ReturnType<typeof useGetCategoryDataLazyQuery>;
export type GetCategoryDataQueryResult = Apollo.QueryResult<GetCategoryDataQuery, GetCategoryDataQueryVariables>;
export const GetCmsPageDocument = gql`
    query GetCmsPage($identifier: String!) {
  cmsPage(identifier: $identifier) {
    url_key
    content
    content_heading
    title
    page_layout
    meta_title
    meta_keywords
    meta_description
    __typename
  }
}
    `;

/**
 * __useGetCmsPageQuery__
 *
 * To run a query within a React component, call `useGetCmsPageQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCmsPageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCmsPageQuery({
 *   variables: {
 *      identifier: // value for 'identifier'
 *   },
 * });
 */
export function useGetCmsPageQuery(baseOptions: Apollo.QueryHookOptions<GetCmsPageQuery, GetCmsPageQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCmsPageQuery, GetCmsPageQueryVariables>(GetCmsPageDocument, options);
      }
export function useGetCmsPageLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCmsPageQuery, GetCmsPageQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCmsPageQuery, GetCmsPageQueryVariables>(GetCmsPageDocument, options);
        }
export type GetCmsPageQueryHookResult = ReturnType<typeof useGetCmsPageQuery>;
export type GetCmsPageLazyQueryHookResult = ReturnType<typeof useGetCmsPageLazyQuery>;
export type GetCmsPageQueryResult = Apollo.QueryResult<GetCmsPageQuery, GetCmsPageQueryVariables>;
export const GetCmsBlocksDocument = gql`
    query GetCmsBlocks($identifiers: [String]!) {
  cmsBlocks(identifiers: $identifiers) {
    items {
      content
      title
      identifier
      __typename
    }
    __typename
  }
}
    `;

/**
 * __useGetCmsBlocksQuery__
 *
 * To run a query within a React component, call `useGetCmsBlocksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCmsBlocksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCmsBlocksQuery({
 *   variables: {
 *      identifiers: // value for 'identifiers'
 *   },
 * });
 */
export function useGetCmsBlocksQuery(baseOptions: Apollo.QueryHookOptions<GetCmsBlocksQuery, GetCmsBlocksQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCmsBlocksQuery, GetCmsBlocksQueryVariables>(GetCmsBlocksDocument, options);
      }
export function useGetCmsBlocksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCmsBlocksQuery, GetCmsBlocksQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCmsBlocksQuery, GetCmsBlocksQueryVariables>(GetCmsBlocksDocument, options);
        }
export type GetCmsBlocksQueryHookResult = ReturnType<typeof useGetCmsBlocksQuery>;
export type GetCmsBlocksLazyQueryHookResult = ReturnType<typeof useGetCmsBlocksLazyQuery>;
export type GetCmsBlocksQueryResult = Apollo.QueryResult<GetCmsBlocksQuery, GetCmsBlocksQueryVariables>;
export const GetStoreConfigDataDocument = gql`
    query getStoreConfigData {
  storeConfig {
    store_code
    store_name
    store_group_name
    __typename
  }
}
    `;

/**
 * __useGetStoreConfigDataQuery__
 *
 * To run a query within a React component, call `useGetStoreConfigDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStoreConfigDataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStoreConfigDataQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetStoreConfigDataQuery(baseOptions?: Apollo.QueryHookOptions<GetStoreConfigDataQuery, GetStoreConfigDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetStoreConfigDataQuery, GetStoreConfigDataQueryVariables>(GetStoreConfigDataDocument, options);
      }
export function useGetStoreConfigDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetStoreConfigDataQuery, GetStoreConfigDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetStoreConfigDataQuery, GetStoreConfigDataQueryVariables>(GetStoreConfigDataDocument, options);
        }
export type GetStoreConfigDataQueryHookResult = ReturnType<typeof useGetStoreConfigDataQuery>;
export type GetStoreConfigDataLazyQueryHookResult = ReturnType<typeof useGetStoreConfigDataLazyQuery>;
export type GetStoreConfigDataQueryResult = Apollo.QueryResult<GetStoreConfigDataQuery, GetStoreConfigDataQueryVariables>;
export const GetAvailableStoresDataDocument = gql`
    query getAvailableStoresData {
  availableStores {
    category_url_suffix
    default_display_currency_code
    locale
    product_url_suffix
    secure_base_media_url
    store_code
    store_group_code
    store_group_name
    store_name
    store_sort_order
    __typename
  }
}
    `;

/**
 * __useGetAvailableStoresDataQuery__
 *
 * To run a query within a React component, call `useGetAvailableStoresDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAvailableStoresDataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAvailableStoresDataQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAvailableStoresDataQuery(baseOptions?: Apollo.QueryHookOptions<GetAvailableStoresDataQuery, GetAvailableStoresDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAvailableStoresDataQuery, GetAvailableStoresDataQueryVariables>(GetAvailableStoresDataDocument, options);
      }
export function useGetAvailableStoresDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAvailableStoresDataQuery, GetAvailableStoresDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAvailableStoresDataQuery, GetAvailableStoresDataQueryVariables>(GetAvailableStoresDataDocument, options);
        }
export type GetAvailableStoresDataQueryHookResult = ReturnType<typeof useGetAvailableStoresDataQuery>;
export type GetAvailableStoresDataLazyQueryHookResult = ReturnType<typeof useGetAvailableStoresDataLazyQuery>;
export type GetAvailableStoresDataQueryResult = Apollo.QueryResult<GetAvailableStoresDataQuery, GetAvailableStoresDataQueryVariables>;
export const GetCurrencyDataDocument = gql`
    query getCurrencyData {
  currency {
    default_display_currency_code
    available_currency_codes
    __typename
  }
}
    `;

/**
 * __useGetCurrencyDataQuery__
 *
 * To run a query within a React component, call `useGetCurrencyDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCurrencyDataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCurrencyDataQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCurrencyDataQuery(baseOptions?: Apollo.QueryHookOptions<GetCurrencyDataQuery, GetCurrencyDataQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCurrencyDataQuery, GetCurrencyDataQueryVariables>(GetCurrencyDataDocument, options);
      }
export function useGetCurrencyDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCurrencyDataQuery, GetCurrencyDataQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCurrencyDataQuery, GetCurrencyDataQueryVariables>(GetCurrencyDataDocument, options);
        }
export type GetCurrencyDataQueryHookResult = ReturnType<typeof useGetCurrencyDataQuery>;
export type GetCurrencyDataLazyQueryHookResult = ReturnType<typeof useGetCurrencyDataLazyQuery>;
export type GetCurrencyDataQueryResult = Apollo.QueryResult<GetCurrencyDataQuery, GetCurrencyDataQueryVariables>;
export const GetStoreConfigForMegaMenuDocument = gql`
    query GetStoreConfigForMegaMenu {
  storeConfig {
    store_code
    category_url_suffix
    __typename
  }
}
    `;

/**
 * __useGetStoreConfigForMegaMenuQuery__
 *
 * To run a query within a React component, call `useGetStoreConfigForMegaMenuQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStoreConfigForMegaMenuQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStoreConfigForMegaMenuQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetStoreConfigForMegaMenuQuery(baseOptions?: Apollo.QueryHookOptions<GetStoreConfigForMegaMenuQuery, GetStoreConfigForMegaMenuQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetStoreConfigForMegaMenuQuery, GetStoreConfigForMegaMenuQueryVariables>(GetStoreConfigForMegaMenuDocument, options);
      }
export function useGetStoreConfigForMegaMenuLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetStoreConfigForMegaMenuQuery, GetStoreConfigForMegaMenuQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetStoreConfigForMegaMenuQuery, GetStoreConfigForMegaMenuQueryVariables>(GetStoreConfigForMegaMenuDocument, options);
        }
export type GetStoreConfigForMegaMenuQueryHookResult = ReturnType<typeof useGetStoreConfigForMegaMenuQuery>;
export type GetStoreConfigForMegaMenuLazyQueryHookResult = ReturnType<typeof useGetStoreConfigForMegaMenuLazyQuery>;
export type GetStoreConfigForMegaMenuQueryResult = Apollo.QueryResult<GetStoreConfigForMegaMenuQuery, GetStoreConfigForMegaMenuQueryVariables>;
export const GetStoreConfigForCategoryTreeDocument = gql`
    query GetStoreConfigForCategoryTree {
  storeConfig {
    store_code
    category_url_suffix
    __typename
  }
}
    `;

/**
 * __useGetStoreConfigForCategoryTreeQuery__
 *
 * To run a query within a React component, call `useGetStoreConfigForCategoryTreeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStoreConfigForCategoryTreeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStoreConfigForCategoryTreeQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetStoreConfigForCategoryTreeQuery(baseOptions?: Apollo.QueryHookOptions<GetStoreConfigForCategoryTreeQuery, GetStoreConfigForCategoryTreeQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetStoreConfigForCategoryTreeQuery, GetStoreConfigForCategoryTreeQueryVariables>(GetStoreConfigForCategoryTreeDocument, options);
      }
export function useGetStoreConfigForCategoryTreeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetStoreConfigForCategoryTreeQuery, GetStoreConfigForCategoryTreeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetStoreConfigForCategoryTreeQuery, GetStoreConfigForCategoryTreeQueryVariables>(GetStoreConfigForCategoryTreeDocument, options);
        }
export type GetStoreConfigForCategoryTreeQueryHookResult = ReturnType<typeof useGetStoreConfigForCategoryTreeQuery>;
export type GetStoreConfigForCategoryTreeLazyQueryHookResult = ReturnType<typeof useGetStoreConfigForCategoryTreeLazyQuery>;
export type GetStoreConfigForCategoryTreeQueryResult = Apollo.QueryResult<GetStoreConfigForCategoryTreeQuery, GetStoreConfigForCategoryTreeQueryVariables>;
export const GetRootCategoryIdDocument = gql`
    query getRootCategoryId {
  storeConfig {
    store_code
    root_category_uid
    __typename
  }
}
    `;

/**
 * __useGetRootCategoryIdQuery__
 *
 * To run a query within a React component, call `useGetRootCategoryIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRootCategoryIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRootCategoryIdQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetRootCategoryIdQuery(baseOptions?: Apollo.QueryHookOptions<GetRootCategoryIdQuery, GetRootCategoryIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetRootCategoryIdQuery, GetRootCategoryIdQueryVariables>(GetRootCategoryIdDocument, options);
      }
export function useGetRootCategoryIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetRootCategoryIdQuery, GetRootCategoryIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetRootCategoryIdQuery, GetRootCategoryIdQueryVariables>(GetRootCategoryIdDocument, options);
        }
export type GetRootCategoryIdQueryHookResult = ReturnType<typeof useGetRootCategoryIdQuery>;
export type GetRootCategoryIdLazyQueryHookResult = ReturnType<typeof useGetRootCategoryIdLazyQuery>;
export type GetRootCategoryIdQueryResult = Apollo.QueryResult<GetRootCategoryIdQuery, GetRootCategoryIdQueryVariables>;
export const GetLocaleDocument = gql`
    query getLocale {
  storeConfig {
    store_code
    locale
    __typename
  }
}
    `;

/**
 * __useGetLocaleQuery__
 *
 * To run a query within a React component, call `useGetLocaleQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLocaleQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLocaleQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetLocaleQuery(baseOptions?: Apollo.QueryHookOptions<GetLocaleQuery, GetLocaleQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetLocaleQuery, GetLocaleQueryVariables>(GetLocaleDocument, options);
      }
export function useGetLocaleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetLocaleQuery, GetLocaleQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetLocaleQuery, GetLocaleQueryVariables>(GetLocaleDocument, options);
        }
export type GetLocaleQueryHookResult = ReturnType<typeof useGetLocaleQuery>;
export type GetLocaleLazyQueryHookResult = ReturnType<typeof useGetLocaleLazyQuery>;
export type GetLocaleQueryResult = Apollo.QueryResult<GetLocaleQuery, GetLocaleQueryVariables>;
export const GetPageSizeDocument = gql`
    query getPageSize {
  storeConfig {
    store_code
    grid_per_page
    __typename
  }
}
    `;

/**
 * __useGetPageSizeQuery__
 *
 * To run a query within a React component, call `useGetPageSizeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPageSizeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPageSizeQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetPageSizeQuery(baseOptions?: Apollo.QueryHookOptions<GetPageSizeQuery, GetPageSizeQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetPageSizeQuery, GetPageSizeQueryVariables>(GetPageSizeDocument, options);
      }
export function useGetPageSizeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPageSizeQuery, GetPageSizeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetPageSizeQuery, GetPageSizeQueryVariables>(GetPageSizeDocument, options);
        }
export type GetPageSizeQueryHookResult = ReturnType<typeof useGetPageSizeQuery>;
export type GetPageSizeLazyQueryHookResult = ReturnType<typeof useGetPageSizeLazyQuery>;
export type GetPageSizeQueryResult = Apollo.QueryResult<GetPageSizeQuery, GetPageSizeQueryVariables>;
export const GetStoreConfigDataForGalleryAcDocument = gql`
    query GetStoreConfigDataForGalleryAC {
  storeConfig {
    store_code
    product_url_suffix
    magento_wishlist_general_is_enabled
    __typename
  }
}
    `;

/**
 * __useGetStoreConfigDataForGalleryAcQuery__
 *
 * To run a query within a React component, call `useGetStoreConfigDataForGalleryAcQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStoreConfigDataForGalleryAcQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStoreConfigDataForGalleryAcQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetStoreConfigDataForGalleryAcQuery(baseOptions?: Apollo.QueryHookOptions<GetStoreConfigDataForGalleryAcQuery, GetStoreConfigDataForGalleryAcQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetStoreConfigDataForGalleryAcQuery, GetStoreConfigDataForGalleryAcQueryVariables>(GetStoreConfigDataForGalleryAcDocument, options);
      }
export function useGetStoreConfigDataForGalleryAcLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetStoreConfigDataForGalleryAcQuery, GetStoreConfigDataForGalleryAcQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetStoreConfigDataForGalleryAcQuery, GetStoreConfigDataForGalleryAcQueryVariables>(GetStoreConfigDataForGalleryAcDocument, options);
        }
export type GetStoreConfigDataForGalleryAcQueryHookResult = ReturnType<typeof useGetStoreConfigDataForGalleryAcQuery>;
export type GetStoreConfigDataForGalleryAcLazyQueryHookResult = ReturnType<typeof useGetStoreConfigDataForGalleryAcLazyQuery>;
export type GetStoreConfigDataForGalleryAcQueryResult = Apollo.QueryResult<GetStoreConfigDataForGalleryAcQuery, GetStoreConfigDataForGalleryAcQueryVariables>;
export const GetMegaMenuDocument = gql`
    query getMegaMenu {
  categoryList {
    uid
    name
    children {
      uid
      include_in_menu
      name
      position
      url_path
      children {
        uid
        include_in_menu
        name
        position
        url_path
        children {
          uid
          include_in_menu
          name
          position
          url_path
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
}
    `;

/**
 * __useGetMegaMenuQuery__
 *
 * To run a query within a React component, call `useGetMegaMenuQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMegaMenuQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMegaMenuQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetMegaMenuQuery(baseOptions?: Apollo.QueryHookOptions<GetMegaMenuQuery, GetMegaMenuQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetMegaMenuQuery, GetMegaMenuQueryVariables>(GetMegaMenuDocument, options);
      }
export function useGetMegaMenuLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMegaMenuQuery, GetMegaMenuQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetMegaMenuQuery, GetMegaMenuQueryVariables>(GetMegaMenuDocument, options);
        }
export type GetMegaMenuQueryHookResult = ReturnType<typeof useGetMegaMenuQuery>;
export type GetMegaMenuLazyQueryHookResult = ReturnType<typeof useGetMegaMenuLazyQuery>;
export type GetMegaMenuQueryResult = Apollo.QueryResult<GetMegaMenuQuery, GetMegaMenuQueryVariables>;
export const GetNavigationMenuDocument = gql`
    query GetNavigationMenu($id: String!) {
  categories(filters: {category_uid: {in: [$id]}}) {
    items {
      uid
      name
      children {
        children_count
        uid
        include_in_menu
        name
        position
        url_path
        url_suffix
        __typename
      }
      children_count
      include_in_menu
      url_path
      __typename
    }
    __typename
  }
}
    `;

/**
 * __useGetNavigationMenuQuery__
 *
 * To run a query within a React component, call `useGetNavigationMenuQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetNavigationMenuQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetNavigationMenuQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetNavigationMenuQuery(baseOptions: Apollo.QueryHookOptions<GetNavigationMenuQuery, GetNavigationMenuQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetNavigationMenuQuery, GetNavigationMenuQueryVariables>(GetNavigationMenuDocument, options);
      }
export function useGetNavigationMenuLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetNavigationMenuQuery, GetNavigationMenuQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetNavigationMenuQuery, GetNavigationMenuQueryVariables>(GetNavigationMenuDocument, options);
        }
export type GetNavigationMenuQueryHookResult = ReturnType<typeof useGetNavigationMenuQuery>;
export type GetNavigationMenuLazyQueryHookResult = ReturnType<typeof useGetNavigationMenuLazyQuery>;
export type GetNavigationMenuQueryResult = Apollo.QueryResult<GetNavigationMenuQuery, GetNavigationMenuQueryVariables>;
export const GetAutocompleteResultsDocument = gql`
    query getAutocompleteResults($inputText: String!) {
  products(search: $inputText, currentPage: 1, pageSize: 3) {
    aggregations {
      label
      count
      attribute_code
      options {
        label
        value
        __typename
      }
      position
      __typename
    }
    items {
      id
      uid
      name
      sku
      small_image {
        url
        __typename
      }
      url_key
      url_suffix
      price {
        regularPrice {
          amount {
            value
            currency
            __typename
          }
          __typename
        }
        __typename
      }
      price_range {
        maximum_price {
          final_price {
            currency
            value
            __typename
          }
          __typename
        }
        __typename
      }
      __typename
    }
    page_info {
      total_pages
      __typename
    }
    total_count
    __typename
  }
}
    `;

/**
 * __useGetAutocompleteResultsQuery__
 *
 * To run a query within a React component, call `useGetAutocompleteResultsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAutocompleteResultsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAutocompleteResultsQuery({
 *   variables: {
 *      inputText: // value for 'inputText'
 *   },
 * });
 */
export function useGetAutocompleteResultsQuery(baseOptions: Apollo.QueryHookOptions<GetAutocompleteResultsQuery, GetAutocompleteResultsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAutocompleteResultsQuery, GetAutocompleteResultsQueryVariables>(GetAutocompleteResultsDocument, options);
      }
export function useGetAutocompleteResultsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAutocompleteResultsQuery, GetAutocompleteResultsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAutocompleteResultsQuery, GetAutocompleteResultsQueryVariables>(GetAutocompleteResultsDocument, options);
        }
export type GetAutocompleteResultsQueryHookResult = ReturnType<typeof useGetAutocompleteResultsQuery>;
export type GetAutocompleteResultsLazyQueryHookResult = ReturnType<typeof useGetAutocompleteResultsLazyQuery>;
export type GetAutocompleteResultsQueryResult = Apollo.QueryResult<GetAutocompleteResultsQuery, GetAutocompleteResultsQueryVariables>;
export const GetCmsBlockDocument = gql`
    query GetCmsBlock($identifiers: [String]!) {
  cmsBlocks(identifiers: $identifiers) {
    items {
      title
      content
      identifier
    }
    __typename
  }
}
    `;

/**
 * __useGetCmsBlockQuery__
 *
 * To run a query within a React component, call `useGetCmsBlockQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCmsBlockQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCmsBlockQuery({
 *   variables: {
 *      identifiers: // value for 'identifiers'
 *   },
 * });
 */
export function useGetCmsBlockQuery(baseOptions: Apollo.QueryHookOptions<GetCmsBlockQuery, GetCmsBlockQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCmsBlockQuery, GetCmsBlockQueryVariables>(GetCmsBlockDocument, options);
      }
export function useGetCmsBlockLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCmsBlockQuery, GetCmsBlockQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCmsBlockQuery, GetCmsBlockQueryVariables>(GetCmsBlockDocument, options);
        }
export type GetCmsBlockQueryHookResult = ReturnType<typeof useGetCmsBlockQuery>;
export type GetCmsBlockLazyQueryHookResult = ReturnType<typeof useGetCmsBlockLazyQuery>;
export type GetCmsBlockQueryResult = Apollo.QueryResult<GetCmsBlockQuery, GetCmsBlockQueryVariables>;
export const GetHomeProductsDocument = gql`
    query getHomeProducts($id: String!) {
  products(filter: {category_uid: {eq: $id}}, pageSize: 10, currentPage: 1) {
    items {
      url_key
      uid
      id
      sku
      name
      price_range {
        maximum_price {
          regular_price {
            value
          }
          final_price {
            value
          }
          discount {
            amount_off
          }
        }
        minimum_price {
          regular_price {
            value
          }
          final_price {
            value
          }
          discount {
            amount_off
          }
        }
      }
      media_gallery {
        url
        position
        disabled
      }
      image {
        disabled
        label
        position
        url
      }
      small_image {
        disabled
        label
        position
        url
      }
      description {
        html
      }
      short_description {
        html
      }
    }
  }
}
    `;

/**
 * __useGetHomeProductsQuery__
 *
 * To run a query within a React component, call `useGetHomeProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetHomeProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetHomeProductsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetHomeProductsQuery(baseOptions: Apollo.QueryHookOptions<GetHomeProductsQuery, GetHomeProductsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetHomeProductsQuery, GetHomeProductsQueryVariables>(GetHomeProductsDocument, options);
      }
export function useGetHomeProductsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetHomeProductsQuery, GetHomeProductsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetHomeProductsQuery, GetHomeProductsQueryVariables>(GetHomeProductsDocument, options);
        }
export type GetHomeProductsQueryHookResult = ReturnType<typeof useGetHomeProductsQuery>;
export type GetHomeProductsLazyQueryHookResult = ReturnType<typeof useGetHomeProductsLazyQuery>;
export type GetHomeProductsQueryResult = Apollo.QueryResult<GetHomeProductsQuery, GetHomeProductsQueryVariables>;
export const GetProductsByCategoryDocument = gql`
    query getProductsByCategory($id: String!) {
  products(filter: {category_uid: {eq: $id}}) {
    items {
      url_key
      id
      sku
      uid
      name
      price_range {
        maximum_price {
          regular_price {
            value
          }
          final_price {
            value
          }
          discount {
            amount_off
          }
        }
        minimum_price {
          regular_price {
            value
          }
          final_price {
            value
          }
          discount {
            amount_off
          }
        }
      }
      media_gallery {
        url
        position
        disabled
      }
      image {
        disabled
        label
        position
        url
      }
      small_image {
        disabled
        label
        position
        url
      }
      description {
        html
      }
      short_description {
        html
      }
    }
  }
}
    `;

/**
 * __useGetProductsByCategoryQuery__
 *
 * To run a query within a React component, call `useGetProductsByCategoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProductsByCategoryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProductsByCategoryQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetProductsByCategoryQuery(baseOptions: Apollo.QueryHookOptions<GetProductsByCategoryQuery, GetProductsByCategoryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetProductsByCategoryQuery, GetProductsByCategoryQueryVariables>(GetProductsByCategoryDocument, options);
      }
export function useGetProductsByCategoryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductsByCategoryQuery, GetProductsByCategoryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetProductsByCategoryQuery, GetProductsByCategoryQueryVariables>(GetProductsByCategoryDocument, options);
        }
export type GetProductsByCategoryQueryHookResult = ReturnType<typeof useGetProductsByCategoryQuery>;
export type GetProductsByCategoryLazyQueryHookResult = ReturnType<typeof useGetProductsByCategoryLazyQuery>;
export type GetProductsByCategoryQueryResult = Apollo.QueryResult<GetProductsByCategoryQuery, GetProductsByCategoryQueryVariables>;
export const GetProductDetailsByUrlKeyDocument = gql`
    query getProductDetailsByUrlKey($urlKey: String!) {
  products(filter: {url_key: {eq: $urlKey}}) {
    items {
      id
      sku
      url_key
      uid
      name
      categories {
        uid
        name
        url_key
      }
      price_range {
        maximum_price {
          regular_price {
            value
          }
          final_price {
            value
          }
          discount {
            amount_off
          }
        }
        minimum_price {
          regular_price {
            value
          }
          final_price {
            value
          }
          discount {
            amount_off
          }
        }
      }
      media_gallery {
        url
        position
        disabled
      }
      image {
        disabled
        label
        position
        url
      }
      small_image {
        disabled
        label
        position
        url
      }
      description {
        html
      }
      short_description {
        html
      }
    }
  }
}
    `;

/**
 * __useGetProductDetailsByUrlKeyQuery__
 *
 * To run a query within a React component, call `useGetProductDetailsByUrlKeyQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProductDetailsByUrlKeyQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProductDetailsByUrlKeyQuery({
 *   variables: {
 *      urlKey: // value for 'urlKey'
 *   },
 * });
 */
export function useGetProductDetailsByUrlKeyQuery(baseOptions: Apollo.QueryHookOptions<GetProductDetailsByUrlKeyQuery, GetProductDetailsByUrlKeyQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetProductDetailsByUrlKeyQuery, GetProductDetailsByUrlKeyQueryVariables>(GetProductDetailsByUrlKeyDocument, options);
      }
export function useGetProductDetailsByUrlKeyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProductDetailsByUrlKeyQuery, GetProductDetailsByUrlKeyQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetProductDetailsByUrlKeyQuery, GetProductDetailsByUrlKeyQueryVariables>(GetProductDetailsByUrlKeyDocument, options);
        }
export type GetProductDetailsByUrlKeyQueryHookResult = ReturnType<typeof useGetProductDetailsByUrlKeyQuery>;
export type GetProductDetailsByUrlKeyLazyQueryHookResult = ReturnType<typeof useGetProductDetailsByUrlKeyLazyQuery>;
export type GetProductDetailsByUrlKeyQueryResult = Apollo.QueryResult<GetProductDetailsByUrlKeyQuery, GetProductDetailsByUrlKeyQueryVariables>;
export const CreateAccountDocument = gql`
    mutation CreateAccount($email: String!, $firstname: String!, $lastname: String!, $password: String!, $is_subscribed: Boolean!) {
  createCustomer(
    input: {email: $email, firstname: $firstname, lastname: $lastname, password: $password, is_subscribed: $is_subscribed}
  ) {
    customer {
      email
      __typename
    }
    __typename
  }
}
    `;
export type CreateAccountMutationFn = Apollo.MutationFunction<CreateAccountMutation, CreateAccountMutationVariables>;

/**
 * __useCreateAccountMutation__
 *
 * To run a mutation, you first call `useCreateAccountMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAccountMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAccountMutation, { data, loading, error }] = useCreateAccountMutation({
 *   variables: {
 *      email: // value for 'email'
 *      firstname: // value for 'firstname'
 *      lastname: // value for 'lastname'
 *      password: // value for 'password'
 *      is_subscribed: // value for 'is_subscribed'
 *   },
 * });
 */
export function useCreateAccountMutation(baseOptions?: Apollo.MutationHookOptions<CreateAccountMutation, CreateAccountMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateAccountMutation, CreateAccountMutationVariables>(CreateAccountDocument, options);
      }
export type CreateAccountMutationHookResult = ReturnType<typeof useCreateAccountMutation>;
export type CreateAccountMutationResult = Apollo.MutationResult<CreateAccountMutation>;
export type CreateAccountMutationOptions = Apollo.BaseMutationOptions<CreateAccountMutation, CreateAccountMutationVariables>;
export const SignInDocument = gql`
    mutation SignIn($email: String!, $password: String!) {
  generateCustomerToken(email: $email, password: $password) {
    token
    __typename
  }
}
    `;
export type SignInMutationFn = Apollo.MutationFunction<SignInMutation, SignInMutationVariables>;

/**
 * __useSignInMutation__
 *
 * To run a mutation, you first call `useSignInMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSignInMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signInMutation, { data, loading, error }] = useSignInMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useSignInMutation(baseOptions?: Apollo.MutationHookOptions<SignInMutation, SignInMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SignInMutation, SignInMutationVariables>(SignInDocument, options);
      }
export type SignInMutationHookResult = ReturnType<typeof useSignInMutation>;
export type SignInMutationResult = Apollo.MutationResult<SignInMutation>;
export type SignInMutationOptions = Apollo.BaseMutationOptions<SignInMutation, SignInMutationVariables>;
export const CreateCartAfterSignInDocument = gql`
    mutation CreateCartAfterSignIn {
  cartId: createEmptyCart
}
    `;
export type CreateCartAfterSignInMutationFn = Apollo.MutationFunction<CreateCartAfterSignInMutation, CreateCartAfterSignInMutationVariables>;

/**
 * __useCreateCartAfterSignInMutation__
 *
 * To run a mutation, you first call `useCreateCartAfterSignInMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCartAfterSignInMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCartAfterSignInMutation, { data, loading, error }] = useCreateCartAfterSignInMutation({
 *   variables: {
 *   },
 * });
 */
export function useCreateCartAfterSignInMutation(baseOptions?: Apollo.MutationHookOptions<CreateCartAfterSignInMutation, CreateCartAfterSignInMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCartAfterSignInMutation, CreateCartAfterSignInMutationVariables>(CreateCartAfterSignInDocument, options);
      }
export type CreateCartAfterSignInMutationHookResult = ReturnType<typeof useCreateCartAfterSignInMutation>;
export type CreateCartAfterSignInMutationResult = Apollo.MutationResult<CreateCartAfterSignInMutation>;
export type CreateCartAfterSignInMutationOptions = Apollo.BaseMutationOptions<CreateCartAfterSignInMutation, CreateCartAfterSignInMutationVariables>;
export const MergeCartsAfterSignInDocument = gql`
    mutation MergeCartsAfterSignIn($sourceCartId: String!, $destinationCartId: String!) {
  mergeCarts(
    source_cart_id: $sourceCartId
    destination_cart_id: $destinationCartId
  ) {
    id
    items {
      uid
      __typename
    }
    ...CheckoutPageFragment
    __typename
  }
}
    ${CheckoutPageFragmentFragmentDoc}`;
export type MergeCartsAfterSignInMutationFn = Apollo.MutationFunction<MergeCartsAfterSignInMutation, MergeCartsAfterSignInMutationVariables>;

/**
 * __useMergeCartsAfterSignInMutation__
 *
 * To run a mutation, you first call `useMergeCartsAfterSignInMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMergeCartsAfterSignInMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [mergeCartsAfterSignInMutation, { data, loading, error }] = useMergeCartsAfterSignInMutation({
 *   variables: {
 *      sourceCartId: // value for 'sourceCartId'
 *      destinationCartId: // value for 'destinationCartId'
 *   },
 * });
 */
export function useMergeCartsAfterSignInMutation(baseOptions?: Apollo.MutationHookOptions<MergeCartsAfterSignInMutation, MergeCartsAfterSignInMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<MergeCartsAfterSignInMutation, MergeCartsAfterSignInMutationVariables>(MergeCartsAfterSignInDocument, options);
      }
export type MergeCartsAfterSignInMutationHookResult = ReturnType<typeof useMergeCartsAfterSignInMutation>;
export type MergeCartsAfterSignInMutationResult = Apollo.MutationResult<MergeCartsAfterSignInMutation>;
export type MergeCartsAfterSignInMutationOptions = Apollo.BaseMutationOptions<MergeCartsAfterSignInMutation, MergeCartsAfterSignInMutationVariables>;
export const GetCartDetailsAfterSignInDocument = gql`
    query GetCartDetailsAfterSignIn($cartId: String!) {
  cart(cart_id: $cartId) {
    id
    items {
      uid
      product {
        uid
        name
        sku
        small_image {
          url
          label
          __typename
        }
        price {
          regularPrice {
            amount {
              value
              __typename
            }
            __typename
          }
          __typename
        }
        __typename
      }
      quantity
      ... on ConfigurableCartItem {
        configurable_options {
          configurable_product_option_uid
          option_label
          configurable_product_option_value_uid
          value_label
          __typename
        }
        __typename
      }
      __typename
    }
    prices {
      grand_total {
        value
        currency
        __typename
      }
      __typename
    }
    ...CartPageFragment
    __typename
  }
}
    ${CartPageFragmentFragmentDoc}`;

/**
 * __useGetCartDetailsAfterSignInQuery__
 *
 * To run a query within a React component, call `useGetCartDetailsAfterSignInQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCartDetailsAfterSignInQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCartDetailsAfterSignInQuery({
 *   variables: {
 *      cartId: // value for 'cartId'
 *   },
 * });
 */
export function useGetCartDetailsAfterSignInQuery(baseOptions: Apollo.QueryHookOptions<GetCartDetailsAfterSignInQuery, GetCartDetailsAfterSignInQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCartDetailsAfterSignInQuery, GetCartDetailsAfterSignInQueryVariables>(GetCartDetailsAfterSignInDocument, options);
      }
export function useGetCartDetailsAfterSignInLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCartDetailsAfterSignInQuery, GetCartDetailsAfterSignInQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCartDetailsAfterSignInQuery, GetCartDetailsAfterSignInQueryVariables>(GetCartDetailsAfterSignInDocument, options);
        }
export type GetCartDetailsAfterSignInQueryHookResult = ReturnType<typeof useGetCartDetailsAfterSignInQuery>;
export type GetCartDetailsAfterSignInLazyQueryHookResult = ReturnType<typeof useGetCartDetailsAfterSignInLazyQuery>;
export type GetCartDetailsAfterSignInQueryResult = Apollo.QueryResult<GetCartDetailsAfterSignInQuery, GetCartDetailsAfterSignInQueryVariables>;
export const GetCustomerOrdersDocument = gql`
    query GetCustomerOrders($filter: CustomerOrdersFilterInput, $pageSize: Int!) {
  customer {
    orders(filter: $filter, pageSize: $pageSize) {
      ...CustomerOrdersFragment
      __typename
    }
    __typename
  }
}
    ${CustomerOrdersFragmentFragmentDoc}`;

/**
 * __useGetCustomerOrdersQuery__
 *
 * To run a query within a React component, call `useGetCustomerOrdersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerOrdersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerOrdersQuery({
 *   variables: {
 *      filter: // value for 'filter'
 *      pageSize: // value for 'pageSize'
 *   },
 * });
 */
export function useGetCustomerOrdersQuery(baseOptions: Apollo.QueryHookOptions<GetCustomerOrdersQuery, GetCustomerOrdersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCustomerOrdersQuery, GetCustomerOrdersQueryVariables>(GetCustomerOrdersDocument, options);
      }
export function useGetCustomerOrdersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCustomerOrdersQuery, GetCustomerOrdersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCustomerOrdersQuery, GetCustomerOrdersQueryVariables>(GetCustomerOrdersDocument, options);
        }
export type GetCustomerOrdersQueryHookResult = ReturnType<typeof useGetCustomerOrdersQuery>;
export type GetCustomerOrdersLazyQueryHookResult = ReturnType<typeof useGetCustomerOrdersLazyQuery>;
export type GetCustomerOrdersQueryResult = Apollo.QueryResult<GetCustomerOrdersQuery, GetCustomerOrdersQueryVariables>;
export const IsEmailAvailableDocument = gql`
    query IsEmailAvailable($email: String!) {
  isEmailAvailable(email: $email) {
    is_email_available
    __typename
  }
}
    `;

/**
 * __useIsEmailAvailableQuery__
 *
 * To run a query within a React component, call `useIsEmailAvailableQuery` and pass it any options that fit your needs.
 * When your component renders, `useIsEmailAvailableQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useIsEmailAvailableQuery({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */
export function useIsEmailAvailableQuery(baseOptions: Apollo.QueryHookOptions<IsEmailAvailableQuery, IsEmailAvailableQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<IsEmailAvailableQuery, IsEmailAvailableQueryVariables>(IsEmailAvailableDocument, options);
      }
export function useIsEmailAvailableLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<IsEmailAvailableQuery, IsEmailAvailableQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<IsEmailAvailableQuery, IsEmailAvailableQueryVariables>(IsEmailAvailableDocument, options);
        }
export type IsEmailAvailableQueryHookResult = ReturnType<typeof useIsEmailAvailableQuery>;
export type IsEmailAvailableLazyQueryHookResult = ReturnType<typeof useIsEmailAvailableLazyQuery>;
export type IsEmailAvailableQueryResult = Apollo.QueryResult<IsEmailAvailableQuery, IsEmailAvailableQueryVariables>;
export const GetCustomerInformationDocument = gql`
    query GetCustomerInformation {
  customer {
    ...AccountInformationPageFragment
    __typename
  }
}
    ${AccountInformationPageFragmentFragmentDoc}`;

/**
 * __useGetCustomerInformationQuery__
 *
 * To run a query within a React component, call `useGetCustomerInformationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerInformationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerInformationQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCustomerInformationQuery(baseOptions?: Apollo.QueryHookOptions<GetCustomerInformationQuery, GetCustomerInformationQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCustomerInformationQuery, GetCustomerInformationQueryVariables>(GetCustomerInformationDocument, options);
      }
export function useGetCustomerInformationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCustomerInformationQuery, GetCustomerInformationQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCustomerInformationQuery, GetCustomerInformationQueryVariables>(GetCustomerInformationDocument, options);
        }
export type GetCustomerInformationQueryHookResult = ReturnType<typeof useGetCustomerInformationQuery>;
export type GetCustomerInformationLazyQueryHookResult = ReturnType<typeof useGetCustomerInformationLazyQuery>;
export type GetCustomerInformationQueryResult = Apollo.QueryResult<GetCustomerInformationQuery, GetCustomerInformationQueryVariables>;
export const SetCustomerInformationDocument = gql`
    mutation SetCustomerInformation($customerInput: CustomerInput!) {
  updateCustomer(input: $customerInput) {
    customer {
      ...AccountInformationPageFragment
      __typename
    }
    __typename
  }
}
    ${AccountInformationPageFragmentFragmentDoc}`;
export type SetCustomerInformationMutationFn = Apollo.MutationFunction<SetCustomerInformationMutation, SetCustomerInformationMutationVariables>;

/**
 * __useSetCustomerInformationMutation__
 *
 * To run a mutation, you first call `useSetCustomerInformationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetCustomerInformationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setCustomerInformationMutation, { data, loading, error }] = useSetCustomerInformationMutation({
 *   variables: {
 *      customerInput: // value for 'customerInput'
 *   },
 * });
 */
export function useSetCustomerInformationMutation(baseOptions?: Apollo.MutationHookOptions<SetCustomerInformationMutation, SetCustomerInformationMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SetCustomerInformationMutation, SetCustomerInformationMutationVariables>(SetCustomerInformationDocument, options);
      }
export type SetCustomerInformationMutationHookResult = ReturnType<typeof useSetCustomerInformationMutation>;
export type SetCustomerInformationMutationResult = Apollo.MutationResult<SetCustomerInformationMutation>;
export type SetCustomerInformationMutationOptions = Apollo.BaseMutationOptions<SetCustomerInformationMutation, SetCustomerInformationMutationVariables>;
export const AddProductToWishlistFromGalleryDocument = gql`
    mutation AddProductToWishlistFromGallery($wishlistId: ID!, $itemOptions: WishlistItemInput!) {
  addProductsToWishlist(wishlistId: $wishlistId, wishlistItems: [$itemOptions]) {
    user_errors {
      code
      message
      __typename
    }
    __typename
  }
}
    `;
export type AddProductToWishlistFromGalleryMutationFn = Apollo.MutationFunction<AddProductToWishlistFromGalleryMutation, AddProductToWishlistFromGalleryMutationVariables>;

/**
 * __useAddProductToWishlistFromGalleryMutation__
 *
 * To run a mutation, you first call `useAddProductToWishlistFromGalleryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddProductToWishlistFromGalleryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addProductToWishlistFromGalleryMutation, { data, loading, error }] = useAddProductToWishlistFromGalleryMutation({
 *   variables: {
 *      wishlistId: // value for 'wishlistId'
 *      itemOptions: // value for 'itemOptions'
 *   },
 * });
 */
export function useAddProductToWishlistFromGalleryMutation(baseOptions?: Apollo.MutationHookOptions<AddProductToWishlistFromGalleryMutation, AddProductToWishlistFromGalleryMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AddProductToWishlistFromGalleryMutation, AddProductToWishlistFromGalleryMutationVariables>(AddProductToWishlistFromGalleryDocument, options);
      }
export type AddProductToWishlistFromGalleryMutationHookResult = ReturnType<typeof useAddProductToWishlistFromGalleryMutation>;
export type AddProductToWishlistFromGalleryMutationResult = Apollo.MutationResult<AddProductToWishlistFromGalleryMutation>;
export type AddProductToWishlistFromGalleryMutationOptions = Apollo.BaseMutationOptions<AddProductToWishlistFromGalleryMutation, AddProductToWishlistFromGalleryMutationVariables>;
export const GetCustomerWishlistDocument = gql`
    query GetCustomerWishlist {
  customer {
    wishlists {
      id
      ...WishlistPageFragment
      __typename
    }
    __typename
  }
}
    ${WishlistPageFragmentFragmentDoc}`;

/**
 * __useGetCustomerWishlistQuery__
 *
 * To run a query within a React component, call `useGetCustomerWishlistQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerWishlistQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerWishlistQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCustomerWishlistQuery(baseOptions?: Apollo.QueryHookOptions<GetCustomerWishlistQuery, GetCustomerWishlistQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCustomerWishlistQuery, GetCustomerWishlistQueryVariables>(GetCustomerWishlistDocument, options);
      }
export function useGetCustomerWishlistLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCustomerWishlistQuery, GetCustomerWishlistQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCustomerWishlistQuery, GetCustomerWishlistQueryVariables>(GetCustomerWishlistDocument, options);
        }
export type GetCustomerWishlistQueryHookResult = ReturnType<typeof useGetCustomerWishlistQuery>;
export type GetCustomerWishlistLazyQueryHookResult = ReturnType<typeof useGetCustomerWishlistLazyQuery>;
export type GetCustomerWishlistQueryResult = Apollo.QueryResult<GetCustomerWishlistQuery, GetCustomerWishlistQueryVariables>;
export const GetCustomerWishlistPageWiseDocument = gql`
    query getCustomerWishlistPageWise($id: ID!, $currentPage: Int) {
  customer {
    wishlist_v2(id: $id) {
      id
      items_v2(currentPage: $currentPage) {
        items {
          id
          ...WishlistItemFragment
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
}
    ${WishlistItemFragmentFragmentDoc}`;

/**
 * __useGetCustomerWishlistPageWiseQuery__
 *
 * To run a query within a React component, call `useGetCustomerWishlistPageWiseQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerWishlistPageWiseQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerWishlistPageWiseQuery({
 *   variables: {
 *      id: // value for 'id'
 *      currentPage: // value for 'currentPage'
 *   },
 * });
 */
export function useGetCustomerWishlistPageWiseQuery(baseOptions: Apollo.QueryHookOptions<GetCustomerWishlistPageWiseQuery, GetCustomerWishlistPageWiseQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetCustomerWishlistPageWiseQuery, GetCustomerWishlistPageWiseQueryVariables>(GetCustomerWishlistPageWiseDocument, options);
      }
export function useGetCustomerWishlistPageWiseLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCustomerWishlistPageWiseQuery, GetCustomerWishlistPageWiseQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetCustomerWishlistPageWiseQuery, GetCustomerWishlistPageWiseQueryVariables>(GetCustomerWishlistPageWiseDocument, options);
        }
export type GetCustomerWishlistPageWiseQueryHookResult = ReturnType<typeof useGetCustomerWishlistPageWiseQuery>;
export type GetCustomerWishlistPageWiseLazyQueryHookResult = ReturnType<typeof useGetCustomerWishlistPageWiseLazyQuery>;
export type GetCustomerWishlistPageWiseQueryResult = Apollo.QueryResult<GetCustomerWishlistPageWiseQuery, GetCustomerWishlistPageWiseQueryVariables>;
export const GetMultipleWishlistsEnabledDocument = gql`
    query getMultipleWishlistsEnabled {
  storeConfig {
    store_code
    __typename
  }
}
    `;

/**
 * __useGetMultipleWishlistsEnabledQuery__
 *
 * To run a query within a React component, call `useGetMultipleWishlistsEnabledQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMultipleWishlistsEnabledQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMultipleWishlistsEnabledQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetMultipleWishlistsEnabledQuery(baseOptions?: Apollo.QueryHookOptions<GetMultipleWishlistsEnabledQuery, GetMultipleWishlistsEnabledQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetMultipleWishlistsEnabledQuery, GetMultipleWishlistsEnabledQueryVariables>(GetMultipleWishlistsEnabledDocument, options);
      }
export function useGetMultipleWishlistsEnabledLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetMultipleWishlistsEnabledQuery, GetMultipleWishlistsEnabledQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetMultipleWishlistsEnabledQuery, GetMultipleWishlistsEnabledQueryVariables>(GetMultipleWishlistsEnabledDocument, options);
        }
export type GetMultipleWishlistsEnabledQueryHookResult = ReturnType<typeof useGetMultipleWishlistsEnabledQuery>;
export type GetMultipleWishlistsEnabledLazyQueryHookResult = ReturnType<typeof useGetMultipleWishlistsEnabledLazyQuery>;
export type GetMultipleWishlistsEnabledQueryResult = Apollo.QueryResult<GetMultipleWishlistsEnabledQuery, GetMultipleWishlistsEnabledQueryVariables>;
export const GetWishlistConfigForWishlistPageAcDocument = gql`
    query GetWishlistConfigForWishlistPageAC {
  storeConfig {
    store_code
    magento_wishlist_general_is_enabled
    __typename
  }
}
    `;

/**
 * __useGetWishlistConfigForWishlistPageAcQuery__
 *
 * To run a query within a React component, call `useGetWishlistConfigForWishlistPageAcQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWishlistConfigForWishlistPageAcQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWishlistConfigForWishlistPageAcQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetWishlistConfigForWishlistPageAcQuery(baseOptions?: Apollo.QueryHookOptions<GetWishlistConfigForWishlistPageAcQuery, GetWishlistConfigForWishlistPageAcQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetWishlistConfigForWishlistPageAcQuery, GetWishlistConfigForWishlistPageAcQueryVariables>(GetWishlistConfigForWishlistPageAcDocument, options);
      }
export function useGetWishlistConfigForWishlistPageAcLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetWishlistConfigForWishlistPageAcQuery, GetWishlistConfigForWishlistPageAcQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetWishlistConfigForWishlistPageAcQuery, GetWishlistConfigForWishlistPageAcQueryVariables>(GetWishlistConfigForWishlistPageAcDocument, options);
        }
export type GetWishlistConfigForWishlistPageAcQueryHookResult = ReturnType<typeof useGetWishlistConfigForWishlistPageAcQuery>;
export type GetWishlistConfigForWishlistPageAcLazyQueryHookResult = ReturnType<typeof useGetWishlistConfigForWishlistPageAcLazyQuery>;
export type GetWishlistConfigForWishlistPageAcQueryResult = Apollo.QueryResult<GetWishlistConfigForWishlistPageAcQuery, GetWishlistConfigForWishlistPageAcQueryVariables>;
export const GetWishlistItemsForLocalFieldDocument = gql`
    query GetWishlistItemsForLocalField($currentPage: Int!) {
  customer {
    wishlists {
      id
      items_v2(currentPage: $currentPage, pageSize: 10) {
        items {
          id
          product {
            uid
            sku
            small_image {
              url
            }
            name
            url_key
            price_range {
              minimum_price {
                final_price {
                  value
                }
              }
            }
            __typename
          }
          __typename
        }
        page_info {
          current_page
          total_pages
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
}
    `;

/**
 * __useGetWishlistItemsForLocalFieldQuery__
 *
 * To run a query within a React component, call `useGetWishlistItemsForLocalFieldQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWishlistItemsForLocalFieldQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWishlistItemsForLocalFieldQuery({
 *   variables: {
 *      currentPage: // value for 'currentPage'
 *   },
 * });
 */
export function useGetWishlistItemsForLocalFieldQuery(baseOptions: Apollo.QueryHookOptions<GetWishlistItemsForLocalFieldQuery, GetWishlistItemsForLocalFieldQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetWishlistItemsForLocalFieldQuery, GetWishlistItemsForLocalFieldQueryVariables>(GetWishlistItemsForLocalFieldDocument, options);
      }
export function useGetWishlistItemsForLocalFieldLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetWishlistItemsForLocalFieldQuery, GetWishlistItemsForLocalFieldQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetWishlistItemsForLocalFieldQuery, GetWishlistItemsForLocalFieldQueryVariables>(GetWishlistItemsForLocalFieldDocument, options);
        }
export type GetWishlistItemsForLocalFieldQueryHookResult = ReturnType<typeof useGetWishlistItemsForLocalFieldQuery>;
export type GetWishlistItemsForLocalFieldLazyQueryHookResult = ReturnType<typeof useGetWishlistItemsForLocalFieldLazyQuery>;
export type GetWishlistItemsForLocalFieldQueryResult = Apollo.QueryResult<GetWishlistItemsForLocalFieldQuery, GetWishlistItemsForLocalFieldQueryVariables>;